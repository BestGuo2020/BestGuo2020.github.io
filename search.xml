<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>银河麒麟arm版v10系统打包pyqt程序</title>
      <link href="/journal/pyqt-pyqtwebengine-anaconda-deploy/"/>
      <url>/journal/pyqt-pyqtwebengine-anaconda-deploy/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p>最近公司要做一个桌面端应用，并且该应用要在 win10，win7 和 银河麒麟 v10 银河麒麟 arm 版 v10系统中，这里主要细说 银河麒麟 arm 版 v10 操作系统，使用 nuitka 打包 python 程序至可执行文件。</p><p>该操作系统虽然自带 python3.8 和 Qt 组件，但是没有 QtWebEngine 这个组件，自己尝试用 pip 安装 PyQtWebEngine，但是卡在 qmake 一直安装失败，因此最后我们使用 anaconda 来打包这个项目。</p><h2 id="开始打包"><a href="#开始打包" class="headerlink" title="开始打包"></a>开始打包</h2><p>我的 anaconda 虚拟环境是 python 3.10，安装的依赖有以下</p><pre class="language-bash" data-language="bash"><code class="language-bash">conda <span class="token function">install</span> <span class="token parameter variable">-c</span> conda-forge openpyxl pyqt5-sip pyqtwebengine requests jieba</code></pre><span id="more"></span><p>然后使用 pip 安装 nutika</p><pre class="language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> Nuitka</code></pre><p>开始打包</p><pre class="language-bash" data-language="bash"><code class="language-bash">nuitka3 <span class="token parameter variable">--standalone</span> --show-progress --show-memory --enable-plugin<span class="token operator">=</span>pyqt5,glfw,dll-files --include-package-data<span class="token operator">=</span>package_name<span class="token operator">=</span>data --windows-icon-from-ico<span class="token operator">=</span>./icon/pc.ico --static-libpython<span class="token operator">=</span>no --output-dir<span class="token operator">=</span>out/release1.0.87_kylin main_ui.py</code></pre><p><img src="/journal/pyqt-pyqtwebengine-anaconda-deploy/first.png" alt="first" loading="lazy"></p><p>项目打包完成后，由于 Nuitka 打包不会很完整，直接运行会报错。</p><h2 id="后续补充"><a href="#后续补充" class="headerlink" title="后续补充"></a>后续补充</h2><h3 id="报错1：缺少-libsmime3-so-文件"><a href="#报错1：缺少-libsmime3-so-文件" class="headerlink" title="报错1：缺少 libsmime3.so 文件"></a>报错1：缺少 libsmime3.so 文件</h3><pre class="language-bash" data-language="bash"><code class="language-bash">huawei@huawei-L410-KLVU-WDU0:~/xxxx/out/release1.0.87_kylin/main_ui.dist$ ./main_ui.bin Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>: File <span class="token string">"/home/huawei/xxxx/out/release1.0.87_kylin/main_ui.dist/main_ui.py"</span>, line <span class="token number">4</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span> File <span class="token string">"/home/huawei/xxxx/out/release1.0.87_kylin/main_ui.dist/xxxx.py"</span>, line <span class="token number">12</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module xxxxxx<span class="token operator">></span>ImportError: /lib/aarch64-linux-gnu/libnss3.so: version `NSS_3.65' not found <span class="token punctuation">(</span>required by /home/huawei/xxxx/out/release1.0.87_kylin/main_ui.dist/PyQt5/<span class="token punctuation">..</span>/libsmime3.so<span class="token punctuation">)</span></code></pre><p>解决办法：复制anaconda虚拟环境下的libnss3.so文件</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> ~/.conda/envs/py_wjp/lib/libnss3.so <span class="token builtin class-name">.</span></code></pre><h3 id="报错2：缺少-libnssutil3-so-文件"><a href="#报错2：缺少-libnssutil3-so-文件" class="headerlink" title="报错2：缺少 libnssutil3.so 文件"></a>报错2：缺少 libnssutil3.so 文件</h3><pre class="language-bash" data-language="bash"><code class="language-bash">huawei@huawei-L410-KLVU-WDU0:~/xxxx/out/release1.0.87_kylin/main_ui.dist$ ./main_ui.bin Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>: File <span class="token string">"/home/huawei/xxxx/out/release1.0.87_kylin/main_ui.dist/main_ui.py"</span>, line <span class="token number">4</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span> File <span class="token string">"/home/huawei/xxxx/out/release1.0.87_kylin/main_ui.dist/xxxxxx.py"</span>, line <span class="token number">12</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module xxxxxx<span class="token operator">></span>ImportError: /lib/aarch64-linux-gnu/libnssutil3.so: version `NSSUTIL_3.82' not found <span class="token punctuation">(</span>required by /home/huawei/xxxx/out/release1.0.87_kylin/main_ui.dist/PyQt5/<span class="token punctuation">..</span>/libnss3.so<span class="token punctuation">)</span></code></pre><p>解决办法：复制anaconda虚拟环境下的libnssutil3.so文件</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> ~/.conda/envs/py_wjp/lib/libnssutil3.so <span class="token builtin class-name">.</span> </code></pre><h3 id="报错3：缺少-jieba-的-dict-txt-文件："><a href="#报错3：缺少-jieba-的-dict-txt-文件：" class="headerlink" title="报错3：缺少 jieba 的 dict.txt 文件："></a>报错3：缺少 jieba 的 dict.txt 文件：</h3><blockquote><p>这个报错在 windows 系统上也会出现</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash">Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>: File <span class="token string">"/home/huawei/xxxx/out/release1.0.87_kylin/main_ui.dist/main_ui.py"</span>, line <span class="token number">4</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span> File <span class="token string">"&lt;frozen importlib._bootstrap>"</span>, line <span class="token number">1027</span>, <span class="token keyword">in</span> _find_and_load File <span class="token string">"&lt;frozen importlib._bootstrap>"</span>, line <span class="token number">1006</span>, <span class="token keyword">in</span> _find_and_load_unlocked File <span class="token string">"&lt;frozen importlib._bootstrap>"</span>, line <span class="token number">688</span>, <span class="token keyword">in</span> _load_unlocked File <span class="token string">"/home/huawei/xxxx/out/release1.0.87_kylin/main_ui.dist/xxxxxx.py"</span>, line <span class="token number">17</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module xxxxxx<span class="token operator">></span> File <span class="token string">"&lt;frozen importlib._bootstrap>"</span>, line <span class="token number">1027</span>, <span class="token keyword">in</span> _find_and_load File <span class="token string">"&lt;frozen importlib._bootstrap>"</span>, line <span class="token number">1006</span>, <span class="token keyword">in</span> _find_and_load_unlocked File <span class="token string">"&lt;frozen importlib._bootstrap>"</span>, line <span class="token number">688</span>, <span class="token keyword">in</span> _load_unlocked File <span class="token string">"/home/huawei/xxxx/out/release1.0.87_kylin/main_ui.dist/check_industry_name.py"</span>, line <span class="token number">5</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module check_industry_name<span class="token operator">></span> File <span class="token string">"&lt;frozen importlib._bootstrap>"</span>, line <span class="token number">1027</span>, <span class="token keyword">in</span> _find_and_load File <span class="token string">"&lt;frozen importlib._bootstrap>"</span>, line <span class="token number">1006</span>, <span class="token keyword">in</span> _find_and_load_unlocked File <span class="token string">"&lt;frozen importlib._bootstrap>"</span>, line <span class="token number">688</span>, <span class="token keyword">in</span> _load_unlocked File <span class="token string">"/home/huawei/xxxx/out/release1.0.87_kylin/main_ui.dist/extract_word.py"</span>, line <span class="token number">4</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module extract_word<span class="token operator">></span> File <span class="token string">"&lt;frozen importlib._bootstrap>"</span>, line <span class="token number">1027</span>, <span class="token keyword">in</span> _find_and_load File <span class="token string">"&lt;frozen importlib._bootstrap>"</span>, line <span class="token number">1006</span>, <span class="token keyword">in</span> _find_and_load_unlocked File <span class="token string">"&lt;frozen importlib._bootstrap>"</span>, line <span class="token number">688</span>, <span class="token keyword">in</span> _load_unlocked File <span class="token string">"/home/huawei/xxxx/out/release1.0.87_kylin/main_ui.dist/jieba/posseg/__init__.py"</span>, line <span class="token number">258</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module jieba.posseg<span class="token operator">></span> File <span class="token string">"/home/huawei/xxxx/out/release1.0.87_kylin/main_ui.dist/jieba/posseg/__init__.py"</span>, line <span class="token number">82</span>, <span class="token keyword">in</span> __init__ File <span class="token string">"/home/huawei/xxxx/out/release1.0.87_kylin/main_ui.dist/jieba/__init__.py"</span>, line <span class="token number">376</span>, <span class="token keyword">in</span> get_dict_file File <span class="token string">"/home/huawei/xxxx/out/release1.0.87_kylin/main_ui.dist/jieba/_compat.py"</span>, line <span class="token number">20</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>lambda<span class="token operator">></span> File <span class="token string">"/home/huawei/xxxx/out/release1.0.87_kylin/main_ui.dist/pkg_resources/__init__.py"</span>, line <span class="token number">1219</span>, <span class="token keyword">in</span> resource_stream File <span class="token string">"/home/huawei/xxxx/out/release1.0.87_kylin/main_ui.dist/pkg_resources/__init__.py"</span>, line <span class="token number">1497</span>, <span class="token keyword">in</span> get_resource_stream File <span class="token string">"/home/huawei/xxxx/out/release1.0.87_kylin/main_ui.dist/pkg_resources/__init__.py"</span>, line <span class="token number">1500</span>, <span class="token keyword">in</span> get_resource_string File <span class="token string">"/home/huawei/xxxx/out/release1.0.87_kylin/main_ui.dist/pkg_resources/__init__.py"</span>, line <span class="token number">1671</span>, <span class="token keyword">in</span> _getFileNotFoundError: <span class="token punctuation">[</span>Errno <span class="token number">2</span><span class="token punctuation">]</span> No such <span class="token function">file</span> or directory: <span class="token string">'/home/huawei/xxxx/out/release1.0.87_kylin/main_ui.dist/jieba/dict.txt'</span></code></pre><p>解决办法：找到 site-package 目录下的jieba，复制到项目下的 jieba 目录里。</p><pre class="language-bash" data-language="bash"><code class="language-bash">huawei@huawei-L410-KLVU-WDU0:~/xxxx/out/release1.0.87_kylin/main_ui.dist$ <span class="token function">mkdir</span> jiebahuawei@huawei-L410-KLVU-WDU0:~/xxxx/out/release1.0.87_kylin/main_ui.dist$ <span class="token function">cp</span> ~/.conda/envs/py_wjp/lib/python3.10/site-packages/jieba/dict.txt ./jieba/dict.txt</code></pre><h3 id="报错4（PyQtWebEngine报错的问题）："><a href="#报错4（PyQtWebEngine报错的问题）：" class="headerlink" title="报错4（PyQtWebEngine报错的问题）："></a>报错4（PyQtWebEngine报错的问题）：</h3><blockquote><p>这个报错在 windows 系统上也会出现</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash">Qt WebEngine resources not found at /home/huawei/xxxx/out/release1.0.87_kylin/main_ui.dist/PyQt5/Qt5/resources. Trying parent directory<span class="token punctuation">..</span>.Qt WebEngine resources not found at /home/huawei/xxxx/out/release1.0.87_kylin/main_ui.dist/PyQt5/Qt5. Trying application directory<span class="token punctuation">..</span>.Qt WebEngine resources not found at /home/huawei/xxxx/out/release1.0.87_kylin/main_ui.dist. Trying fallback directory<span class="token punctuation">..</span>. The application MAY NOT work.Path override failed <span class="token keyword">for</span> key base::DIR_QT_LIBRARY_DATA and path <span class="token string">'/home/huawei/.main_ui.bin'</span>Installed Qt WebEngine locales directory not found at location /home/huawei/xxxx/out/release1.0.87_kylin/main_ui.dist/PyQt5/Qt5/translations/qtwebengine_locales. Trying application directory<span class="token punctuation">..</span>.Qt WebEngine locales directory not found at location /home/huawei/xxxx/out/release1.0.87_kylin/main_ui.dist/qtwebengine_locales. Trying fallback directory<span class="token punctuation">..</span>. Translations MAY NOT not be correct.Path override failed <span class="token keyword">for</span> key ui::DIR_LOCALES and path <span class="token string">'/home/huawei/.main_ui.bin'</span><span class="token punctuation">[</span>0917/234306.100254:ERROR:icu_util.cc<span class="token punctuation">(</span><span class="token number">251</span><span class="token punctuation">)</span><span class="token punctuation">]</span> Couldn't mmap icu data <span class="token function">file</span></code></pre><p>解决办法：复制 resource，translation到PyQt5/Qt5 目录下</p><pre class="language-bash" data-language="bash"><code class="language-bash">huawei@huawei-L410-KLVU-WDU0:~/xxxx/out/release1.0.87_kylin/main_ui.dist$ <span class="token function">cp</span> <span class="token parameter variable">-rf</span> ./translations/ ./PyQt5/Qt5/huawei@huawei-L410-KLVU-WDU0:~/xxxx/out/release1.0.87_kylin/main_ui.dist$ <span class="token function">cp</span> <span class="token parameter variable">-rf</span> ./resources/ ./PyQt5/Qt5/</code></pre><p>这样子，一个带PyQtWebEngine的项目就可以启动了。</p><p>但是，还有一种情况，在不是Python3.9的项目中就会提示以下错误，这个问题是由PyQtWebEngine引起的。</p><h3 id="报错-5：No-suitable-graphics-backend-found"><a href="#报错-5：No-suitable-graphics-backend-found" class="headerlink" title="报错 5：No suitable graphics backend found"></a>报错 5：No suitable graphics backend found</h3><blockquote><p>anaconda 指定的 python3.9 虚拟环境不会出现问题</p></blockquote><p>No suitable graphics backend found</p><p>解决办法：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># Linux 平台暂时使用软件OpenGL渲染</span><span class="token keyword">if</span> sys<span class="token punctuation">.</span>platform <span class="token operator">==</span> <span class="token string">'linux'</span><span class="token punctuation">:</span>  QCoreApplication<span class="token punctuation">.</span>setAttribute<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>AA_UseSoftwareOpenGL<span class="token punctuation">)</span></code></pre><p>在窗口打开之前，加入以上代码，项目就可正常启动，设置这个参数的目的在Linux上使用软件OpenGL渲染。</p><h2 id="运行闪退"><a href="#运行闪退" class="headerlink" title="运行闪退"></a>运行闪退</h2><p>闪退后报 NSS 错误： NSS error code: -8023</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token number">411062</span>:419788:0917/235959.246870:ERROR:nss_util.cc<span class="token punctuation">(</span><span class="token number">166</span><span class="token punctuation">)</span><span class="token punctuation">]</span> Error initializing NSS with a persistent database <span class="token punctuation">(</span>sql:/home/huawei/.pki/nssdb<span class="token punctuation">)</span>:<span class="token punctuation">[</span><span class="token number">411062</span>:419788:0917/235959.247066:ERROR:nss_util.cc<span class="token punctuation">(</span><span class="token number">124</span><span class="token punctuation">)</span><span class="token punctuation">]</span> Error initializing NSS without a persistent database: NSS error code: <span class="token parameter variable">-8023</span><span class="token punctuation">[</span><span class="token number">411062</span>:419788:0917/235959.247083:FATAL:nss_util.cc<span class="token punctuation">(</span><span class="token number">126</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token assign-left variable">nss_error</span><span class="token operator">=</span>-8023, <span class="token assign-left variable">os_error</span><span class="token operator">=</span><span class="token number">0</span>追踪与中断点陷阱 <span class="token punctuation">(</span>核心已转储<span class="token punctuation">)</span></code></pre><p>解决办法：这个我参考了一篇Qt的博客。</p><p><a href="https://www.cnblogs.com/wjg123/p/15631698.html">Qt添加QWebEngine模块后打包在无Qt的环境上运行出错的问题 - 一笔一世界 - 博客园 (cnblogs.com)</a></p><p>他是直接复制nss文件夹到他的项目中，不过我们要复制nss文件夹里的文件到我们的项目中。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> /usr/lib/aarch64-linux-gnu/nss/* <span class="token builtin class-name">.</span></code></pre><p>这样的话，就不会报错闪退了。</p>]]></content>
      
      
      <categories>
          
          <category> 编程常见问题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anaconda </tag>
            
            <tag> Python </tag>
            
            <tag> PyQt </tag>
            
            <tag> PyQtWebEngine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之模板方法模式</title>
      <link href="/journal/design-pattern-template-method/"/>
      <url>/journal/design-pattern-template-method/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="何为模板方法模式"><a href="#何为模板方法模式" class="headerlink" title="何为模板方法模式"></a>何为模板方法模式</h2><p>模板方法模式在一个方法中定义一个算法的<strong>骨架</strong>，而把一些步骤延迟到子类。模板方法使得子类在<strong>不改变算法结构</strong>的情况下，重新定义算法中的<strong>某些步骤</strong>。</p><p>模板方法模式属于行为型模式，其对应的类图如下所示。</p><p><img src="/journal/design-pattern-template-method/template_pattern_uml_diagram.jpg" alt="template_pattern_uml_diagram" loading="lazy"></p><p>图片来源于 HeadFirst 设计模式。</p><span id="more"></span><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p>提到模板方法模式，我想到了炒菜。炒菜主要的步骤如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">倒油 -&gt; 烧油 -&gt; 炒蒜 -&gt; 炒菜 -&gt; 放盐 -&gt; 加水 -&gt; 出锅</span><br></pre></td></tr></table></figure><p>我们现在可以用代码来模拟炒菜，其中以上的步骤是炒菜的通用步骤，也就是说以上几步是炒菜的共性，可以将其抽取出来。抽取后的代码如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Dish</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 炒菜步骤不能随意破坏</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">prepareDish</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">        pourOil();</span><br><span class="line">        boilOil();</span><br><span class="line">        fry();</span><br><span class="line">        addSalt();</span><br><span class="line">        addWater();</span><br><span class="line">        beforeServed();</span><br><span class="line">        served();</span><br><span class="line">        afterServed();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">pourOil</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;倒入适量的油...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">boilOil</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始烧油...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 炒的内容由不同的菜决定</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">fry</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addSalt</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加半勺盐...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addWater</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加50ml水...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">served</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;出锅，装碗...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 出锅之前需要做什么？（默认不做）</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">beforeServed</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 出锅之后需要做什么？（默认不做）</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">afterServed</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就是毛豆炒肉了，毛豆炒肉的炒法，不过毛豆炒肉的做法比较简单。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EdamameStirFry</span> <span class="keyword">extends</span> <span class="title class_">Dish</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">fry</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;倒入蒜子和青椒炒20秒...&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;倒肉，炒肉至炒熟...&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;倒入毛豆，翻炒1分钟...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">beforeServed</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加20ml生抽...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过有些菜在炒的时候不需要加水，炒完即可直接出锅。比如韭菜炒蛋，韭菜在炒的时候水分就容易流出来，所以不需要加水，说起韭菜炒蛋，要先单独炒蛋，再炒韭菜，但是有些菜确实有这种分开炒的步骤，所以我们需要将抽象类中的步骤修改一下。甚至有些菜还需要焯水的步骤等等（比如西兰花）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Dish</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="variable">times</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 提前出锅次数</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 炒菜步骤不能随意破坏</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">prepareDish</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(isBoilingWater()) &#123;</span><br><span class="line">            boilingWater();</span><br><span class="line">        &#125;</span><br><span class="line">        pourOil();</span><br><span class="line">        boilOil();</span><br><span class="line">        fry();</span><br><span class="line">        <span class="comment">// 当要提前出锅备用时，我们可以用钩子函数</span></span><br><span class="line">        <span class="keyword">while</span>(isAdvance()) &#123;</span><br><span class="line">            times++;</span><br><span class="line">            served();</span><br><span class="line">            pourOil();</span><br><span class="line">            boilOil();</span><br><span class="line">            fry();</span><br><span class="line">        &#125;</span><br><span class="line">        addSalt();</span><br><span class="line">        addWater();</span><br><span class="line">        beforeServed();</span><br><span class="line">        served();</span><br><span class="line">        afterServed();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 是否需要提前出锅的操作</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">isAdvance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 炒菜之前是否要焯水</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">isBoilingWater</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 焯水</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">boilingWater</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 其他方法省略</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>韭菜炒蛋的步骤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EggsWithLeek</span> <span class="keyword">extends</span> <span class="title class_">Dish</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">fry</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (times == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;倒入鸡蛋液...&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;开始翻炒30秒...&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(times == <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;倒入韭菜...&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;开始炒韭菜...&quot;</span>);</span><br><span class="line">            <span class="built_in">super</span>.addSalt();</span><br><span class="line">            System.out.println(<span class="string">&quot;倒入炒好的鸡蛋...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addWater</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addSalt</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">isAdvance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> times &lt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplateTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;毛豆炒肉-------------&quot;</span>);</span><br><span class="line">        <span class="type">EdamameStirFry</span> <span class="variable">edamameStirFry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EdamameStirFry</span>();</span><br><span class="line">        edamameStirFry.prepareDish();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;韭菜炒蛋-------------&quot;</span>);</span><br><span class="line">        <span class="type">EggsWithLeek</span> <span class="variable">eggsWithLeek</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EggsWithLeek</span>();</span><br><span class="line">        eggsWithLeek.prepareDish();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">毛豆炒肉-------------</span><br><span class="line">倒入适量的油...</span><br><span class="line">开始烧油...</span><br><span class="line">倒入蒜子和青椒炒20秒...</span><br><span class="line">倒肉，炒肉至炒熟...</span><br><span class="line">倒入毛豆，翻炒1分钟...</span><br><span class="line">加半勺盐...</span><br><span class="line">加50ml水...</span><br><span class="line">加20ml生抽...</span><br><span class="line">出锅，装碗...</span><br><span class="line">韭菜炒蛋-------------</span><br><span class="line">倒入适量的油...</span><br><span class="line">开始烧油...</span><br><span class="line">倒入鸡蛋液...</span><br><span class="line">开始翻炒30秒...</span><br><span class="line">出锅，装碗...</span><br><span class="line">倒入适量的油...</span><br><span class="line">开始烧油...</span><br><span class="line">倒入韭菜...</span><br><span class="line">开始炒韭菜...</span><br><span class="line">加半勺盐...</span><br><span class="line">倒入炒好的鸡蛋...</span><br><span class="line">出锅，装碗...</span><br></pre></td></tr></table></figure><h2 id="Java-中的模板方法模式"><a href="#Java-中的模板方法模式" class="headerlink" title="Java 中的模板方法模式"></a>Java 中的模板方法模式</h2><ul><li>sort() 方法，给对象进行排序时，排序的算法已经写好，但是排序时的两个对象的比较是不知道的，需要实现 Comparable 接口中的 compareTo() 方法来决定两个对象的大小。</li><li>jdbcTemplate</li></ul>]]></content>
      
      
      <categories>
          
          <category> 23 种设计模式 </category>
          
          <category> 行为型设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式中之观察者模式</title>
      <link href="/journal/design-pattern-observer/"/>
      <url>/journal/design-pattern-observer/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="何为观察者模式"><a href="#何为观察者模式" class="headerlink" title="何为观察者模式"></a>何为观察者模式</h2><p>观察者模式定义对象之间的<strong>一对多依赖</strong>，这样一来，当一个对象的状态发生改变时，它的所有依赖者都会收到通知并自动更新。</p><p>观察者模式的类图如下所示。</p><p><img src="/journal/design-pattern-observer/cc8c1b3ad93e53fb1a4fb6981762af7e.png" alt="cc8c1b3ad93e53fb1a4fb6981762af7e" loading="lazy"></p><span id="more"></span><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>比如我自己有一个公众号，公众号每隔一段时间会推送消息（发布者），然后订阅公众号的用户（观察者）可以看到订阅者的消息。</p><p>创建一个消息类，包括标题，日期，简要内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Message</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义 Subject 接口，有注册订阅者，取消注册订阅者和发布消息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册订阅者</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> observer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">attach</span><span class="params">(Observer observer)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取消注册订阅者</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> observer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">detach</span><span class="params">(Observer observer)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">notifyObserver</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义观察者接口，主要接收来自 Subject 发布的消息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Message message)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现 Subject 接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyWxSubject</span> <span class="keyword">implements</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attach</span><span class="params">(Observer observer)</span> &#123;</span><br><span class="line">        observers.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">detach</span><span class="params">(Observer observer)</span> &#123;</span><br><span class="line">        observers.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyObserver</span><span class="params">()</span> &#123;</span><br><span class="line">        observers.forEach(observer -&gt; observer.update(message));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String title, String content)</span> &#123;</span><br><span class="line">        message.setDate(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        message.setTitle(title);</span><br><span class="line">        message.setContent(content);</span><br><span class="line">        <span class="comment">// 发布消息，通知订阅者（观察者）</span></span><br><span class="line">        notifyObserver();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现观察者接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Observer1</span> <span class="keyword">implements</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Observer1</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收来自订阅者的消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 消息实体类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Message message)</span> &#123;</span><br><span class="line">        System.out.println(username + <span class="string">&quot;，收到的消息如下&quot;</span>);</span><br><span class="line">        System.out.println(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObserverTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyWxSubject</span> <span class="variable">myWxSubject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyWxSubject</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Observer1</span> <span class="variable">zhangsan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Observer1</span>(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        <span class="type">Observer1</span> <span class="variable">lisi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Observer1</span>(<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">        <span class="type">Observer1</span> <span class="variable">wangwu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Observer1</span>(<span class="string">&quot;wangwu&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注册消息</span></span><br><span class="line">        myWxSubject.attach(zhangsan);</span><br><span class="line">        myWxSubject.attach(lisi);</span><br><span class="line">        myWxSubject.attach(wangwu);</span><br><span class="line"></span><br><span class="line">        myWxSubject.setMessage(<span class="string">&quot;观察模式&quot;</span>, <span class="string">&quot;观察者模式定义对象之间的一对多依赖，这样一来，当一个对象的状态发生改变时，它的所有依赖者都会收到通知并自动更新。&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 李四不订阅了</span></span><br><span class="line">        myWxSubject.detach(lisi);</span><br><span class="line">        myWxSubject.setMessage(<span class="string">&quot;单例模式&quot;</span>, <span class="string">&quot;确保类只有一个实例，并提供一个全局的访问点&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">zhangsan，收到的消息如下</span><br><span class="line">Message(title=观察模式, date=Wed Mar 15 17:11:28 CST 2023, content=观察者模式定义对象之间的一对多依赖，这样一来，当一个对象的状态发生改变时，它的所有依赖者都会收到通知并自动更新。)</span><br><span class="line">lisi，收到的消息如下</span><br><span class="line">Message(title=观察模式, date=Wed Mar 15 17:11:28 CST 2023, content=观察者模式定义对象之间的一对多依赖，这样一来，当一个对象的状态发生改变时，它的所有依赖者都会收到通知并自动更新。)</span><br><span class="line">wangwu，收到的消息如下</span><br><span class="line">Message(title=观察模式, date=Wed Mar 15 17:11:28 CST 2023, content=观察者模式定义对象之间的一对多依赖，这样一来，当一个对象的状态发生改变时，它的所有依赖者都会收到通知并自动更新。)</span><br><span class="line">======================================</span><br><span class="line">zhangsan，收到的消息如下</span><br><span class="line">Message(title=单例模式, date=Wed Mar 15 17:11:28 CST 2023, content=确保类只有一个实例，并提供一个全局的访问点)</span><br><span class="line">wangwu，收到的消息如下</span><br><span class="line">Message(title=单例模式, date=Wed Mar 15 17:11:28 CST 2023, content=确保类只有一个实例，并提供一个全局的访问点)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 23 种设计模式 </category>
          
          <category> 行为型设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之中介者模式</title>
      <link href="/journal/design-pattern-mediator/"/>
      <url>/journal/design-pattern-mediator/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>待续</p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 23 种设计模式 </category>
          
          <category> 创建型设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之生成器（建造者）模式</title>
      <link href="/journal/design-pattern-builder/"/>
      <url>/journal/design-pattern-builder/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="何为生成器模式"><a href="#何为生成器模式" class="headerlink" title="何为生成器模式"></a>何为生成器模式</h2><p>生成器模式（Builder Pattern）用于封转一个产品的构造过程，并允许按步骤构造。</p><p>主要解决在软件系统中，有时候面临着”一个复杂对象”的创建工作，其通常由各个部分的子对象用一定的算法构成；由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将它们组合在一起的算法却相对稳定。</p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 23 种设计模式 </category>
          
          <category> 创建型设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之外观（门面）模式</title>
      <link href="/journal/design-pattern-outline/"/>
      <url>/journal/design-pattern-outline/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="何为外观模式"><a href="#何为外观模式" class="headerlink" title="何为外观模式"></a>何为外观模式</h2><p>外观（门面）模式为子系统中的一组接口提供了一个统一的接口。外观模式定义了一个更高级别的接口，使得子系统他那个更加容易使用。但外观模式不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。</p><p><strong>外观模式的作用：</strong></p><ul><li>松散耦合，外观模式松散了客户端与子系统的耦合关系，让子系统内部的模块能更容易扩展和维护。</li><li>简单易用，外观模式让子系统更加易用，客户端不再需要了解子系统内部的实现，也不需要跟众多子系统内部的模块进行交互，只需要跟门面类交互就可以了。</li><li>更好的划分访问层次-通过合理使用 Facade，可以帮助我们更好地划分访问的层次。有些方法是对系统外的，有些方法是系统内部使用的。把需要暴露给外部的功能集中到门面中，这样既方便客户端使用，也很好地隐藏了内部的细节。</li></ul><span id="more"></span><p>外观模式的类图如下。</p><p><img src="/journal/design-pattern-outline/8105945650437011509.png" loading="lazy"></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>假设一台电脑，它包含了 CPU（处理器），Memory（内存） ，Disk（硬盘）这几个部件，若想要启动电脑，则先后必须启动 CPU、Memory、Disk。关闭也是如此。但是实际上我们在电脑开/关机时根本不需要去操作这些组件，因为电脑已经帮我们都处理好了，并隐藏了这些东西。</p><p>这些组件好比子系统角色，而电脑就是一个外观角色。</p><p><strong>接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SubSystem</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startup</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>子系统角色</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CPU</span> <span class="keyword">implements</span> <span class="title class_">SubSystem</span> &#123;   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startup</span><span class="params">()</span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;cpu startup!&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">()</span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;cpu shutdown!&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Memory</span> <span class="keyword">implements</span> <span class="title class_">SubSystem</span> &#123;    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startup</span><span class="params">()</span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;memory startup!&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">()</span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;memory shutdown!&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Disk</span> <span class="keyword">implements</span> <span class="title class_">SubSystem</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startup</span><span class="params">()</span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;disk startup!&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">()</span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;disk shutdown!&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>外观角色</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> SubSystem cpu;  </span><br><span class="line">    <span class="keyword">private</span> SubSystem memory;  </span><br><span class="line">    <span class="keyword">private</span> SubSystem disk;  </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Computer</span><span class="params">()</span>&#123;  </span><br><span class="line">        cpu = <span class="keyword">new</span> <span class="title class_">CPU</span>();  </span><br><span class="line">        memory = <span class="keyword">new</span> <span class="title class_">Memory</span>();  </span><br><span class="line">        disk = <span class="keyword">new</span> <span class="title class_">Disk</span>();  </span><br><span class="line">    &#125;  </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startup</span><span class="params">()</span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;start the computer!&quot;</span>);  </span><br><span class="line">        cpu.startup();  </span><br><span class="line">        memory.startup();  </span><br><span class="line">        disk.startup();  </span><br><span class="line">        System.out.println(<span class="string">&quot;start computer finished!&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">()</span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;begin to close the computer!&quot;</span>);  </span><br><span class="line">        cpu.shutdown();  </span><br><span class="line">        memory.shutdown();  </span><br><span class="line">        disk.shutdown();  </span><br><span class="line">        System.out.println(<span class="string">&quot;computer closed!&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>();  </span><br><span class="line">computer.startup();  </span><br><span class="line">computer.shutdown();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 23 种设计模式 </category>
          
          <category> 结构型设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之迭代器和组合模式</title>
      <link href="/journal/design-pattern-iterator-and-composite/"/>
      <url>/journal/design-pattern-iterator-and-composite/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="何为迭代器模式"><a href="#何为迭代器模式" class="headerlink" title="何为迭代器模式"></a>何为迭代器模式</h2><p>迭代器模式用于顺序访问集合对象的元素，<strong>不需要知道</strong>集合对象的底层表示。迭代器模式是一种行为型设计模式，在 Java 的集合框架中使用到迭代器（Iterator）来遍历集合中的元素。</p><p>但是，迭代器模式将存储数据和遍历数据的职责分离，增加新的聚合类需要对应增加新的迭代器类，类的个数成对增加，这在一定程度上增加了系统的复杂性。</p><p>迭代器模式的类图如下所示。</p><p><img src="/journal/design-pattern-iterator-and-composite/14273501821.jpg" loading="lazy"></p><span id="more"></span><h2 id="何为组合模式"><a href="#何为组合模式" class="headerlink" title="何为组合模式"></a>何为组合模式</h2><p>组合模式允许你将对象表现组合成树形结构来表现“部分 - 整体”层次结构。组合让客户可以统一处理个别对象和对象组合。组合模式是一种结构型设计模式。</p><p>但是，在使用组合模式时，其叶子和树枝的声明都是实现类，而不是接口，违反了依赖倒置原则。</p><p>组合模式的类图如下所示。</p><p><img src="/journal/design-pattern-iterator-and-composite/322609617.webp" alt="322609617" loading="lazy"></p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>在本例子的迭代器模式中，菜单项用的是数组，数组默认没有迭代器，因此我们可以自己使用迭代器来对数组进行遍历，使用了迭代器模式，调用者在取出元素时就不必知道迭代的具体集合是哪一个了。</p><p>MenuItem 类如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MenuItem</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要一个 Menu 接口，必须要实现创建迭代器的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Menu</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建必须的迭代器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Iterator&lt;MenuItem&gt; <span class="title function_">createIterator</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对菜单接口的实现，同时有一个内部类用于创建迭代器对象，这个迭代器的具体实现不必知道可以为私有。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LunchMenu</span> <span class="keyword">implements</span> <span class="title class_">Menu</span> &#123;</span><br><span class="line"></span><br><span class="line">    MenuItem[] menuItems;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">max_size</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LunchMenu</span><span class="params">()</span> &#123;</span><br><span class="line">        menuItems = <span class="keyword">new</span> <span class="title class_">MenuItem</span>[max_size];</span><br><span class="line"></span><br><span class="line">        addItem(<span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;金拱门豪华套餐&quot;</span>, <span class="string">&quot;1个，带点番茄酱和黑椒&quot;</span>, <span class="number">35.40</span>));</span><br><span class="line">        addItem(<span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;必败客披萨&quot;</span>, <span class="string">&quot;2个，一个榴莲味，一个火腿肠味&quot;</span>, <span class="number">22.13</span>));</span><br><span class="line">        addItem(<span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;可乐&quot;</span>, <span class="string">&quot;2瓶，带吸管&quot;</span>, <span class="number">6.00</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addItem</span><span class="params">(MenuItem menuItem)</span> &#123;</span><br><span class="line">        menuItems[count] = menuItem;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;MenuItem&gt; <span class="title function_">createIterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LunchIterator</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 迭代器内部类，不必知道具体的迭代器实现</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">LunchIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;MenuItem&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> count;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> index &lt; length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> MenuItem <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">MenuItem</span> <span class="variable">item</span> <span class="operator">=</span> menuItems[index];</span><br><span class="line">            <span class="keyword">if</span>(item == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>(<span class="string">&quot;没有元素了&quot;</span>);</span><br><span class="line">            index++;</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用者，服务员。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Waitress</span> &#123;</span><br><span class="line"></span><br><span class="line">    LunchMenu lunchMenu;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Waitress</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Waitress</span><span class="params">(LunchMenu lunchMenu)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.lunchMenu = lunchMenu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printMenu</span><span class="params">()</span> &#123;</span><br><span class="line">        printMenu(lunchMenu.createIterator());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">printMenu</span><span class="params">(Iterator&lt;MenuItem&gt; iterator)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IteratorTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LunchMenu</span> <span class="variable">lunchMenu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LunchMenu</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Waitress</span> <span class="variable">waitress</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Waitress</span>(lunchMenu);</span><br><span class="line">        waitress.printMenu();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ======= 运行结果 =======</span></span><br><span class="line"><span class="comment">// MenuItem(name=金拱门豪华套餐, desc=1个，带点番茄酱和黑椒, price=35.4)</span></span><br><span class="line"><span class="comment">// MenuItem(name=必败客披萨, desc=2个，一个榴莲味，一个火腿肠味, price=22.13)</span></span><br><span class="line"><span class="comment">// MenuItem(name=可乐, desc=2瓶，带吸管, price=6.0)</span></span><br></pre></td></tr></table></figure><hr><p>接下来有一个新的需求，就是菜单又包含着子菜单，如下所示。</p><ul><li>菜单 1<ul><li>菜单 1-1</li><li>菜单 1-2</li></ul></li></ul><p>比如 1 个员工（项目经理）要管理多个员工（程序员）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> String dept;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> salary;</span><br><span class="line">   <span class="keyword">private</span> List&lt;Employee&gt; subordinates;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//构造函数</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String name,String dept, <span class="type">int</span> sal)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">      <span class="built_in">this</span>.dept = dept;</span><br><span class="line">      <span class="built_in">this</span>.salary = sal;</span><br><span class="line">      subordinates = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Employee&gt;();</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Employee e)</span> &#123;</span><br><span class="line">      subordinates.add(e);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Employee e)</span> &#123;</span><br><span class="line">      subordinates.remove(e);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> List&lt;Employee&gt; <span class="title function_">getSubordinates</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> subordinates;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Employee :[ Name : &quot;</span>+ name </span><br><span class="line">      +<span class="string">&quot;, dept : &quot;</span>+ dept + <span class="string">&quot;, salary :&quot;</span></span><br><span class="line">      + salary+<span class="string">&quot; ]&quot;</span>;</span><br><span class="line">   &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建和打印员工</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompositePatternDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">Employee</span> <span class="variable">CEO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;John&quot;</span>,<span class="string">&quot;CEO&quot;</span>, <span class="number">30000</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="type">Employee</span> <span class="variable">headSales</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;Robert&quot;</span>,<span class="string">&quot;Head Sales&quot;</span>, <span class="number">20000</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="type">Employee</span> <span class="variable">headMarketing</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;Michel&quot;</span>,<span class="string">&quot;Head Marketing&quot;</span>, <span class="number">20000</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="type">Employee</span> <span class="variable">clerk1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;Laura&quot;</span>,<span class="string">&quot;Marketing&quot;</span>, <span class="number">10000</span>);</span><br><span class="line">      <span class="type">Employee</span> <span class="variable">clerk2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;Bob&quot;</span>,<span class="string">&quot;Marketing&quot;</span>, <span class="number">10000</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="type">Employee</span> <span class="variable">salesExecutive1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;Richard&quot;</span>,<span class="string">&quot;Sales&quot;</span>, <span class="number">10000</span>);</span><br><span class="line">      <span class="type">Employee</span> <span class="variable">salesExecutive2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;Rob&quot;</span>,<span class="string">&quot;Sales&quot;</span>, <span class="number">10000</span>);</span><br><span class="line"> </span><br><span class="line">      CEO.add(headSales);</span><br><span class="line">      CEO.add(headMarketing);</span><br><span class="line"> </span><br><span class="line">      headSales.add(salesExecutive1);</span><br><span class="line">      headSales.add(salesExecutive2);</span><br><span class="line"> </span><br><span class="line">      headMarketing.add(clerk1);</span><br><span class="line">      headMarketing.add(clerk2);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//打印该组织的所有员工</span></span><br><span class="line">      System.out.println(CEO); </span><br><span class="line">      <span class="keyword">for</span> (Employee headEmployee : CEO.getSubordinates()) &#123;</span><br><span class="line">         System.out.println(headEmployee);</span><br><span class="line">         <span class="keyword">for</span> (Employee employee : headEmployee.getSubordinates()) &#123;</span><br><span class="line">            System.out.println(employee);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;        </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Employee :[ Name : John, dept : CEO, salary :<span class="number">30000</span> ]</span><br><span class="line">Employee :[ Name : Robert, dept : Head Sales, salary :<span class="number">20000</span> ]</span><br><span class="line">Employee :[ Name : Richard, dept : Sales, salary :<span class="number">10000</span> ]</span><br><span class="line">Employee :[ Name : Rob, dept : Sales, salary :<span class="number">10000</span> ]</span><br><span class="line">Employee :[ Name : Michel, dept : Head Marketing, salary :<span class="number">20000</span> ]</span><br><span class="line">Employee :[ Name : Laura, dept : Marketing, salary :<span class="number">10000</span> ]</span><br><span class="line">Employee :[ Name : Bob, dept : Marketing, salary :<span class="number">10000</span> ]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 23 种设计模式 </category>
          
          <category> 结构型设计模式 </category>
          
          <category> 行为型设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之适配器模式</title>
      <link href="/journal/design-pattern-adapter/"/>
      <url>/journal/design-pattern-adapter/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="何为适配器模式"><a href="#何为适配器模式" class="headerlink" title="何为适配器模式"></a>何为适配器模式</h2><p>适配器模式是将一个类的接口<strong>转换</strong>成客户期望的另一个接口。适配器让两个不兼容的类可以合作。</p><p>适配器模式有两种，一种是类适配器，另一种是对象适配器。相关的类图分别如下。</p><p><img src="/journal/design-pattern-adapter/img_e39c72c9911afea88c5a867c5d213e76.jpeg" loading="lazy"></p><center><font size="2">类适配器</font></center><span id="more"></span><p><img src="/journal/design-pattern-adapter/img_8e5060e7534692429cf27c12b5e488e5.jpeg" loading="lazy"></p><center><font size="2">对象适配器</font></center><p>很遗憾，类适配器需要多继承，而多继承在 Java 中是不允许的，所以在 Java 中适配器模式指的是对象适配器。</p><p>适配器模式在生活中非常常见。比如我要去香港玩，需要备好手机充电器，可是经过了解之后发现香港那边的墙上插座是“三脚品字形”，而在内陆“两扁平行”和“三扁八字形带接地”比较常见，所以我们需要一个转接器（适配器）将自带的充电口插入到转接器上，转接器再插到“品字形”插座上，这样就能在香港给手机充电了。</p><p>在 JAVA JDK 1.1 提供了 Enumeration 接口，而在 1.2 中提供了 Iterator 接口，想要使用 1.2 的 JDK，则要将以前系统的 Enumeration 接口转化为 Iterator 接口，这时就需要适配器模式。</p><h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h2><p>创建两个接口，一个香港的插座接口，一个内陆的插座接口。同时还需要实现一个转内陆插头的转接器。</p><p>1、香港的插座接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HongKongSocket</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 充电的具体设备名称</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setDevice</span><span class="params">(String device)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取设备名称</span></span><br><span class="line">    String <span class="title function_">getDevice</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 充电</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">charge</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、内陆的插座接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">NativeSocket</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setDevice</span><span class="params">(String device)</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">getDevice</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">charge</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、创建适配器（香港 -&gt; 内陆）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SocketAdapter</span> <span class="keyword">implements</span> <span class="title class_">HongKongSocket</span> &#123;</span><br><span class="line"></span><br><span class="line">    NativeSocket nativeSocket;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SocketAdapter</span><span class="params">(NativeSocket nativeSocket)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;有新接口接入适配器：&quot;</span> + nativeSocket);</span><br><span class="line">        <span class="built_in">this</span>.nativeSocket = nativeSocket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDevice</span><span class="params">(String device)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDevice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">charge</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;适配器开始传输电...&quot;</span>);</span><br><span class="line">        nativeSocket.charge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、苹果手机的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IPhoneChargeSocket</span> <span class="keyword">implements</span> <span class="title class_">NativeSocket</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String device;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDevice</span><span class="params">(String device)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.device = device;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDevice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> device;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">charge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(device) || device.isBlank()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有设备接入&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;正在充电：&quot;</span> + device);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">NativeSocket</span> <span class="variable">chargeSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IPhoneChargeSocket</span>();</span><br><span class="line">        chargeSocket.setDevice(<span class="string">&quot;IPhone 14 Pro Max&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">SocketAdapter</span> <span class="variable">socketAdapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SocketAdapter</span>(chargeSocket);</span><br><span class="line">        socketAdapter.charge();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、运行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">有新接口接入适配器：com.example.demo_springboot.designpattern.adapter.IPhoneChargeSocket@327471b5</span><br><span class="line">适配器开始传输电...</span><br><span class="line">正在充电：IPhone <span class="number">14</span> Pro Max</span><br></pre></td></tr></table></figure><h2 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h2><p>将以前系统的 Enumeration 接口转化为 Iterator 接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IteratorAdapter</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;E&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    Enumeration&lt;E&gt; enumeration;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">IteratorAdapter</span><span class="params">(Enumeration&lt;E&gt; enumeration)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.enumeration = enumeration;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> enumeration.hasMoreElements();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> enumeration.nextElement();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">        Iterator.<span class="built_in">super</span>.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 23 种设计模式 </category>
          
          <category> 结构型设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之代理设计模式</title>
      <link href="/journal/design-pattern-proxy/"/>
      <url>/journal/design-pattern-proxy/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="何为代理设计模式"><a href="#何为代理设计模式" class="headerlink" title="何为代理设计模式"></a>何为代理设计模式</h2><p>代理设计模式就是提供一个<strong>替身</strong>（代理者）或者占位符来控制对这个对象的访问。 <strong>使用代理模式创建代表对象。代表对象控制这另一个对象的访问，被代表的对象可以是远程的对象、创建开销大的对象或需要安全控制的对象。</strong></p><p>代理模式的类图如下。</p><p><img src="/journal/design-pattern-proxy/b63f6573ac2a4b93895677711978328f.png" loading="lazy"></p><p>代理模式是在生活中特别常见，比如玩的跑跑卡丁车国服版本是由世纪天成公司代理的，世纪天成可以在原有跑跑卡丁车的基础上新加一些属于自己的功能，比如未成年人游戏时长限制控制、游戏内部的广告牌打广告、还有游戏中的默认车牌都显示“世纪天成”字样等等。</p><span id="more"></span><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>我们就以跑跑卡丁车国服游戏的例子来举例，同时结合 JDK 自带的动态代理。JDK 自带的动态代理必须要一个接口和实现需要代理的类，需要首先要一个 KartRider 接口，也就是原始的韩服跑跑卡丁车。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">KartRider</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setAd</span><span class="params">(String ad)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setCarId</span><span class="params">(String carId)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>世纪天成代理的跑跑卡丁车国服，“跑跑卡丁车国服”就是需要代理的类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChineseKartRider</span> <span class="keyword">implements</span> <span class="title class_">KartRider</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String ad;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String carId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAd</span><span class="params">(String ad)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.ad = ad;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCarId</span><span class="params">(String carId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.carId = carId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;游戏已启动!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ChineseKartRider&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;ad=&#x27;&quot;</span> + ad + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, carId=&#x27;&quot;</span> + carId + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个代理类（“也就是世纪天成了”）并实现 InvocationHandler 接口，其中 Invoke 方法就是用于控制创建的 ChineseKartRider 对象实例的方法访问，实现未成年人游戏时长限制控制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TianCityInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> KartRider kartRider;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TianCityInvocationHandler</span><span class="params">(KartRider kartRider)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.kartRider = kartRider;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proxy 调用该方法的代理实例</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method 调用其 getName 方法就知道是哪个方法名在使用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 调用的方法的参数个数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> IllegalAccessException &#123;</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">date</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        <span class="type">int</span> <span class="variable">week</span> <span class="operator">=</span> date.getDayOfWeek().getValue();</span><br><span class="line">        <span class="type">int</span> <span class="variable">hour</span> <span class="operator">=</span> date.getHour();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;play&quot;</span>.equals(method.getName())) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="type">ChineseKartRider</span> <span class="variable">p</span> <span class="operator">=</span> (ChineseKartRider) kartRider;</span><br><span class="line"></span><br><span class="line">                <span class="type">boolean</span> <span class="variable">req1</span> <span class="operator">=</span> week == <span class="number">5</span> || week == <span class="number">6</span> || week == <span class="number">0</span>; <span class="comment">// 未成年人只能在这三天玩游戏</span></span><br><span class="line">                <span class="type">boolean</span> <span class="variable">req2</span> <span class="operator">=</span> p.getAge() == <span class="literal">null</span> || p.getAge() &lt; <span class="number">18</span>; <span class="comment">// 年龄规则</span></span><br><span class="line">                <span class="type">boolean</span> <span class="variable">req3</span> <span class="operator">=</span> hour == <span class="number">20</span>; <span class="comment">// 1小时时长限制</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 未成年限制</span></span><br><span class="line">                <span class="keyword">if</span> (req1 &amp;&amp; req2 &amp;&amp; req3) &#123;</span><br><span class="line">                    <span class="keyword">return</span> method.invoke(kartRider, args);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 年龄过 18 岁不受此限制</span></span><br><span class="line">                <span class="keyword">if</span> (!req2) &#123;</span><br><span class="line">                    <span class="keyword">return</span> method.invoke(kartRider, args);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalAccessException</span>(<span class="string">&quot;通知要求，严格限制向未成年人提供网络游戏服务的时间， 所有网络游戏企业仅可在周五、周六、周日和法定节假日每日20时至21时向未成年人提供1小时服务！&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.getName().startsWith(<span class="string">&quot;set&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> method.invoke(kartRider, args);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行类（18岁以上不受限制，18岁以下在规定的时间就会提示）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">KartRider</span> <span class="variable">proxy</span> <span class="operator">=</span> getProxy();</span><br><span class="line">        proxy.setAd(<span class="string">&quot;跑跑卡丁车 - 突破&quot;</span>);</span><br><span class="line">        proxy.setCarId(<span class="string">&quot;世纪天成&quot;</span>);</span><br><span class="line">        proxy.play();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> KartRider <span class="title function_">getProxy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChineseKartRider</span> <span class="variable">kartRider</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChineseKartRider</span>();</span><br><span class="line">        kartRider.setAge(<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (KartRider) Proxy.newProxyInstance(</span><br><span class="line">                kartRider.getClass().getClassLoader(),</span><br><span class="line">                kartRider.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">TianCityInvocationHandler</span>(kartRider));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果（18岁不受限制）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ChineseKartRider&#123;ad=&#x27;跑跑卡丁车 - 突破&#x27;, carId=&#x27;世纪天成&#x27;, age=18&#125;</span><br><span class="line">游戏已启动!</span><br></pre></td></tr></table></figure><p>把年龄设置为 10 岁，抛出了异常。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.reflect.UndeclaredThrowableException</span><br><span class="line">at com.sun.proxy.$Proxy0.play(Unknown Source)</span><br><span class="line">at com.example.demo_springboot.designpattern.proxy.ProxyTest.main(ProxyTest.java:11)</span><br><span class="line">Caused by: java.lang.IllegalAccessException: 通知要求，严格限制向未成年人提供网络游戏服务的时间， 所有网络游戏企业仅可在周五、周六、周日和法定节假日每日20时至21时向未成年人提供1小时服务！</span><br><span class="line">at com.example.demo_springboot.designpattern.proxy.ChineseInvocationHandler.invoke(ChineseInvocationHandler.java:51)</span><br><span class="line">... 2 more</span><br></pre></td></tr></table></figure><h2 id="随处可见的代理模式"><a href="#随处可见的代理模式" class="headerlink" title="随处可见的代理模式"></a>随处可见的代理模式</h2><p>除了本例，Java RMI、Spring AOP、Spring Transaction Manager 等等也涉及到代理设计模式，面向切面编程的本质就是代理模式。</p><p>并且知道代理模式之后，也就明白为什么在被代理的对象（ChineseKartRider）内部调用方法时不受控制，若不确定该对象是被代理过的，可以通过 <code>Proxy.isProxyClass()</code> 方法来判断。</p>]]></content>
      
      
      <categories>
          
          <category> 23 种设计模式 </category>
          
          <category> 结构型设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在深圳的一个月</title>
      <link href="/journal/a-month-in-shenzhen/"/>
      <url>/journal/a-month-in-shenzhen/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>2023 年 2 月 8 日 22 点 30 分，坐着小姐夫的车来到深圳坪山，目前暂住在大姐家，至今也快一个月了。</p><span id="more"></span><p>直到现在，还没有接收到任何一家公司的面试邀请（和我想象中的区别太大了，怎么会这样），但是在找工作心态方面也开始有了一些变化，甚至学会了一些生活小妙招。之前有段时间特别焦虑、失眠、噩梦、担心、急切，现在放平心态慢慢来，该怎么样就怎么样。光焦虑没有任何用处，既浪费时间又搞乱心态，一点用都没有。大姐夫推荐的书还是要坚持下去看，面试题也要继续坚持多看多背多刷。</p><p><img src="/journal/a-month-in-shenzhen/IMG_20230308_122501.jpg" alt="IMG_20230308_122501" loading="lazy"></p><p>在各大招聘软件上投时，有反馈的很少，要么已读不回，要么收到了简历就再也没下文了。之后还会继续在各大平台继续广撒网，实在不行就找姐夫或者老爸看看有什么内推机会吧。</p><p>最后聊聊生活上，大姐对我很好，有住的地方感觉已经非常不错了。他们一家人周一到周五都不在家，午饭都是我自己做，偶尔自己去买买自己喜欢吃的菜。每天早上和下午大聪明都由我来接送，大姐下班回家我都会帮忙洗菜、切菜、炒菜等，饭后洗碗、扔垃圾，需要帮忙的我都会做，自己很听话。有时候也有把事情搞错或者搞忘😢，会虚心接受大姐的批评。周六日或者送完大聪明去公园锻炼锻炼，挺好。上个月自己在华为钱包里免费弄了个深圳通，地铁9.5折，试着做了一下地铁14号线（坪山广场-坑梓），确实挺不错的。</p><p>最后的最后，还是对自己说：虽然找工作期间确实比较煎熬痛苦，但也要充实自我，荒废可就危险了！适合自己的工作总能找到的。</p><p><img src="/journal/a-month-in-shenzhen/IMG_20230307_192729.jpg" alt="IMG_20230307_192729.jpg" loading="lazy"> </p><p>2023 年 3 月 9 日 16 时 42 分。</p>]]></content>
      
      
      <categories>
          
          <category> 小赫赫的日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之装饰器模式</title>
      <link href="/journal/design-pattern-decorator/"/>
      <url>/journal/design-pattern-decorator/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="何为装饰器模式"><a href="#何为装饰器模式" class="headerlink" title="何为装饰器模式"></a>何为装饰器模式</h2><p>装饰器模式<strong>动态地</strong>给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活，同时又不会改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。</p><p>装饰设计模式可代替继承。</p><p><img src="/journal/design-pattern-decorator/v2-c9f694b243f901a2bae58d54e2353b95_r.png" alt="装饰模式类图" loading="lazy"></p><span id="more"></span><h2 id="生活中的装饰器模式"><a href="#生活中的装饰器模式" class="headerlink" title="生活中的装饰器模式"></a>生活中的装饰器模式</h2><p>1、一幅画有没有画框都可以挂在墙上，但是通常都是有画框的，并且实际上是画框被挂在墙上。在挂在墙上之前，画可以被蒙上玻璃，装到框子里；这时画、玻璃和画框形成了一个物体。</p><p>2、戏剧演员需要上台演戏，因此需要化妆，比如“化底色”、“拍腮红”、“涂胭脂”等等，演员还是那位演员，但其实只是画了一个妆变了样子。</p><p>3、在《Head First 设计模式》中，举例了咖啡的例子，咖啡中有“摩卡”、“豆奶”、“拿铁”、“奶泡”，每一份配料都有对应的加个，然后分别计算出来得出耐饿咖啡的总价格。</p><h2 id="代码举例"><a href="#代码举例" class="headerlink" title="代码举例"></a>代码举例</h2><p>接下来就以一幅画做为例子，首先需要一个接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Paint</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现该接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TreePaint</span> <span class="keyword">implements</span> <span class="title class_">Plant</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;一棵油画树&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要一个抽象类，实现 Paint 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">PaintDecorator</span> <span class="keyword">implements</span> <span class="title class_">Paint</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> Paint decoratedPaint;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">PaintDecorator</span><span class="params">(Paint decoratedPaint)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.decoratedPaint = decoratedPaint;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">      decoratedShape.init();</span><br><span class="line">   &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建第一个具体的装饰类，给这幅画加上边框。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BorderPaintDecorator</span> <span class="keyword">extends</span> <span class="title class_">PaintDecorator</span> &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">BorderPaintDecorator</span><span class="params">(Paint decoratedPaint)</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>(decoratedPaint);     </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">      decoratedPaint.init();         </span><br><span class="line">      setBorder(decoratedShape);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setBorder</span><span class="params">(Paint decoratedPaint)</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;木质边框&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建第二个具体的装饰类，在边框上加个绳子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SlingPaintDecorator</span> <span class="keyword">extends</span> <span class="title class_">PaintDecorator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SlingPaintDecorator</span><span class="params">(Paint decoratorPaint)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(decoratorPaint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        decoratorPaint.init();</span><br><span class="line">        setBorder(decoratorPaint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setBorder</span><span class="params">(Paint decoratedPaint)</span>&#123;</span><br><span class="line">        System.out.println(decoratedPaint + <span class="string">&quot;：带吊绳&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行一下（装饰类可以被另一个装饰类给装饰）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDecorator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TreePaint</span> <span class="variable">treePaint</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreePaint</span>();</span><br><span class="line">        <span class="type">PaintDecorator</span> <span class="variable">paintDecorator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BorderPaintDecorator</span>(treePaint);</span><br><span class="line">        paintDecorator = <span class="keyword">new</span> <span class="title class_">SlingPaintDecorator</span>(paintDecorator);</span><br><span class="line">        paintDecorator.init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">一颗油画树</span><br><span class="line">com.example.demo_springboot.decorator.TreePaint@4157f54e：木质边框</span><br><span class="line">com.example.demo_springboot.decorator.BorderPaintDecorator@90f6bfd：带吊绳</span><br></pre></td></tr></table></figure><h2 id="Java-中的装饰器模式"><a href="#Java-中的装饰器模式" class="headerlink" title="Java 中的装饰器模式"></a>Java 中的装饰器模式</h2><p>Java 中出现装饰器模式主要是在 IO 包下，比如各种缓冲类 BufferReader 、BufferWriter 、 BufferInpuStream 、 BufferOutputStream 。</p>]]></content>
      
      
      <categories>
          
          <category> 23 种设计模式 </category>
          
          <category> 结构型设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之工厂模式</title>
      <link href="/journal/design-pattern-factory/"/>
      <url>/journal/design-pattern-factory/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="生活中的工厂模式"><a href="#生活中的工厂模式" class="headerlink" title="生活中的工厂模式"></a>生活中的工厂模式</h2><p>1、您需要一辆汽车，可以直接从工厂里面提货，而不用去管这辆汽车是怎么做出来的，以及这个汽车里面的具体实现。</p><p>2、玩具店里需要一些坦克玩具，就需要从玩具厂商那边进货，不需要知道这些坦克玩具的制造过程。</p><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><p><strong>工厂方法模式</strong>定义了一个创建对象的接口（创建一个对象），但是由子类决定要实例化哪个类。工厂方法让<strong>类把实例化推迟到子类</strong>。</p><p>工厂方法模式的类图如下。（下图来自于《Head First 设计模式》）</p><p><img src="/journal/design-pattern-factory/57a388f80001feec07690453.jpg" alt="工厂方法模式" loading="lazy"></p><span id="more"></span><p>在《Head First 设计模式》中，它举例了在美国不同的城市生产出来的披萨，其每个州的披萨工厂都有着一套的制作步骤被封装起来，比如“准备”、“烘烤”、“切” 和 “包装”。然后每个州的生产的披萨交给具体的工厂类来实现。</p><p>这是抽取出 Pizza 共有的属性和制作步骤。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo_springboot.designpattern.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Pizza</span> &#123;</span><br><span class="line"></span><br><span class="line">    String name; <span class="comment">// 名称</span></span><br><span class="line">    String dough; <span class="comment">// 面团类型</span></span><br><span class="line">    String sauce; <span class="comment">// 馅料</span></span><br><span class="line">    List&lt;String&gt; toppings = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">prepare</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;准备：&quot;</span> + name);</span><br><span class="line">        System.out.println(<span class="string">&quot;扔面团...&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;添加馅料...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bake</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;烤25分钟&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cut</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;切披萨&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">box</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;包装披萨&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Pizza 的具体实现，芝加哥 Pizza 和 纽约 Pizza。</p><p>纽约披萨。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo_springboot.designpattern.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NewYorkStyleCheesePizza</span> <span class="keyword">extends</span> <span class="title class_">Pizza</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NewYorkStyleCheesePizza</span><span class="params">()</span> &#123;</span><br><span class="line">        name = <span class="string">&quot;纽约风味的奶酪披萨&quot;</span>;</span><br><span class="line">        dough = <span class="string">&quot;薄皮面团&quot;</span>;</span><br><span class="line">        sauce = <span class="string">&quot;大蒜番茄酱&quot;</span>;</span><br><span class="line"></span><br><span class="line">        toppings.add(<span class="string">&quot;磨碎的雷吉亚诺奶酪&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>芝加哥披萨。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo_springboot.designpattern.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChicagoStyleCheesePizza</span> <span class="keyword">extends</span> <span class="title class_">Pizza</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ChicagoStyleCheesePizza</span><span class="params">()</span> &#123;</span><br><span class="line">        name = <span class="string">&quot;芝加哥风味深盘奶酪披萨&quot;</span>;</span><br><span class="line">        dough = <span class="string">&quot;Extra Thick Crust Dough&quot;</span>;</span><br><span class="line">        sauce = <span class="string">&quot;Plum Tomato Sauce&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cut</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;切成正方形&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后这些披萨需要交给各个城市的工厂，每个州的披萨工厂都有着一套的制作步骤，所以将步骤封装到抽象类当中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo_springboot.designpattern.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">PizzaStore</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Pizza <span class="title function_">orderPizza</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        <span class="type">Pizza</span> <span class="variable">pizza</span> <span class="operator">=</span> createPizza(type);</span><br><span class="line">        pizza.prepare();</span><br><span class="line">        pizza.bake();</span><br><span class="line">        pizza.cut();</span><br><span class="line">        pizza.box();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> Pizza <span class="title function_">createPizza</span><span class="params">(String pizza)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>芝加哥的披萨工厂（注意：类的实例化推迟到子类了）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChicagoPizzaStore</span> <span class="keyword">extends</span> <span class="title class_">PizzaStore</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Pizza <span class="title function_">createPizza</span><span class="params">(String pizza)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;cheese&quot;</span>.equals(pizza)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ChicagoStyleCheesePizza</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>纽约的披萨工厂（注意：类的实例化推迟到子类了）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo_springboot.designpattern.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NewYorkPizzaStore</span> <span class="keyword">extends</span> <span class="title class_">PizzaStore</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Pizza <span class="title function_">createPizza</span><span class="params">(String pizza)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;cheese&quot;</span>.equals(pizza)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">NewYorkStyleCheesePizza</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，在不同城市生产不同的披萨。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo_springboot.designpattern.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PizzaTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">PizzaStore</span> <span class="variable">pizzaStore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NewYorkPizzaStore</span>();</span><br><span class="line">        <span class="type">Pizza</span> <span class="variable">pizza</span> <span class="operator">=</span> pizzaStore.orderPizza(<span class="string">&quot;cheese&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;A 订购了一个：&quot;</span> + pizza.getName() + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        pizzaStore = <span class="keyword">new</span> <span class="title class_">ChicagoPizzaStore</span>();</span><br><span class="line">        pizza = pizzaStore.orderPizza(<span class="string">&quot;cheese&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;B 订购了一个：&quot;</span> + pizza.getName() + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">准备：纽约风味的奶酪披萨</span><br><span class="line">扔面团...</span><br><span class="line">添加馅料...</span><br><span class="line">烤25分钟</span><br><span class="line">切披萨</span><br><span class="line">包装披萨</span><br><span class="line">A 订购了一个：纽约风味的奶酪披萨</span><br><span class="line"></span><br><span class="line">准备：芝加哥风味深盘奶酪披萨</span><br><span class="line">扔面团...</span><br><span class="line">添加馅料...</span><br><span class="line">烤25分钟</span><br><span class="line">切成正方形</span><br><span class="line">包装披萨</span><br><span class="line">B 订购了一个：芝加哥风味深盘奶酪披萨</span><br></pre></td></tr></table></figure><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><p><strong>抽象工厂模式</strong>提供了提供一个创建一系列相关（创建多个与之相关的）或者相互依赖对象的接口，而无需指定他们具体的类。</p><p>比如：去公司面试或者上班，肯定有两套或多套衣服吧，比如说有商务装（成套，一系列具体产品）、时尚装（成套，一系列具体产品），甚至对于一个家庭来说，可能有商务女装、商务男装、时尚女装、时尚男装，这些也都是成套的，即一系列具体产品。假设一种情况，在您的家中，某一个衣柜（具体工厂）只能存放某一种这样的衣服（成套，一系列具体产品），每次拿这种成套的衣服时也自然要从这个衣柜中取出了。</p><p>抽象工厂模式的类图如下所示。</p><p><img src="/journal/design-pattern-factory/3E13CDD1-2CD2-4C66-BD33-DECBF172AE03.jpg" alt="抽象工厂模式" loading="lazy"></p><h2 id="站外例子"><a href="#站外例子" class="headerlink" title="站外例子"></a>站外例子</h2><p>以下，是在菜鸟教程的一个很好的例子：</p><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>工厂模式也就是鼠标工厂是个父类，有生产鼠标这个接口。</p><p>戴尔鼠标工厂，惠普鼠标工厂继承它，可以分别生产戴尔鼠标，惠普鼠标。</p><p>生产哪种鼠标不再由参数决定，而是创建鼠标工厂时，由戴尔鼠标工厂创建。</p><p>后续直接调用**鼠标工厂.生产鼠标()**即可</p><p><img src="https://www.runoob.com/wp-content/uploads/2018/07/1530601917-1999-DP-Factory.png" alt="img" loading="lazy"></p><h3 id="抽象工厂模式-1"><a href="#抽象工厂模式-1" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><p>抽象工厂模式也就是不仅生产鼠标，同时生产键盘。</p><p>也就是 PC 厂商是个父类，有生产鼠标，生产键盘两个接口。</p><p>戴尔工厂，惠普工厂继承它，可以分别生产戴尔鼠标+戴尔键盘，和惠普鼠标+惠普键盘。</p><p>创建工厂时，由戴尔工厂创建。</p><p>后续**工厂.生产鼠标()<strong>则生产戴尔鼠标，</strong>工厂.生产键盘()**则生产戴尔键盘。</p><p><img src="https://www.runoob.com/wp-content/uploads/2018/07/1530601916-7298-DP-AbstractFactory.png" alt="img" loading="lazy"></p><blockquote><p>在抽象工厂模式中，假设我们需要增加一个工厂</p></blockquote><p>假设我们增加华硕工厂，则我们需要增加华硕工厂，和戴尔工厂一样，继承 PC 厂商。</p><p>之后创建华硕鼠标，继承鼠标类。创建华硕键盘，继承键盘类即可。</p><p><img src="https://www.runoob.com/wp-content/uploads/2018/07/1530601980-8080-P-AbstractFactory-AddFactory.png" alt="img" loading="lazy"></p><blockquote><p>在抽象工厂模式中，假设我们需要增加一个产品</p></blockquote><p>假设我们增加耳麦这个产品，则首先我们需要增加耳麦这个父类，再加上戴尔耳麦，惠普耳麦这两个子类。</p><p>之后在PC厂商这个父类中，增加生产耳麦的接口。最后在戴尔工厂，惠普工厂这两个类中，分别实现生产戴尔耳麦，惠普耳麦的功能。 以上。</p><p><img src="https://www.runoob.com/wp-content/uploads/2018/07/1530601917-7462-P-AbstractFactory-AddProduct.png" alt="img" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 23 种设计模式 </category>
          
          <category> 创建型设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之策略模式</title>
      <link href="/journal/design-pattern-strategy/"/>
      <url>/journal/design-pattern-strategy/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="何为策略模式"><a href="#何为策略模式" class="headerlink" title="何为策略模式"></a>何为策略模式</h2><p>在策略模式（Strategy Pattern）中，一个类的行为或其算法可以在运行时更改。在策略模式中，我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的 context 对象。策略对象改变 context 对象的执行算法。</p><p>策略模式的 UML 类图如下。</p><p><img src="/journal/design-pattern-strategy/vdcc5a944acd6bcd925995ed11ef3bc08.jpg" loading="lazy"></p><span id="more"></span><h2 id="生活中的策略模式"><a href="#生活中的策略模式" class="headerlink" title="生活中的策略模式"></a>生活中的策略模式</h2><p>策略模式在生活中非常常见：</p><p>1、比如在购物时，不同的节日，物品打折的程度也不相同。于是，打折就是一种策略。</p><p>2、还有我想听我的朋友奏乐《夜光下的凤尾竹》，我的朋友会钢琴，葫芦丝，笛子等等乐器，具体所使用什么乐器可以协商决定。于是，用什么乐器奏乐，就是一种策略。</p><p>3、旅行的出游方式，选择骑自行车、坐汽车。于是，每一种旅行方式都是一个策略。</p><p>4、……</p><h2 id="代码举例"><a href="#代码举例" class="headerlink" title="代码举例"></a>代码举例</h2><p>接下来，咱们就听听我的朋友来奏一首《夜光下的凤尾竹》吧。既然说到我的朋友会“钢琴，葫芦丝，笛子”三首乐器，那就每个乐器都让他奏乐一遍吧。</p><p>把每一种奏乐方式都实现一遍。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个接口，抽取出通用的奏乐方法</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MusicalInstruments</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">play</span><span class="params">(String title)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分别实现三种不同的乐器</span></span><br><span class="line"><span class="comment">// 这是钢琴</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Piano</span> <span class="keyword">implements</span> <span class="title class_">MusicalInstruments</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">(String title)</span> &#123;</span><br><span class="line">        Systetm.out.println(<span class="string">&quot;使用钢琴弹《&quot;</span> + title + <span class="string">&quot;》&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用葫芦丝</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hulusi</span> <span class="keyword">implements</span> <span class="title class_">MusicalInstruments</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">(String title)</span> &#123;</span><br><span class="line">        Systetm.out.println(<span class="string">&quot;使用葫芦丝吹《&quot;</span> + title + <span class="string">&quot;》&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用笛子</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Flute</span> <span class="keyword">implements</span> <span class="title class_">MusicalInstruments</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">(String title)</span> &#123;</span><br><span class="line">        Systetm.out.println(<span class="string">&quot;使用笛子吹《&quot;</span> + title + <span class="string">&quot;》&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是我的朋友，名字就拼音简写了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyFriend</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;czx&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 奏乐</span></span><br><span class="line">    <span class="keyword">private</span> MusicalInstruments instruments;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInstruments</span><span class="params">(MusicalInstruments instruments)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.instruments = instruments;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">(String title)</span> &#123;</span><br><span class="line">        instruments.play(title);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>快点奏乐吧，我等不及了（喜）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] s)</span> &#123;</span><br><span class="line">        <span class="type">MyFriend</span> <span class="variable">myFriend</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyFriend</span>();</span><br><span class="line">        </span><br><span class="line">        myFriend.setInstruments(<span class="keyword">new</span> <span class="title class_">Piano</span>());</span><br><span class="line">        myFriend.play(<span class="string">&quot;夜光下的凤尾竹&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        myFriend.setInstruments(<span class="keyword">new</span> <span class="title class_">Hulusi</span>());</span><br><span class="line">        myFriend.play(<span class="string">&quot;夜光下的凤尾竹&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        myFriend.setInstruments(<span class="keyword">new</span> <span class="title class_">Flute</span>());</span><br><span class="line">        myFriend.play(<span class="string">&quot;夜光下的凤尾竹&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三种乐器都好听，但是我觉得用葫芦丝吹会更好听。☺️</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>1、如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。 </p><p>2、一个系统需要动态地在几种算法中选择一种。</p><p>3、如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。</p><h2 id="优点和缺点"><a href="#优点和缺点" class="headerlink" title="优点和缺点"></a>优点和缺点</h2><p><strong>优点：</strong> 1、算法可以自由切换。 2、避免使用多重条件判断。 3、扩展性良好。</p><p><strong>缺点：</strong> 1、策略类会增多。 2、所有策略类都需要对外暴露。</p>]]></content>
      
      
      <categories>
          
          <category> 23 种设计模式 </category>
          
          <category> 行为型设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud 应用程序网关和断言</title>
      <link href="/journal/spring-cloud-gateway/"/>
      <url>/journal/spring-cloud-gateway/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>在微服务项目中，各个功能模块拆分成了一个个微服务，每一个微服务都拥有自己的 ip 和端口。随着微服务逐渐增多时，客户端要去访问不同的服务，就要记住每个服务的 ip 和端口号，这在开发时简直就是灾难性的，混乱的。最终导致访问的入口不统一。</p><p>为了解决上面的问题，我们需要将客户端访问入口进行统一，于是 Spring Cloud Gateway 就出现了。</p><span id="more"></span><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/4.0.0-SNAPSHOT/reference/html/">Spring Cloud Gateway 文档链接</a></p><h2 id="快速体验"><a href="#快速体验" class="headerlink" title="快速体验"></a>快速体验</h2><p>新建一个项目或模块 Spring Cloud Gateway 的依赖如下（我自己在学习时有一个父模块）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>自己在学习时，我已经建好一个  localhost:8011 的服务！</p></blockquote><p>然后在 application.yml 中添加如下配置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8888</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">order_route</span> <span class="comment"># 唯一标识路由</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8011</span> <span class="comment"># 微服务的路由，当然也可以其它的服务</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment"># 断言规则，用于路由的匹配</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/order-serv/**</span> <span class="comment"># http://localhost:8011/order-serv/order/add</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span> <span class="comment"># 转发之前去掉第一层路径</span></span><br></pre></td></tr></table></figure><p>其中，配置的一些信息如下。</p><ul><li>routes：配置路由信息<ul><li>id：路由唯一标识</li><li>uri：服务的路径</li><li>predicates：路由规则，用于路由的匹配，目前有以下的断言规则，后面会一一举出这些使用<ul><li>Path：路径匹配</li><li>After：指定时间之后才能访问</li><li>Before：指定时间之前才能访问</li><li>Between：指定时间之间才能访问</li><li>Header：指定的请求头才能访问</li><li>Method：指定某个请求方法才能访问</li><li>Query：必须携带某个参数才能访问</li></ul></li><li>filters：过滤器<ul><li>StripPrefix：转发之前去掉第几层的路径</li></ul></li></ul></li></ul><p>尝试访问 <a href="http://localhost:8888/order-serv/order/add%EF%BC%8C%E5%8F%AF%E4%BB%A5%E6%AD%A3%E5%B8%B8%E5%9C%B0%E8%AE%BF%E9%97%AE%E3%80%82">http://localhost:8888/order-serv/order/add，可以正常地访问。</a></p><p><img src="/journal/spring-cloud-gateway/image-20221130212556083.png" alt="image-20221130212556083" loading="lazy"></p><h2 id="与-nacos-的整合"><a href="#与-nacos-的整合" class="headerlink" title="与 nacos 的整合"></a>与 nacos 的整合</h2><p>引入 nacos 的依赖，同时要排除 yaml 解析器的依赖，不然运行会出现异常。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.yaml<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>snakeyaml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当引入成功后，网关也是一个微服务了，此时可以通过服务名来访问了。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">order_route</span> <span class="comment"># 唯一标识路由</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://order-service</span> <span class="comment"># lb的意思是，使用 nacos 中的 loadbalance 负载均衡器</span></span><br></pre></td></tr></table></figure><p>同时 Spring Cloud Gateway 可以启动是否识别 nacos，这样就不用上面的写法了，但是据我了解上面的写法会比较多。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 是否启动自动识别nacos服务</span></span><br></pre></td></tr></table></figure><h2 id="路由断言工厂"><a href="#路由断言工厂" class="headerlink" title="路由断言工厂"></a>路由断言工厂</h2><p>路由断言默认有以下几个：</p><ul><li>Path：路径匹配</li><li>After：指定时间之后才能访问</li><li>Before：指定时间之前才能访问</li><li>Between：指定时间之间才能访问</li><li>Header：指定的请求头才能访问</li><li>Method：指定某个请求方法才能访问</li><li>Query：必须携带某个参数才能访问</li></ul><p>以上的规则可以一起使用，若全都不使用，则该服务下的所有路径都是可以访问到的。</p><h3 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h3><p>通配符</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">predicates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Path=/order-serv/**</span></span><br></pre></td></tr></table></figure><p>占位符</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">predicates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Path=/order-serv/&#123;path&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Before、After、Between"><a href="#Before、After、Between" class="headerlink" title="Before、After、Between"></a>Before、After、Between</h3><p>Between 是时间段，两个时间段之间需要用逗号隔开。不在规定的时间规则内访问，会返回 404 错误。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">predicates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">After=2022-11-30T14:50:49.088636500+08:00[Asia/Shanghai]</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Before=2022-11-30T14:55:00.088636500+08:00[Asia/Shanghai]</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Between=2022-11-30T15:00:00.088636500+08:00[Asia/Shanghai],</span> <span class="number">2022-11-30T15:05:00.088636500+08:00</span>[<span class="string">Asia/Shanghai</span>]</span><br></pre></td></tr></table></figure><h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><p>请求头中没有该参数，会返回 404 错误。逗号后面为传递的值，可以是正则表达式，下面的例子是该参数的值必须要是长度 ≥1 的数字。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">predicates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Header=X-Request-Id,\d+</span></span><br></pre></td></tr></table></figure><h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h3><p>请求方法必须为 GET 请求，如果是其他的请求（比如 POST），会返回 404 错误。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">predicates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Method=GET</span></span><br></pre></td></tr></table></figure><h3 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h3><p>使用方法和 Header 类似，请求中没有携带该参数，会返回 404 错误。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">predicates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Query=name,</span> <span class="string">zhangsan|lisi</span></span><br></pre></td></tr></table></figure><h2 id="自定义断言工厂"><a href="#自定义断言工厂" class="headerlink" title="自定义断言工厂"></a>自定义断言工厂</h2><p>自定义路由断言工厂需要继承 AbstractRoutePredicateFactory 类，重写apply方法的逻辑、在 apply 方法中可以通过 exchange.getRequest() 拿到 ServerHttpRequest 对象，从而可以获得请求的参数、请求方式、请求头等信息。</p><ul><li>必须spring组件bean</li><li>类必须加上 RoutePredicateFactory 作为结尾</li><li>必须继承 AbstractRoutePredicateFactory</li><li>必须声明静态内部类声明属性来接收配置文件中的信息</li><li>需要结合 shortcutFieldOrder </li></ul><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TokenRoutePredicateFactory</span> <span class="keyword">extends</span> <span class="title class_">AbstractRoutePredicateFactory</span>&lt;TokenRoutePredicateFactory.Config&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TokenRoutePredicateFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(TokenRoutePredicateFactory.Config.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">shortcutFieldOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Predicate&lt;ServerWebExchange&gt; <span class="title function_">apply</span><span class="params">(Config config)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (GatewayPredicate) serverWebExchange -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span>(config.getToken().equals(<span class="string">&quot;bestguo2020&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Validated</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String token;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getToken</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> token;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.token = token;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">order_route</span> <span class="comment"># 唯一标识路由</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://order-service</span> <span class="comment"># lb的意思是，使用 nacos 中的负载均衡器 http://localhost:8011</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment"># 断言规则，用于路由的匹配</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Token=bestguo2020</span> <span class="comment"># 注意类的名字，所以在配置时自定义断言的 key 为 Token</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> 分布式与微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Cloud Alibaba </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 类，兼容性和交叉性</title>
      <link href="/journal/ts-class-compatible-overlapping/"/>
      <url>/journal/ts-class-compatible-overlapping/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>ts 中的类通过 class 关键字创建。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">    gender = <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用构造函数 constructor 初始化属性。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person2</span> &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">gender</span>: <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例属性初始化</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">age: <span class="built_in">number</span>, gender: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">gender</span> = gender</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person2</span>(<span class="number">12</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1);</span><br></pre></td></tr></table></figure><span id="more"></span><p>类中的实例方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    x = <span class="number">10</span></span><br><span class="line">    y = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">scale</span>(<span class="params">n: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">x</span> *= n</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">y</span> *= n</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> point = <span class="keyword">new</span> <span class="title class_">Point</span>()</span><br><span class="line">point.<span class="title function_">scale</span>(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(point);</span><br></pre></td></tr></table></figure><h3 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h3><p>继承使用 extends 关键字，使得子类拥有父类的属性方法（不是全部）。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="title function_">move</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;moving along&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">    name = <span class="string">&#x27;柯基&#x27;</span></span><br><span class="line">    <span class="title function_">bark</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;汪&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog.<span class="property">name</span>);</span><br><span class="line"></span><br><span class="line">dog.<span class="title function_">move</span>()</span><br><span class="line">dog.<span class="title function_">bark</span>()</span><br></pre></td></tr></table></figure><h3 id="类的实现"><a href="#类的实现" class="headerlink" title="类的实现"></a>类的实现</h3><p>类的实现使用 implements 关键字，接口中的属性必须要在实现类中定义，方法必须要在实现类中实现。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Singable</span> &#123;</span><br><span class="line">    <span class="title function_">sing</span>(): <span class="built_in">void</span></span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person3</span> <span class="keyword">implements</span> <span class="title class_">Singable</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&#x27;jack&#x27;</span></span><br><span class="line">    <span class="title function_">sing</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;鸡你太美~&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p4 = <span class="keyword">new</span> <span class="title class_">Person3</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p4.<span class="property">name</span>);</span><br><span class="line">p4.<span class="title function_">sing</span>()</span><br></pre></td></tr></table></figure><h3 id="readonly-关键字"><a href="#readonly-关键字" class="headerlink" title="readonly 关键字"></a>readonly 关键字</h3><p>readonly 关键字只能用户属性中，和 Java 中的 final 关键字效果类似，也就是只读。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person4</span> &#123;</span><br><span class="line">    <span class="keyword">readonly</span> <span class="attr">age</span>: <span class="built_in">number</span> = <span class="number">18</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当不加类型时，ts 会推断成 18 的字面量类型，只要是 readonly 修饰的属性最好是要指定其类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person5</span> &#123;</span><br><span class="line">    <span class="keyword">readonly</span> age = <span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="成员可见性"><a href="#成员可见性" class="headerlink" title="成员可见性"></a>成员可见性</h3><p>目前有三种 public（默认可见性）、protected、private。上述的实例都是 public 类型，成员的属性和方法都可以访问到，这里就不再展示。</p><p>protected 受保护的属性和方法只有自己或者父类中受保护的成员，但是对实例是不可见的。</p><p>private 私有属性和方法只对自己可见。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal3</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">move</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;moving along&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;跑起来&#x27;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">move</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">__run__</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">__run__</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;内部辅助韩式&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog3</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal3</span> &#123;</span><br><span class="line">    name = <span class="string">&#x27;柯基&#x27;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">bark</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;汪&#x27;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">move</span>()</span><br><span class="line">        <span class="comment">// this.__run__() // 不能访问到父类的私有方法，报错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> d3 = <span class="keyword">new</span> <span class="title class_">Dog3</span>()</span><br><span class="line"><span class="comment">// d3.move() // 受保护的属性不能在实例中访问，会报错</span></span><br></pre></td></tr></table></figure><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><p>兼容性又有类兼容性、接口的兼容性和函数参数兼容性。</p><p>比如我们迭代数组里的元素时，用到 forEach 方法，我们在写回调时可以有三种写法。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;&#125;)</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;&#125;)</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure><h3 id="类兼容性"><a href="#类兼容性" class="headerlink" title="类兼容性"></a>类兼容性</h3><p>对于类和接口类型来说，y 的成员至少与 x 相同，则 x 兼容 y（ 成员多的可以赋值给少）。</p><p>两个类的属性相同</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point2</span> &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">y</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point2D</span> &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">y</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">point2</span>: <span class="title class_">Point2</span> = <span class="keyword">new</span> <span class="title class_">Point2D</span>() </span><br></pre></td></tr></table></figure><p>多的给少的</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point3D</span> &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">y</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">z</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point2D</span> &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">y</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">point3</span>: <span class="title class_">Point2D</span> = <span class="keyword">new</span> <span class="title class_">Point3D</span>()</span><br><span class="line"><span class="keyword">const</span> <span class="attr">point4</span>: <span class="title class_">Point3D</span> = <span class="keyword">new</span> <span class="title class_">Point2D</span>() <span class="comment">// 错误的</span></span><br></pre></td></tr></table></figure><h3 id="接口兼容性"><a href="#接口兼容性" class="headerlink" title="接口兼容性"></a>接口兼容性</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Point2D</span> &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">y</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Point3D</span> &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">y</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">z</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">pp2</span>: <span class="title class_">Point2D</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">pp3</span>: <span class="title class_">Point3D</span></span><br><span class="line"></span><br><span class="line">pp2 = pp3 <span class="comment">// 正确</span></span><br><span class="line">pp3 = pp2 <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure><h3 id="函数参数兼容性"><a href="#函数参数兼容性" class="headerlink" title="函数参数兼容性"></a>函数参数兼容性</h3><p>看对象中的属性，属性少的分配给属性多的。和上面正好反过来。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">F1</span> = <span class="function">(<span class="params">a: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F2</span> = <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">f1</span>: <span class="variable constant_">F1</span> = <span class="function">(<span class="params">a</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>();</span><br><span class="line"><span class="keyword">let</span> <span class="attr">f2</span>: <span class="variable constant_">F2</span> = f1</span><br></pre></td></tr></table></figure><p>函数的参数为对象时，看对象中的属性，属性少的分配给属性多的。</p><p>返回值的兼容性按照其返回值本身，如果是基本类型必须要相等。如果是对象，则按照对象的兼容性规则即可。</p><h2 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h2><p>将接口中定义的部分使用“&amp;”来将两个类型合并。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person7</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="title function_">say</span>(): <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Contact</span> &#123;</span><br><span class="line">    <span class="attr">phone</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PersonDetail</span> = <span class="title class_">Person7</span> &amp; <span class="title class_">Contact</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj1</span>: <span class="title class_">PersonDetail</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">    <span class="attr">phone</span>: <span class="string">&#x27;114&#x27;</span>,</span><br><span class="line">    <span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">12</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种感觉和 extends 类似，但是它们还是有区别的。比如下面的代码，会报错！</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person7</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="title function_">say</span>(<span class="attr">a</span>: <span class="built_in">number</span>): <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Contact</span> <span class="keyword">extends</span> <span class="title class_">Person7</span> &#123;</span><br><span class="line">    <span class="attr">phone</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="title function_">say</span>(): <span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vscode 提示会提示接口不兼容的错误。</p><p><img src="/journal/ts-class-compatible-overlapping/image-20221128181747317.png" alt="image-20221128181747317" loading="lazy"></p><p>使用 &amp; 就不会出问题了，vscode 提示这个合并之后该方法被重载了。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (method) say(): number (+1 overload)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PersonDetail</span> = <span class="title class_">Person7</span> &amp; <span class="title class_">Contact</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj1</span>: <span class="title class_">PersonDetail</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">    <span class="attr">phone</span>: <span class="string">&#x27;114&#x27;</span>,</span><br><span class="line">    <span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">12</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 基础小结</title>
      <link href="/journal/ts-basic/"/>
      <url>/journal/ts-basic/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装 typescript 编译器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm i -g typescript</span><br></pre></td></tr></table></figure><p>安装 ts-node 和 ts-lib，使用 ts-node 可以直接运行 ts 文件，期间也不会产生 js 文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm i -g ts-node</span><br><span class="line">&gt; npm i -g tslib @types/node</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>新建一个 hello.ts 文件，内容如下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello ts&quot;</span>);</span><br></pre></td></tr></table></figure><p>使用 tsc 命令编译生成 hello.js 文件。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; tsc hello.ts</span><br></pre></td></tr></table></figure><p>运行 js 文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; node hello.js</span><br></pre></td></tr></table></figure><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><h3 id="基本的"><a href="#基本的" class="headerlink" title="基本的"></a>基本的</h3><p>使用 js 的已有类型：number,string,boolean,null,undefined,symbol</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">grade</span>: <span class="built_in">number</span> = <span class="number">18</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">username</span>: <span class="built_in">string</span> = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">graduated</span>: <span class="built_in">boolean</span> = <span class="literal">false</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">classes</span>: <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">couple</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">s</span>: <span class="built_in">symbol</span> = <span class="title class_">Symbol</span>()</span><br></pre></td></tr></table></figure><h3 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h3><p>该变量可以有多种类型，比如下面的 date 变量既可以是 string 又可以是 null 类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">date</span>: <span class="built_in">string</span> | <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line">date = <span class="string">&#x27;2022-12-23&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h3><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>定义一个数组</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">numbers</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">string</span>: <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">bs</span>: <span class="built_in">boolean</span>[] = [<span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">true</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">bs2</span>: <span class="title class_">Array</span>&lt;<span class="built_in">boolean</span>&gt; = [<span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义类型（类型别名）</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">CustomArray</span> = (<span class="built_in">number</span> | <span class="built_in">string</span>)[]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr1</span>: <span class="title class_">CustomArray</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;a&#x27;</span>]</span><br></pre></td></tr></table></figure><p>数组中存放两种不同的类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">numbers2</span>: (<span class="built_in">number</span> | <span class="built_in">string</span>)[] = [<span class="number">1</span>, <span class="string">&#x27;2&#x27;</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>]</span><br></pre></td></tr></table></figure><blockquote><p>一定要加上括号，不然就是两种意思了</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">var2</span>: <span class="built_in">number</span> | <span class="built_in">string</span>[] = <span class="number">1</span></span><br><span class="line">var2 = [<span class="string">&#x27;12&#x27;</span>, <span class="string">&#x27;22&#x27;</span>]</span><br></pre></td></tr></table></figure></blockquote><h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h4><p>元组类型是另一种类型的数组，它确切地知道包含多少个元素，以及特定索引对应的类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">position2</span>: [<span class="built_in">number</span>, <span class="built_in">number</span>] = [<span class="number">111.234</span>, <span class="number">231.333</span>]</span><br></pre></td></tr></table></figure><h3 id="字面量类型"><a href="#字面量类型" class="headerlink" title="字面量类型"></a>字面量类型</h3><p>下面的 ‘Hello TS’，就是一个字面量类型。也就是说某个特定的字符串也可以作为 TS 中的类型。除字符串外，任意的 JS 字面量（比如，对象、数字等）都可以作为类型使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let str2: &#x27;Hello TS&#x27; = &#x27;Hello TS&#x27;</span><br></pre></td></tr></table></figure><p>使用模式：字面量类型配合联合类型一起使用。</p><p>使用场景：用来表示一组明确的可选值列表。</p><p>比如，在贪吃蛇游戏中，游戏的方向的可选值只能是上、下、左、右中的任意一个。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">direction</span>: <span class="string">&#x27;up&#x27;</span> | <span class="string">&#x27;right&#x27;</span> | <span class="string">&#x27;down&#x27;</span> | <span class="string">&#x27;left&#x27;</span> = <span class="string">&#x27;up&#x27;</span></span><br><span class="line">direct = <span class="string">&#x27;right&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h3><p>枚举定义，默认有值，从 0 自增。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123; <span class="title class_">Up</span> , <span class="title class_">Down</span> , <span class="title class_">Left</span>, <span class="title class_">Right</span> &#125; <span class="comment">// Up=0, Down=1, Left=2, Right=3</span></span><br></pre></td></tr></table></figure><p>可以给枚举初始化值。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123; <span class="title class_">Up</span> = <span class="number">10</span>, <span class="title class_">Down</span> = <span class="number">12</span>, <span class="title class_">Left</span>, <span class="title class_">Right</span> &#125; <span class="comment">// Left=13, Right=14</span></span><br></pre></td></tr></table></figure><p>当赋值为字符串时，字符串没有自增的能力，因此必须为每个元素都赋值。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123; <span class="title class_">Up</span> = <span class="string">&#x27;up&#x27;</span>, <span class="title class_">Down</span> = <span class="string">&#x27;down&#x27;</span>, <span class="title class_">Left</span> = <span class="string">&#x27;left&#x27;</span>, <span class="title class_">Right</span> = <span class="string">&#x27;right&#x27;</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="any-类型"><a href="#any-类型" class="headerlink" title="any 类型"></a>any 类型</h3><p>any 类型代表任意类型。非常容易在写代码出现问题，慎用。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">any</span> = <span class="number">1</span></span><br><span class="line">a = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">a = &#123; <span class="attr">name</span>: <span class="string">&#x27;xiaoqiang&#x27;</span>, <span class="attr">age</span>: <span class="number">15</span> &#125;</span><br><span class="line">a = <span class="function">() =&gt;</span> <span class="string">&#x27;ok&#x27;</span></span><br></pre></td></tr></table></figure><p>在函数中的参数，若不指定参数类型，ts 将其认为是 any 类型，其返回值也会认为是 any 类型</p><p><img src="/journal/ts-basic/image-20221124174836277.png" alt="image-20221124174836277" loading="lazy"></p><h2 id="自定义类型"><a href="#自定义类型" class="headerlink" title="自定义类型"></a>自定义类型</h2><p>自定义类型使用 type 关键字</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> direction = <span class="string">&#x27;up&#x27;</span> | <span class="string">&#x27;right&#x27;</span> | <span class="string">&#x27;down&#x27;</span> | <span class="string">&#x27;left&#x27;</span> = <span class="string">&#x27;up&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>像函数中指定类型和返回值。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">changeDirection</span>(<span class="params">direction: direction</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(direction);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>某些参数有时可不用传，可以加个“?”标记为可选参数，但是必选参数一定要在前面！</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">slice</span>(<span class="params">start: <span class="built_in">number</span>, end?: <span class="built_in">number</span></span>): <span class="built_in">void</span> &#123; </span><br><span class="line">    <span class="comment">// slice todo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两数相加</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num1: <span class="built_in">number</span>, num2: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>箭头形式的函数有两种形式，下面是第一种，它是由 A 变成 B。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">add2</span> = (<span class="params">num1, num2</span>) =&gt; num1 + num2 <span class="comment">// A</span></span><br><span class="line"><span class="keyword">let</span> add2 = (<span class="attr">num1</span>: <span class="built_in">number</span>, <span class="attr">num2</span>: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> num1 + num2 <span class="comment">// B</span></span><br></pre></td></tr></table></figure><p>第二种形式，指定一个“函数类型”并且指定“返回值类型”，这个自己感觉写法上麻烦很多。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">add3</span>: <span class="function">(<span class="params">num1: <span class="built_in">number</span>, num2: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>描述对象的结构，每一个定义不用逗号或分号结束，且只能为对象指定类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IPerson</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">sayhi</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">person3</span>: <span class="title class_">IPerson</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">19</span>,</span><br><span class="line">    <span class="title function_">sayhi</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">person4</span>: <span class="title class_">IPerson</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;xiaoqiang&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="title function_">sayhi</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h3><p>可选属性和函数的参数一样，加个“?”即可。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IPerson</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">    sayhi?: <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">person2</span>: <span class="title class_">IPerson</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">19</span>,</span><br><span class="line">    <span class="title function_">greet</span>(<span class="params"><span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口继承"><a href="#接口继承" class="headerlink" title="接口继承"></a>接口继承</h3><p>继承使用 extends 关键字。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Point2D</span> &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">y</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Point3D</span> <span class="keyword">extends</span> <span class="title class_">Point2D</span> &#123;</span><br><span class="line">    <span class="attr">z</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类型推断和断言"><a href="#类型推断和断言" class="headerlink" title="类型推断和断言"></a>类型推断和断言</h2><h3 id="推断"><a href="#推断" class="headerlink" title="推断"></a>推断</h3><p>多次给属性定义类型或许很麻烦，但是 ts 会做一个类型推断，这样一来就完全没有必要去指定变量的类型了。但是类型推断的前提是该类型必须要赋值。</p><p>下图声明了一个 age5 的变量，值为 18。ts 将其判定为 number 类型。</p><p><img src="/journal/ts-basic/image-20221124171911530.png" alt="image-20221124171911530" loading="lazy"></p><p>尝试赋值一个字符串，但是报错了“不能将 string  分配给 number 型”，说明 typescript 很智能的。</p><p><img src="/journal/ts-basic/image-20221124172220662.png" alt="image-20221124172220662" loading="lazy"></p><p>在某些情况下，函数的返回值也可以被推断出来，比如两数相加，返回值类型为 number 类型。</p><p><img src="/journal/ts-basic/image-20221124174633745.png" alt="image-20221124174633745" loading="lazy"></p><p>若只声明却不赋值，会隐式的变成 any 类型，类型推断失效了。此时只能去手动指定其类型。</p><p><img src="/journal/ts-basic/image-20221124172931575.png" alt="image-20221124172931575" loading="lazy"></p><h3 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h3><p>当我们确切的知道我们想要的类型的时候，此时我们可以使用 as 关键字或者使用 &lt;&gt; 来加入需要的类型。</p><p>比如我想通过 ts 获取 a 标签中的 href 属性，获取的代码如下。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> aLink = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;link&quot;</span>)</span><br></pre></td></tr></table></figure><p>但是此时是如何也获取不到 href 属性，通过百度发现 href 属性在 HTMLAnchorElement 中。此时可以这样的两种写法。 as 和 &lt;&gt;</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// as</span></span><br><span class="line"><span class="keyword">const</span> aLink = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;link&quot;</span>) <span class="keyword">as</span> <span class="title class_">HTMLAnchorElement</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aLink.<span class="property">href</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;&gt;</span></span><br><span class="line"><span class="keyword">const</span> aLink2 = &lt;<span class="title class_">HTMLAnchorElement</span>&gt;<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;link&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aLink2.<span class="property">href</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sentinel 流控模式和流控处理</title>
      <link href="/journal/sentinel-flow/"/>
      <url>/journal/sentinel-flow/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="流控模式"><a href="#流控模式" class="headerlink" title="流控模式"></a>流控模式</h2><p>流控模式分为三种：直接、关联和链路</p><h3 id="直接"><a href="#直接" class="headerlink" title="直接"></a>直接</h3><p>直接就是只限制单个资源，可以是接口，也可以是标记了 <code>@SentinelResource</code> 注解的 Service 方法。</p><span id="more"></span><p><img src="/journal/sentinel-flow/image-20221105145131440.png" alt="image-20221105145131440" loading="lazy"></p><h3 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h3><p>关联就是 A 资源把 B 资源关联了，A 资源的访问次数多了会影响到 B 资源的访问，类似于连带的意思。/order/get 可以看作时 B 资源，/order/add 可以看作时 A 资源，配置如下所示。</p><p><img src="/journal/sentinel-flow/image-20221105140617122.png" alt="image-20221105140617122" loading="lazy"></p><h3 id="链路"><a href="#链路" class="headerlink" title="链路"></a>链路</h3><p>链路流控，比如有 A、B、C 三个资源，A 和 B 依赖于 C，类似于树结构。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  C</span><br><span class="line"> / \</span><br><span class="line">A   B </span><br></pre></td></tr></table></figure><p>然后我需要对 B 进行限流，流量太多的原因是来自于 C，所以我要在 C -&gt; B 这条链路中对 C 进行限流。这里假设 C 为 getUser，A 为 /order/test1，B 为 /order/test2，配置应如下所示。</p><p><img src="/journal/sentinel-flow/image-20221105143837034.png" alt="image-20221105143837034" loading="lazy"></p><p>在 sentinel 1.6 之后，链路的维护是关闭的，也就是合在一起（unify）的。需要在配置文件中配置一下。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.cloud.sntinel.web-context-unify</span>=<span class="string">false # 默认不维护调用链路，关闭收敛</span></span><br></pre></td></tr></table></figure><p>服务重启之后，再重新去配置一下 getUser 的流控，限制入口资源为 /order/test2。当我访问 /order/test2 的时候，则触发流控异常，访问 /order/test1 ，由于限制的入口为 /order/test2，不会触发异常。</p><h2 id="流控效果"><a href="#流控效果" class="headerlink" title="流控效果"></a>流控效果</h2><p>流控效果分为 3 种：快速失败、Warm Up、排队等待</p><h3 id="快速失败"><a href="#快速失败" class="headerlink" title="快速失败"></a>快速失败</h3><p>快速失败，当超过了设置的阈值时，超过部分会被拒绝，即抛流控异常。异常可以配置全局的和局部的，全局的异常需要去实现 <code>BlockExceptionHandler</code> 接口来处理。局部的异常需要在 <code>@SentinelResource</code> 注解中指定 <code>blockHandler</code> 属性，一般就是本类中的方法，且方法必须为 public、返回值也一定和接口、方法名中的返回值一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/flowthread&quot;)</span></span><br><span class="line"><span class="meta">@SentinelResource(value = &quot;flow&quot;, blockHandler = &quot;flowBlockHandler&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">flowThread</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;正常访问thread&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">flowBlockHandler</span><span class="params">(BlockException e)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;流控了！&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若在其它类中则指定 <code>blockHandlerClass</code> 。</p><h3 id="Warm-Up"><a href="#Warm-Up" class="headerlink" title="Warm Up"></a>Warm Up</h3><p>Warm Up 又称预热/冷启动。当一个服务处于低流量的时候，突然流量激增可能会导致服务响应慢甚至是崩溃，为了能够抵御住突如其来的流量时，在到达阈值之后，在规定的时间将服务预热，让通过的流量缓慢增加，这样就不会出现服务宕机的问题了。</p><p>说起来有点费劲，但是通过这张图就能感觉到了。</p><p><img src="/journal/sentinel-flow/image-20221105233519118.png" alt="image-20221105233519118" loading="lazy"></p><p>在 sentinel 中，默认的冷加载因子（codeFactor）为 3，QPS = threshold（阈值）/ 3，随着访问增多，经预热时长逐渐升至设定的 QPS 阈值。</p><p>在上图的预热截图中，对应的配置如下图所示。</p><p><img src="/journal/sentinel-flow/image-20221105233700340.png" alt="image-20221105233700340" loading="lazy"></p><h3 id="排队等待"><a href="#排队等待" class="headerlink" title="排队等待"></a>排队等待</h3><p>排队等待适用于间隔性的突发流量，也就是在某一秒有大量间隔，然后几秒的时间空闲，然后又有突发流量涌入。例如消息队列。</p><p>这里使用了 JMeter 测试工具模拟间隔性突发流量的情况，QPS 数超过 5 时，直接拒绝掉。</p><p><img src="/journal/sentinel-flow/image-20221118180132972.png" alt="image-20221118181403061" loading="lazy"></p><p>我们希望系统能够在接下来的空闲期间逐渐处理这些请求，而不是拒绝掉，所以我们可以编辑流控规则，将流控效果设置成“排队等待”，且设置排队超时时间为 5 秒。</p><p><img src="/journal/sentinel-flow/image-20221115152545286.png" alt="image-20221115152545286" loading="lazy"></p><p>设置之后的效果，QPS 全部通过，因为后端有能力能在 5 秒内将逻辑处理完。</p><p><img src="/journal/sentinel-flow/image-20221118182052728.png" alt="image-20221118182052728" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> 分布式与微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Cloud Alibaba </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-jwt</title>
      <link href="/journal/java-jwt/"/>
      <url>/journal/java-jwt/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="JWT-构成"><a href="#JWT-构成" class="headerlink" title="JWT 构成"></a>JWT 构成</h2><p>JWT 是一个很长的字符串，看起来如下所示，中间用“.”隔开分为三部分。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJjdXN0b20gc3ViamVjdCIsImlzcyI6InpoYW5nc2FuIiwiYXVkIjoibm9ybWFsIHVzZXIiLCJuYmYiOjE2NjYxNzAwMjEsImlhdCI6MTY2NjE2OTk5MSwiZXhwIjoxNjY2MTcwMDUxfQ.QgGH1zo4FXOmG4mIrZDRQ-KaROgLEuKjlL78bGSRg0U</span><br></pre></td></tr></table></figure><p>其中分为三部分为“Header”、“Payload”、“Signature”。</p><span id="more"></span><h2 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h2><p>头（Header）：eyJhbGciOiJIUzI1NiJ9，是一个 json 对象，描述 JWT 的元数据，包含所使用的签名算法等等。使用 Base64 算法将数据进行加密。可使用 Base64 解密工具解密，解密之后的数据如下。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span><span class="string">&quot;HS256&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h2><p>负载（Payload）：也是一个 JSON 对象，使用 Base64 算法将数据进行加密。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJzdWIiOiJjdXN0b20gc3ViamVjdCIsImlzcyI6InpoYW5nc2FuIiwiYXVkIjoibm9ybWFsIHVzZXIiLCJuYmYiOjE2NjYxNzAwMjEsImlhdCI6MTY2NjE2OTk5MSwiZXhwIjoxNjY2MTcwMDUxfQ</span><br></pre></td></tr></table></figure><p>解密之后的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;sub&quot;:&quot;custom subject&quot;,&quot;iss&quot;:&quot;zhangsan&quot;,&quot;aud&quot;:&quot;normal user&quot;,&quot;nbf&quot;:1666170021,&quot;iat&quot;:1666169991,&quot;exp&quot;:1666170051&#125;</span><br></pre></td></tr></table></figure><p>解密后的 JSON 字串中，有如下官方的字段，且均为可选</p><ul><li>exp（expire）：过期时间</li><li>sub（subject）：主题</li><li>iss（issuer）：签发人</li><li>aud（audience）：受众</li><li>nbf（not before）：生效时间</li><li>iat（issued at）：签发时间</li><li>jti（JWT ID）：编号</li></ul><p>基于 Java 实现的 JJWT，过期时间和生效时间可以设定，在特定的情况下会抛出 <code>ExpiredJwtException</code> 和 <code>PrematureJwtException</code> 异常。</p><h2 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h2><p>签名（Signature）:8P1Gnfp1BYL_ViewC_yk1vwsjqF__-UagQDvPJADV9o，签名可防止数据被篡改。</p><p>签名算法如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">method(base64(header) + &quot;.&quot; + base64(payload) + &quot;.&quot; + secret)</span><br></pre></td></tr></table></figure><p>其中 method 代表的算法名称，可用的算法有很多，在 JJWT 中可使用的签名算法都放在 SignatureAlgorithm 类中，默认使用的签名算法为 HMAC-SHA256。</p><p>secret：密钥必须在服务器中保管好，不能随意发给用户。我们使用 JJWT 的 secret 生成器来生成密钥，当然自己来生成也是可以的。使用生成器生成的密钥如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SecretKey</span> <span class="variable">key</span> <span class="operator">=</span> MacProvider.generateKey(SignatureAlgorithm.HS256);</span><br></pre></td></tr></table></figure><h2 id="特点与用途"><a href="#特点与用途" class="headerlink" title="特点与用途"></a>特点与用途</h2><p>主要用于身份认证和信息交换。</p><p>优点：不需经过数据库校验</p><p>缺点：</p><ul><li>一旦签发，只能等到过期才会失效，无法在期间手动终止 token。</li><li>JWT 是明文的，有敏感数据时必须要将 JWT 加密，传输时尽量使用 HTTPS 协议传输数据。</li></ul><h2 id="实践一下"><a href="#实践一下" class="headerlink" title="实践一下"></a>实践一下</h2><p>一个简单的控制台程序，引入 Java JWT 的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jjwt核心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 包含签名算法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 处理jwt中的json部分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-jackson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 示例程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成的密钥</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">SecretKey</span> <span class="variable">key</span> <span class="operator">=</span> MacProvider.generateKey(SignatureAlgorithm.HS256);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加密方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">enc</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now().plusSeconds(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Instant</span> <span class="variable">instant</span> <span class="operator">=</span> now.atZone(ZoneId.systemDefault()).toInstant();</span><br><span class="line">        <span class="type">Date</span> <span class="variable">nb</span> <span class="operator">=</span> Date.from(instant); <span class="comment">// 生效时间</span></span><br><span class="line"></span><br><span class="line">        now = now.plusSeconds(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        instant = now.atZone(ZoneId.systemDefault()).toInstant();</span><br><span class="line">        <span class="type">Date</span> <span class="variable">expire</span> <span class="operator">=</span> Date.from(instant); <span class="comment">// 失效时间</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">compact</span> <span class="operator">=</span> Jwts.builder().serializeToJsonWith(<span class="keyword">new</span> <span class="title class_">JacksonSerializer</span>&lt;&gt;())</span><br><span class="line">                .setHeader(<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;() &#123;&#123;</span><br><span class="line"></span><br><span class="line">                &#125;&#125;)</span><br><span class="line">                .setSubject(<span class="string">&quot;Joe&quot;</span>) <span class="comment">// 主题</span></span><br><span class="line">                .setIssuer(<span class="string">&quot;zhangsan&quot;</span>) <span class="comment">// 设置签发人</span></span><br><span class="line">                .setSubject(<span class="string">&quot;custom subject&quot;</span>) <span class="comment">// 自定义主题</span></span><br><span class="line">                .setAudience(<span class="string">&quot;normal user&quot;</span>) <span class="comment">// 设置受众</span></span><br><span class="line">                .setNotBefore(nb) <span class="comment">// 设置生效时间</span></span><br><span class="line">                .setIssuedAt(<span class="keyword">new</span> <span class="title class_">Date</span>()) <span class="comment">// 设置签发时间</span></span><br><span class="line">                .setExpiration(expire) <span class="comment">// 设置过期时间</span></span><br><span class="line">                .signWith(key, SignatureAlgorithm.HS256) <span class="comment">// 生成签名</span></span><br><span class="line">                .compact();</span><br><span class="line"></span><br><span class="line">        System.out.println(compact);</span><br><span class="line"></span><br><span class="line">        jwt = compact;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解密方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dec</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">JwtParser</span> <span class="variable">build</span> <span class="operator">=</span> Jwts.parserBuilder()</span><br><span class="line">                .setSigningKey(key)</span><br><span class="line">                .deserializeJsonWith(<span class="keyword">new</span> <span class="title class_">JacksonDeserializer</span>&lt;&gt;()).build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取 payload 信息</span></span><br><span class="line">            Jws&lt;Claims&gt; claimsJws = build.parseClaimsJws(jwt);</span><br><span class="line"></span><br><span class="line">            <span class="type">Claims</span> <span class="variable">body</span> <span class="operator">=</span> claimsJws.getBody();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;主题：&quot;</span> + body.getSubject());</span><br><span class="line">            System.out.println(<span class="string">&quot;受众：&quot;</span> + body.getIssuer());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取生效时间</span></span><br><span class="line">            <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> body.getNotBefore();</span><br><span class="line">            <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> LocalDateTime.ofInstant(date.toInstant(), ZoneId.systemDefault())</span><br><span class="line">                    .format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;生效时间：&quot;</span> + format);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取签发时间</span></span><br><span class="line">            date = body.getIssuedAt();</span><br><span class="line">            format = LocalDateTime.ofInstant(date.toInstant(), ZoneId.systemDefault())</span><br><span class="line">                    .format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;签发时间：&quot;</span> + format);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取过期时间</span></span><br><span class="line">            date = body.getExpiration();</span><br><span class="line">            format = LocalDateTime.ofInstant(date.toInstant(), ZoneId.systemDefault())</span><br><span class="line">                    .format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;过期时间：&quot;</span> + format);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            System.out.println(body.getSubject());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExpiredJwtException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;token到期了，重新签发一下！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PrematureJwtException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;token还未生效，请再等等！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主程序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">            <span class="keyword">if</span>(s.equals(<span class="string">&quot;exit&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(s.equals(<span class="string">&quot;enc&quot;</span>)) &#123;</span><br><span class="line">                enc();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(s.equals(<span class="string">&quot;dec&quot;</span>)) &#123;</span><br><span class="line">                dec();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JWT </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gradle 学习小记</title>
      <link href="/journal/gradle-study/"/>
      <url>/journal/gradle-study/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一些命令"><a href="#一些命令" class="headerlink" title="一些命令"></a>一些命令</h2><p>编译项目</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle classes</span><br></pre></td></tr></table></figure><p>运行测试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle <span class="built_in">test</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>构建项目</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle build</span><br></pre></td></tr></table></figure><p>构建项目时跳过测试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle build -x <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>清空 build 目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle clean</span><br></pre></td></tr></table></figure><h2 id="修改-maven-下载源"><a href="#修改-maven-下载源" class="headerlink" title="修改 maven 下载源"></a>修改 maven 下载源</h2><p>在 Gradle 安装目录下的 init.d 文件夹下添加以 gradle 为扩展文件名的脚本文件，加载时修改成国内源。文件名为 init.gradle。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">repositories &#123;</span><br><span class="line">mavenLocal ()</span><br><span class="line">maven &#123; name <span class="string">&quot;Alibaba&quot;</span> ; url <span class="string">&quot;https://maven.aliyun.com/repository/public&quot;</span> &#125;</span><br><span class="line">maven &#123; name <span class="string">&quot;Bstek&quot;</span> ; url <span class="string">&quot;https://nexus.bsdn.org/content/groups/public/&quot;</span> &#125;</span><br><span class="line">mavenCentral ()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">buildscript &#123;</span><br><span class="line">repositories&#123;</span><br><span class="line">maven &#123; name <span class="string">&quot;Alibaba&quot;</span> ; url <span class="string">&#x27;https://maven.aliyun.com/repository/public&#x27;</span> &#125;</span><br><span class="line">maven &#123; name <span class="string">&quot;Bstek&quot;</span> ; url <span class="string">&#x27;https://nexus.bsdn.org/content/groups/public/&#x27;</span> &#125;</span><br><span class="line">maven &#123; name <span class="string">&quot;M2&quot;</span> ; url <span class="string">&#x27;https://plugins.gradle.org/m2/&#x27;</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mavenLocal：寻找 Maven 本地仓库中的 jar 包。</p><p>mavenCentral：寻找 Maven 国外的镜像仓库中的 jar 包。</p><p>maven：指定仓库地址。</p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> 其它 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB 学习笔记</title>
      <link href="/journal/mongodb-crud/"/>
      <url>/journal/mongodb-crud/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="MongoDB-相关概念"><a href="#MongoDB-相关概念" class="headerlink" title="MongoDB 相关概念"></a>MongoDB 相关概念</h2><p>MongoDB 中基本的概念是文档、集合、数据库。</p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>MongoDB 的单个实例可以容纳多个独立的数据库，每一个都有自己的集合和权限，不同的数据库也放置在不同的文件中。</p><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p>文档类似于 MySQL 中的一条记录（row），其大小不能超过 16M。文档内的属性不能包含 null 字符，句点（.），美元符号（$），不能以 system 开头。</p><p>文档的存储是以 JSON 的形式保存，在 MongoDB 中以 BSON（二进制的 JSON）的形式存储着。</p><span id="more"></span><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;site&quot;</span><span class="punctuation">:</span><span class="string">&quot;www.bestguo.top&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;BestGuo 的小窝&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p>集合中保存着一组文档，类似于 MySQL 中的表。集合存在于数据库中，没有固定的表结构。存储的方式可以如下。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;site&quot;</span><span class="punctuation">:</span><span class="string">&quot;www.bestguo.top&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;BestGuo 的小窝&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;site&quot;</span><span class="punctuation">:</span><span class="string">&quot;www.bestguo.top&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;BestGuo 的小窝&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;create&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-01-01&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;site&quot;</span><span class="punctuation">:</span><span class="string">&quot;www.bestguo.top&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;BestGuo 的小窝&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;views&quot;</span><span class="punctuation">:</span> <span class="string">&quot;6672&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;clients&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2835&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="SQL-与-NoSQL-对比"><a href="#SQL-与-NoSQL-对比" class="headerlink" title="SQL 与 NoSQL 对比"></a>SQL 与 NoSQL 对比</h2><p>SQL 与 NoSQL 的概念对比如下，这样就更好的理解 MongoDB 了。</p><table><thead><tr><th align="left">SQL术语/概念</th><th align="left">MongoDB术语/概念</th><th align="left">解释/说明</th></tr></thead><tbody><tr><td align="left">database</td><td align="left">database</td><td align="left">数据库</td></tr><tr><td align="left">table</td><td align="left">collection</td><td align="left">数据库表/集合</td></tr><tr><td align="left">row</td><td align="left">document</td><td align="left">数据记录行/文档</td></tr><tr><td align="left">column</td><td align="left">field</td><td align="left">数据字段/域</td></tr><tr><td align="left">index</td><td align="left">index</td><td align="left">索引</td></tr><tr><td align="left">table joins</td><td align="left"></td><td align="left">表连接，MongoDB 不支持</td></tr><tr><td align="left">primary key</td><td align="left">primary key</td><td align="left">主键，MongoDB 自动将 _id 字段设置为主键</td></tr></tbody></table><h2 id="MongoDB-数据库操作"><a href="#MongoDB-数据库操作" class="headerlink" title="MongoDB 数据库操作"></a>MongoDB 数据库操作</h2><h3 id="show-命令"><a href="#show-命令" class="headerlink" title="show 命令"></a>show 命令</h3><p>使用 show 命令查看全部的数据库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">show databases</span><br><span class="line">show dbs</span><br><span class="line"><span class="comment"># ============= Run Results ============= #</span></span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line"><span class="built_in">local</span>   0.000GB</span><br><span class="line"><span class="built_in">test</span>    0.001GB</span><br></pre></td></tr></table></figure><p>使用 show 命令显示集合</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">show collections</span><br><span class="line"><span class="comment"># ============= Run Results ============= #</span></span><br><span class="line">a</span><br><span class="line">item</span><br><span class="line">mythings</span><br><span class="line">students</span><br><span class="line">user</span><br></pre></td></tr></table></figure><h3 id="use-命令"><a href="#use-命令" class="headerlink" title="use 命令"></a>use 命令</h3><p>使用 use 命令切换数据库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use admin <span class="comment"># 切换至 admin 数据库</span></span><br><span class="line">use <span class="built_in">test</span> <span class="comment"># 切换至 test 数据库</span></span><br></pre></td></tr></table></figure><h3 id="db-命令"><a href="#db-命令" class="headerlink" title="db 命令"></a>db 命令</h3><p>使用 db 命令查看正在使用的数据库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db</span><br><span class="line"><span class="comment"># ============= Run Results ============= #</span></span><br><span class="line"><span class="built_in">test</span></span><br></pre></td></tr></table></figure><h3 id="创建集合-数据库"><a href="#创建集合-数据库" class="headerlink" title="创建集合/数据库"></a>创建集合/数据库</h3><blockquote><p>这些操作在 BestGuo 数据库中</p></blockquote><p>MongoDB 中没有直接创建数据库的命令，但是使用 use 命令之后，并且执行添加集合的操作，数据库才算是真正意义上的创建。</p><p>使用 <strong>db.createCollection()</strong> 方法来创建集合。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="title function_">createCollection</span>(<span class="string">&quot;user&quot;</span>)</span><br></pre></td></tr></table></figure><p>或者从一个不存在的集合中插入一个文档时，它也会自动创建该集合。插入文档的操作将在后面介绍。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">user_2_0</span>.<span class="title function_">insert</span>(&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;bestguo2020&quot;</span>， <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;)</span><br><span class="line"><span class="comment">/*********** Run Results ***********/</span></span><br><span class="line"><span class="title class_">WriteResult</span>(&#123; <span class="string">&quot;nInserted&quot;</span> : <span class="number">1</span> &#125;)</span><br></pre></td></tr></table></figure><h3 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a>删除集合</h3><p>使用 <strong>db.collectionName.drop()</strong> 来删除集合，其中 collectionName 指的是集合名字。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">user</span>.<span class="title function_">drop</span>()</span><br></pre></td></tr></table></figure><h3 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h3><p>插入文档可以使用 <strong>db.collectionName.save()</strong> 方法和 <strong>db.collectionName.insert()</strong> 方法插入数据。</p><blockquote><p>在插入整数时，由于 json 格式只有 number 类型，mongodb 为了保证不出错将 shell 中所有的 int、double 类型都存为 double。当然官方也考虑到用户实际想保存整型的问题，故允许在 json 中增加整型函数 NumberInt() 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">    data.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;德川&quot;</span> + i,</span><br><span class="line">        <span class="string">&quot;age&quot;</span>: <span class="title class_">NumberInt</span>(<span class="number">17</span> + i),</span><br><span class="line">        <span class="string">&quot;gender&quot;</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">        <span class="string">&quot;phone&quot;</span>: <span class="string">&quot;0592-114514&quot;</span></span><br><span class="line">    &#125;)    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.<span class="property">user_2_0</span>.<span class="title function_">insertMany</span>(data)</span><br></pre></td></tr></table></figure></blockquote><h4 id="insert-方法"><a href="#insert-方法" class="headerlink" title="insert 方法"></a>insert 方法</h4><p>插入一条数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">user_2_0</span>.<span class="title function_">save</span>(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;田所浩二&quot;</span>,</span><br><span class="line">        <span class="string">&quot;age&quot;</span>: <span class="number">24</span>,</span><br><span class="line">        <span class="string">&quot;gender&quot;</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">        <span class="string">&quot;phone&quot;</span>: <span class="string">&quot;0592-114514&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>插入多条数据，由于 MongoDB 的 shell 界面是 JavaScript，因此可以编写 JavaScript 的代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">    data.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;德川&quot;</span> + i,</span><br><span class="line">        <span class="string">&quot;age&quot;</span>: <span class="number">42</span> + i,</span><br><span class="line">        <span class="string">&quot;gender&quot;</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">        <span class="string">&quot;phone&quot;</span>: <span class="string">&quot;0592-114514&quot;</span></span><br><span class="line">    &#125;)    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.<span class="property">user_2_0</span>.<span class="title function_">insert</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="comment">/***** Run Results *****/</span></span><br><span class="line"><span class="number">1000</span></span><br><span class="line"><span class="title class_">Inserted</span> <span class="number">1</span> <span class="title function_">record</span>(s) <span class="keyword">in</span> 15ms</span><br></pre></td></tr></table></figure><h4 id="save-方法"><a href="#save-方法" class="headerlink" title="save 方法"></a>save 方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">user_2_0</span>.<span class="title function_">save</span>(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;lisi&quot;</span>,</span><br><span class="line">        <span class="string">&quot;age&quot;</span>: <span class="number">21</span>,</span><br><span class="line">        <span class="string">&quot;gender&quot;</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">        <span class="string">&quot;phone&quot;</span>: <span class="string">&quot;1145141919811&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>两个方法的区别：若指定的 id 存在时，save 方法会将原有的文档进行替换，不存在则和 insert 方法是一样的。</p><p><strong>使用 save 方法</strong></p><p>第一次插入的数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">user_2_0</span>.<span class="title function_">save</span>(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;114514&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;我修院&quot;</span>,</span><br><span class="line">        <span class="string">&quot;age&quot;</span>: <span class="number">24</span>,</span><br><span class="line">        <span class="string">&quot;gender&quot;</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">        <span class="string">&quot;phone&quot;</span>: <span class="string">&quot;0592-114514&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>第二次插入的数据时，会有如下的提示信息。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">user_2_0</span>.<span class="title function_">save</span>(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;114514&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;德川&quot;</span>,</span><br><span class="line">        <span class="string">&quot;age&quot;</span>: <span class="number">24</span>,</span><br><span class="line">        <span class="string">&quot;gender&quot;</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">        <span class="string">&quot;phone&quot;</span>: <span class="string">&quot;0592-114514&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">/***** Run Results *****/</span></span><br><span class="line"><span class="title class_">Updated</span> <span class="number">1</span> existing <span class="title function_">record</span>(s) <span class="keyword">in</span> 2ms</span><br></pre></td></tr></table></figure><p><strong>使用 insert 方法</strong></p><p>再次插入数据时，会出现 <strong>duplicate key error collection</strong> 的错误信息。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">user_2_0</span>.<span class="title function_">insert</span>(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;114514&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;德川&quot;</span>,</span><br><span class="line">        <span class="string">&quot;age&quot;</span>: <span class="number">24</span>,</span><br><span class="line">        <span class="string">&quot;gender&quot;</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">        <span class="string">&quot;phone&quot;</span>: <span class="string">&quot;0592-114514&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">/***** Run Results *****/</span></span><br><span class="line"><span class="variable constant_">E11000</span> duplicate key error <span class="attr">collection</span>: <span class="title class_">BestGuo</span>.<span class="property">user_2_0</span> <span class="attr">index</span>: _id_ dup <span class="attr">key</span>: &#123; <span class="attr">_id</span>: <span class="string">&quot;114514&quot;</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h3><p>使用 <strong>db.collectionName.update()</strong> 方法对文档进行更新。使用 $set 来修改原有文档的内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">user_2_0</span>.<span class="title function_">update</span>(</span><br><span class="line">    <span class="comment">// 修改的条件</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;114514&quot;</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="comment">// 修改的内容</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">$set</span>: &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;德川我修院&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">/***** Run Results *****/</span></span><br><span class="line"><span class="title class_">Updated</span> <span class="number">1</span> existing <span class="title function_">record</span>(s) <span class="keyword">in</span> 1ms</span><br></pre></td></tr></table></figure><p>在使用 $set 更新时，如果文档中不存在这个属性则会将不存在的属性添加进来。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">user_2_0</span>.<span class="title function_">update</span>(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;114514&quot;</span></span><br><span class="line">    &#125;, </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">$set</span>: &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;德川我修院&quot;</span>,</span><br><span class="line">            <span class="string">&quot;vip&quot;</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">/***** Run Results *****/</span></span><br><span class="line"><span class="title class_">Updated</span> <span class="number">1</span> existing <span class="title function_">record</span>(s) <span class="keyword">in</span> 1ms</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;_id&quot;</span> : <span class="string">&quot;114514&quot;</span>,</span><br><span class="line">    <span class="string">&quot;name&quot;</span> : <span class="string">&quot;德川我修院&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span> : <span class="number">24.0</span>,</span><br><span class="line">    <span class="string">&quot;gender&quot;</span> : <span class="string">&quot;男&quot;</span>,</span><br><span class="line">    <span class="string">&quot;phone&quot;</span> : <span class="string">&quot;0592-114514&quot;</span>,</span><br><span class="line">    <span class="string">&quot;vip&quot;</span> : <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h3><p>使用 <strong>db.collectionName.find()</strong> 方法来查询出文档数据。未限制条件时则查询出全部的数据。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">db.user_2_0.find()</span></span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62b97a2e305de3247a4e89cc&quot;), &quot;name&quot; : &quot;bestguo2020&quot;, &quot;age&quot; : 18 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62b97eace2bf2e431a87d8f6&quot;), &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 18, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;1145141919810&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62b97f23e2bf2e431a87d8f7&quot;), &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 21, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;1145141919811&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62b97fd4e2bf2e431a87d8f8&quot;), &quot;name&quot; : &quot;田所浩二&quot;, &quot;age&quot; : 24, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &quot;114514&quot;, &quot;name&quot; : &quot;德川我修院&quot;, &quot;age&quot; : 24, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot;, &quot;vip&quot; : true &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62b984cfe2bf2e431a87d8f9&quot;), &quot;name&quot; : &quot;德川0&quot;, &quot;age&quot; : 42, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62b984cfe2bf2e431a87d8fa&quot;), &quot;name&quot; : &quot;德川1&quot;, &quot;age&quot; : 43, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">Type &quot;it&quot; for more</span><br></pre></td></tr></table></figure><p>使用 <strong>findOne()</strong> 方法查询出一条数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">db.user_2_0.findOne()</span></span><br><span class="line">&#123;</span><br><span class="line">        &quot;_id&quot; : ObjectId(&quot;62b97a2e305de3247a4e89cc&quot;),</span><br><span class="line">        &quot;name&quot; : &quot;bestguo2020&quot;,</span><br><span class="line">        &quot;age&quot; : 18</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用 <strong>pretty()</strong> 方法将文档以格式化之后展示出来。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">db.user_2_0.find().pretty()</span></span><br><span class="line">&#123;</span><br><span class="line">        &quot;_id&quot; : ObjectId(&quot;62b97a2e305de3247a4e89cc&quot;),</span><br><span class="line">        &quot;name&quot; : &quot;bestguo2020&quot;,</span><br><span class="line">        &quot;age&quot; : 18</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">        &quot;_id&quot; : ObjectId(&quot;62b97eace2bf2e431a87d8f6&quot;),</span><br><span class="line">        &quot;name&quot; : &quot;zhangsan&quot;,</span><br><span class="line">        &quot;age&quot; : 18,</span><br><span class="line">        &quot;gender&quot; : &quot;男&quot;,</span><br><span class="line">        &quot;phone&quot; : &quot;1145141919810&quot;</span><br><span class="line">&#125;</span><br><span class="line">Type &quot;it&quot; for more</span><br></pre></td></tr></table></figure><h4 id="显示指定的字段"><a href="#显示指定的字段" class="headerlink" title="显示指定的字段"></a>显示指定的字段</h4><p>若要指定显示某些字段，可以在第二个参数中指定出想要的字段，不指定时则全部显示。若指定的字段不存在，则不显示。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.user_2_0.find(</span><br><span class="line">&#123;&#125;, # 查询的条件</span><br><span class="line">    &#123; # 需要显示的字段</span><br><span class="line">        name: 1, </span><br><span class="line">        age: 1, </span><br><span class="line">        asd: 1 # 这个字段不存在，就不显示</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="AND-条件"><a href="#AND-条件" class="headerlink" title="AND 条件"></a>AND 条件</h4><p>AND 条件很简单，只需在 find 方法中传入 JSON 格式即可。比如我找一个 name 为”田所浩二“，age 为”24“的人。可以写成<code>&#123;name: &quot;田所浩二&quot;, age: 24&#125;</code>。下面的语句可以理解成 <code>where name = &#39;田所浩二&#39; and age = 24</code>。第一层的<code>&#123;&#125;</code>所代表的就是 AND了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">db.user_2_0.find(</span></span><br><span class="line">...     &#123;</span><br><span class="line">...         name: &quot;田所浩二&quot;,</span><br><span class="line">...         age: 24</span><br><span class="line">...     &#125;</span><br><span class="line">... )</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">============= Run Results ============= <span class="comment">#</span></span></span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62b97fd4e2bf2e431a87d8f8&quot;), &quot;name&quot; : &quot;田所浩二&quot;, &quot;age&quot; : 24, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br></pre></td></tr></table></figure><h4 id="OR-条件"><a href="#OR-条件" class="headerlink" title="OR 条件"></a>OR 条件</h4><p>OR 条件需要使用 $or 来设置。下面的例子展示了查询姓名为”田所浩二“或者”德川我修院“的人。可以理解为<code>where name = &#39;田所浩二&#39; or name = &#39;德川我修院&#39;</code>，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">db.user_2_0.find(</span><br><span class="line">    &#123;</span><br><span class="line">        $or: [</span><br><span class="line">            &#123;</span><br><span class="line">                name: &quot;田所浩二&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                name: &quot;德川我修院&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h4><p>MongoDB中条件操作符有：</p><ul><li>(&gt;) 大于（great than） - $gt</li><li>(&lt;) 小于 （less than）- $lt</li><li>(&gt;=) 大于等于（great than or equals）- $gte</li><li>(&lt;= ) 小于等于（less than or equals）- $lte</li></ul><h5 id="great-than"><a href="#great-than" class="headerlink" title="great than"></a>great than</h5><p>大于操作符 $gt，比如我要查询出大于 100 岁的人。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">db.user_2_0.find(&#123;</span></span><br><span class="line">...     age: &#123;</span><br><span class="line">...         $gt: 100</span><br><span class="line">...     &#125;</span><br><span class="line">... &#125;)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">============= Run Results ============= <span class="comment">#</span></span></span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62b984cfe2bf2e431a87d934&quot;), &quot;name&quot; : &quot;德川59&quot;, &quot;age&quot; : 101,</span><br><span class="line">&quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62b984cfe2bf2e431a87d935&quot;), &quot;name&quot; : &quot;德川60&quot;, &quot;age&quot; : 102,</span><br><span class="line">&quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62b984cfe2bf2e431a87d936&quot;), &quot;name&quot; : &quot;德川61&quot;, &quot;age&quot; : 103,</span><br><span class="line">&quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62b984cfe2bf2e431a87d937&quot;), &quot;name&quot; : &quot;德川62&quot;, &quot;age&quot; : 104,</span><br><span class="line">&quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">Type &quot;it&quot; for more</span><br></pre></td></tr></table></figure><h5 id="less-than"><a href="#less-than" class="headerlink" title="less than"></a>less than</h5><p>小于操作符 $lt，查询出大于 30 小于 50 岁的人。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">db.user_2_0.find(&#123;</span></span><br><span class="line">age: &#123; </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">gt: 30,</span> </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">lt: 50</span> </span><br><span class="line">&#125; </span><br><span class="line">&#125;)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">============= Run Results ============= <span class="comment">#</span></span></span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62b984cfe2bf2e431a87d8f9&quot;), &quot;name&quot; : &quot;德川0&quot;, &quot;age&quot; : 42, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62b984cfe2bf2e431a87d8fa&quot;), &quot;name&quot; : &quot;德川1&quot;, &quot;age&quot; : 43, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62b984cfe2bf2e431a87d8fb&quot;), &quot;name&quot; : &quot;德川2&quot;, &quot;age&quot; : 44, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62b984cfe2bf2e431a87d8fc&quot;), &quot;name&quot; : &quot;德川3&quot;, &quot;age&quot; : 45, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62b984cfe2bf2e431a87d8fd&quot;), &quot;name&quot; : &quot;德川4&quot;, &quot;age&quot; : 46, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">Type &quot;it&quot; for more</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="great-than-or-equals"><a href="#great-than-or-equals" class="headerlink" title="great than or equals"></a>great than or equals</h5><p>大于等于操作符 $gte，比如我要查询出大于等于 200 岁，小于 210 岁的人。、</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">db.user_2_0.find(&#123;</span></span><br><span class="line">    age: &#123;</span><br><span class="line">        $gte: 200,</span><br><span class="line">        $lt: 210</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">============= Run Results ============= <span class="comment">#</span></span></span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62b984cfe2bf2e431a87d997&quot;), &quot;name&quot; : &quot;德川158&quot;, &quot;age&quot; : 200, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62b984cfe2bf2e431a87d998&quot;), &quot;name&quot; : &quot;德川159&quot;, &quot;age&quot; : 201, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62b984cfe2bf2e431a87d999&quot;), &quot;name&quot; : &quot;德川160&quot;, &quot;age&quot; : 202, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62b984cfe2bf2e431a87d99a&quot;), &quot;name&quot; : &quot;德川161&quot;, &quot;age&quot; : 203, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62b984cfe2bf2e431a87d99b&quot;), &quot;name&quot; : &quot;德川162&quot;, &quot;age&quot; : 204, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62b984cfe2bf2e431a87d99c&quot;), &quot;name&quot; : &quot;德川163&quot;, &quot;age&quot; : 205, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">Type &quot;it&quot; for more</span><br></pre></td></tr></table></figure><h5 id="less-than-or-equals"><a href="#less-than-or-equals" class="headerlink" title="less than or equals"></a>less than or equals</h5><p> 小于等于操作符 $gte，比如我要查询出大于 200 岁，小于等于 205 岁的人。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">db.user_2_0.find(&#123;</span></span><br><span class="line">    age: &#123;</span><br><span class="line">        $gt: 200,</span><br><span class="line">        $lte: 205</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">============= Run Results ============= <span class="comment">#</span></span></span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62b984cfe2bf2e431a87d998&quot;), &quot;name&quot; : &quot;德川159&quot;, &quot;age&quot; : 201, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62b984cfe2bf2e431a87d999&quot;), &quot;name&quot; : &quot;德川160&quot;, &quot;age&quot; : 202, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62b984cfe2bf2e431a87d99a&quot;), &quot;name&quot; : &quot;德川161&quot;, &quot;age&quot; : 203, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62b984cfe2bf2e431a87d99b&quot;), &quot;name&quot; : &quot;德川162&quot;, &quot;age&quot; : 204, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62b984cfe2bf2e431a87d99c&quot;), &quot;name&quot; : &quot;德川163&quot;, &quot;age&quot; : 205, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br></pre></td></tr></table></figure><h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><p>在 MongoDB 中没有专门的模糊查询关键字，但是可以使用正则的方式来实现模糊查询。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">db.user_2_0.find(&#123;</span></span><br><span class="line">...     age: &#123;</span><br><span class="line">...         $gte: 200,</span><br><span class="line">...         $lt: 205</span><br><span class="line">...     &#125;,</span><br><span class="line">...     name: /田所/</span><br><span class="line">... &#125;)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">============= Run Results ============= <span class="comment">#</span></span></span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62b985d9e2bf2e431a87dd7f&quot;), &quot;name&quot; : &quot;田所浩二158&quot;, &quot;age&quot; : 200, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62b985d9e2bf2e431a87dd80&quot;), &quot;name&quot; : &quot;田所浩二159&quot;, &quot;age&quot; : 201, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62b985d9e2bf2e431a87dd81&quot;), &quot;name&quot; : &quot;田所浩二160&quot;, &quot;age&quot; : 202, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62b985d9e2bf2e431a87dd82&quot;), &quot;name&quot; : &quot;田所浩二161&quot;, &quot;age&quot; : 203, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62b985d9e2bf2e431a87dd83&quot;), &quot;name&quot; : &quot;田所浩二162&quot;, &quot;age&quot; : 204, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62b985f6e2bf2e431a87e167&quot;), &quot;name&quot; : &quot;田所浩二158&quot;, &quot;age&quot; : 200, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62b985f6e2bf2e431a87e168&quot;), &quot;name&quot; : &quot;田所浩二159&quot;, &quot;age&quot; : 201, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62b985f6e2bf2e431a87e169&quot;), &quot;name&quot; : &quot;田所浩二160&quot;, &quot;age&quot; : 202, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62b985f6e2bf2e431a87e16a&quot;), &quot;name&quot; : &quot;田所浩二161&quot;, &quot;age&quot; : 203, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62b985f6e2bf2e431a87e16b&quot;), &quot;name&quot; : &quot;田所浩二162&quot;, &quot;age&quot; : 204, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br></pre></td></tr></table></figure><h4 id="联动"><a href="#联动" class="headerlink" title="联动"></a>联动</h4><p>查询出名字为”田所浩二x“（x表示数字，比如田所浩二114、田所浩二115）这一类的姓名，且年龄 18 ~ 24 岁（不含 24 岁含 18 岁）或在 114 ~ 119 （都包含） 之间。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">db.user_2_0.find(&#123;</span></span><br><span class="line">...     name: /田所浩二\d+$/,</span><br><span class="line">...     $or: [</span><br><span class="line">...         &#123;</span><br><span class="line">...             age: &#123;</span><br><span class="line">...                 $gt: 18,</span><br><span class="line">...                 $lte: 24</span><br><span class="line">...             &#125;</span><br><span class="line">...         &#125;,</span><br><span class="line">...         &#123;</span><br><span class="line">...             age: &#123;</span><br><span class="line">...                 $gte: 114,</span><br><span class="line">...                 $lte: 119</span><br><span class="line">...             &#125;</span><br><span class="line">...         &#125;,</span><br><span class="line">...     ]</span><br><span class="line">... &#125;)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">============= Run Results ============= <span class="comment">#</span></span></span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62b985d9e2bf2e431a87dd29&quot;), &quot;name&quot; : &quot;田所浩二72&quot;, &quot;age&quot; : 114, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62b985d9e2bf2e431a87dd2a&quot;), &quot;name&quot; : &quot;田所浩二73&quot;, &quot;age&quot; : 115, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62b985d9e2bf2e431a87dd2b&quot;), &quot;name&quot; : &quot;田所浩二74&quot;, &quot;age&quot; : 116, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62b985d9e2bf2e431a87dd2c&quot;), &quot;name&quot; : &quot;田所浩二75&quot;, &quot;age&quot; : 117, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62b985d9e2bf2e431a87dd2d&quot;), &quot;name&quot; : &quot;田所浩二76&quot;, &quot;age&quot; : 118, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62b985d9e2bf2e431a87dd2e&quot;), &quot;name&quot; : &quot;田所浩二77&quot;, &quot;age&quot; : 119, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62baa3dae2bf2e431a87e4ba&quot;), &quot;name&quot; : &quot;田所浩二19&quot;, &quot;age&quot; : 19, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62baa3dae2bf2e431a87e4bb&quot;), &quot;name&quot; : &quot;田所浩二20&quot;, &quot;age&quot; : 20, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62baa3dae2bf2e431a87e4bc&quot;), &quot;name&quot; : &quot;田所浩二21&quot;, &quot;age&quot; : 21, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62baa3dae2bf2e431a87e4bd&quot;), &quot;name&quot; : &quot;田所浩二22&quot;, &quot;age&quot; : 22, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62baa3dae2bf2e431a87e4be&quot;), &quot;name&quot; : &quot;田所浩二23&quot;, &quot;age&quot; : 23, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62baa3dae2bf2e431a87e4bf&quot;), &quot;name&quot; : &quot;田所浩二24&quot;, &quot;age&quot; : 24, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br></pre></td></tr></table></figure><h3 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h3><p>删除文档可以使用 <strong>remove</strong> 方法、<strong>deleteOne</strong> 方法和 <strong>deleteMany</strong> 方法。</p><p>使用 remove 删除一条文档，需要传入一个参数 <code>&#123;justOne: 1&#125;</code> ，若不传递或者设置成 0，则会删除集合中的全部文档。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">db.user_2_0.remove(&#123;&#125;, &#123;justOne: 1&#125;)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">============= Run Results ============= <span class="comment">#</span></span></span><br><span class="line">WriteResult(&#123; &quot;nRemoved&quot; : 1 &#125;)</span><br></pre></td></tr></table></figure><p>使用 deleteOne 能达到删除一条数据的效果。remove 传入参数 <code>&#123;justOne: 1&#125;</code> 和 deleteOne 删除一条信息的规则是第一条数据。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">db.user_2_0.deleteOne(&#123;&#125;)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">============= Run Results ============= <span class="comment">#</span></span></span><br><span class="line">&#123; &quot;acknowledged&quot; : true, &quot;deletedCount&quot; : 1 &#125;</span><br></pre></td></tr></table></figure><p>也可以按照条件删除元素，比如删除 114 ~ 514 岁（都包含）的人，使用 deleteOne 。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">db.user_2_0.deleteMany(&#123;</span></span><br><span class="line">    age: &#123;</span><br><span class="line">        $gte: 114,</span><br><span class="line">        $lte: 514,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">============= Run Results ============= <span class="comment">#</span></span></span><br><span class="line">&#123;</span><br><span class="line">    &quot;acknowledged&quot; : true,</span><br><span class="line">    &quot;deletedCount&quot; : 1211.0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>排序使用 <strong>sort()</strong> 方法，该方法作用于查询之后。比如我要查询姓名为”田所浩二x“（x表示数字，比如田所浩二114、田所浩二115）这一类的姓名，且按年龄升序排序。使用 1 和 -1 来指定排序的方式，其中 1 为升序排列，而 -1 是用于降序排列。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">db.user_2_0.find(&#123;name: /田所浩二\d+$/&#125;).<span class="built_in">sort</span>(&#123;age: 1&#125;).pretty();</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">============= Run Results ============= <span class="comment">#</span></span></span><br><span class="line">&#123;</span><br><span class="line">        &quot;_id&quot; : ObjectId(&quot;62baa3dae2bf2e431a87e4b9&quot;),</span><br><span class="line">        &quot;name&quot; : &quot;田所浩二18&quot;,</span><br><span class="line">        &quot;age&quot; : 18,</span><br><span class="line">        &quot;gender&quot; : &quot;男&quot;,</span><br><span class="line">        &quot;phone&quot; : &quot;0592-114514&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">        &quot;_id&quot; : ObjectId(&quot;62baa3dae2bf2e431a87e4ba&quot;),</span><br><span class="line">        &quot;name&quot; : &quot;田所浩二19&quot;,</span><br><span class="line">        &quot;age&quot; : 19,</span><br><span class="line">        &quot;gender&quot; : &quot;男&quot;,</span><br><span class="line">        &quot;phone&quot; : &quot;0592-114514&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">        &quot;_id&quot; : ObjectId(&quot;62baa3dae2bf2e431a87e4bb&quot;),</span><br><span class="line">        &quot;name&quot; : &quot;田所浩二20&quot;,</span><br><span class="line">        &quot;age&quot; : 20,</span><br><span class="line">        &quot;gender&quot; : &quot;男&quot;,</span><br><span class="line">        &quot;phone&quot; : &quot;0592-114514&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">        &quot;_id&quot; : ObjectId(&quot;62baa3dae2bf2e431a87e4bc&quot;),</span><br><span class="line">        &quot;name&quot; : &quot;田所浩二21&quot;,</span><br><span class="line">        &quot;age&quot; : 21,</span><br><span class="line">        &quot;gender&quot; : &quot;男&quot;,</span><br><span class="line">        &quot;phone&quot; : &quot;0592-114514&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">        &quot;_id&quot; : ObjectId(&quot;62baa3dae2bf2e431a87e4bd&quot;),</span><br><span class="line">        &quot;name&quot; : &quot;田所浩二22&quot;,</span><br><span class="line">        &quot;age&quot; : 22,</span><br><span class="line">        &quot;gender&quot; : &quot;男&quot;,</span><br><span class="line">        &quot;phone&quot; : &quot;0592-114514&quot;</span><br><span class="line">&#125;</span><br><span class="line">Type &quot;it&quot; for more</span><br></pre></td></tr></table></figure><h3 id="Limit-与-Skip"><a href="#Limit-与-Skip" class="headerlink" title="Limit 与 Skip"></a>Limit 与 Skip</h3><p><strong>limit()</strong> 方法就是从查询的结果中取出前几条文档，<strong>skip()</strong> 方法就是从查询的结果中跳过几个文档，从第几个文档开始查询。</p><p>使用 limit 查询前 5 条数据。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">db.user_2_0.find(&#123;&#125;).<span class="built_in">limit</span>(5)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">============= Run Results ============= <span class="comment">#</span></span></span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62babe68dc0663b7a70c6daf&quot;), &quot;name&quot; : &quot;德川1&quot;, &quot;age&quot; : 18, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62babe68dc0663b7a70c6db0&quot;), &quot;name&quot; : &quot;德川2&quot;, &quot;age&quot; : 19, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62babe68dc0663b7a70c6db1&quot;), &quot;name&quot; : &quot;德川3&quot;, &quot;age&quot; : 20, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62babe68dc0663b7a70c6db2&quot;), &quot;name&quot; : &quot;德川4&quot;, &quot;age&quot; : 21, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62babe68dc0663b7a70c6db3&quot;), &quot;name&quot; : &quot;德川5&quot;, &quot;age&quot; : 22, &quot;gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br></pre></td></tr></table></figure><p>使用 skip，跳过前两条数据，从第三条数据开始查询。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">db.user_2_0.find(&#123;&#125;).skip(2)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">============= Run Results ============= <span class="comment">#</span></span></span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62babe68dc0663b7a70c6db1&quot;), &quot;name&quot; : &quot;德川3&quot;, &quot;age&quot; : 20, &quot;g</span><br><span class="line">ender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62babe68dc0663b7a70c6db2&quot;), &quot;name&quot; : &quot;德川4&quot;, &quot;age&quot; : 21, &quot;g</span><br><span class="line">ender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62babe68dc0663b7a70c6db3&quot;), &quot;name&quot; : &quot;德川5&quot;, &quot;age&quot; : 22, &quot;g</span><br><span class="line">ender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62babe68dc0663b7a70c6db4&quot;), &quot;name&quot; : &quot;德川6&quot;, &quot;age&quot; : 23, &quot;g</span><br><span class="line">ender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62babe68dc0663b7a70c6db5&quot;), &quot;name&quot; : &quot;德川7&quot;, &quot;age&quot; : 24, &quot;g</span><br><span class="line">ender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62babe68dc0663b7a70c6db6&quot;), &quot;name&quot; : &quot;德川8&quot;, &quot;age&quot; : 25, &quot;g</span><br><span class="line">ender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62babe68dc0663b7a70c6db7&quot;), &quot;name&quot; : &quot;德川9&quot;, &quot;age&quot; : 26, &quot;g</span><br><span class="line">ender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;62babe68dc0663b7a70c6db8&quot;), &quot;name&quot; : &quot;德川10&quot;, &quot;age&quot; : 27, &quot;</span><br><span class="line">gender&quot; : &quot;男&quot;, &quot;phone&quot; : &quot;0592-114514&quot; &#125;</span><br></pre></td></tr></table></figure><p>limit 和 skip 方法联动可实现分页的功能，每一页有 4 条数据。要显示出 4 条数据 limit 一定是 4，每一页的话，就应该是 4 的倍数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.user_2_0.find(&#123;&#125;).skip(0).limit(4)</span><br><span class="line">db.user_2_0.find(&#123;&#125;).skip(4).limit(4)</span><br><span class="line">db.user_2_0.find(&#123;&#125;).skip(8).limit(4)</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">......</span></span><br><span class="line">db.user_2_0.find(&#123;&#125;).skip(4n).limit(4)</span><br></pre></td></tr></table></figure><h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><p>MongoDB 中聚合（aggregate）主要用于处理数据（诸如统计平均值，求和等），并返回计算后的数据结果。和关系型数据库 MySQL 类似。MySQL 有很多聚合函数，在 MongoDB 中采用的方式是以 <code>$函数名</code> 的形式来表示的。</p><h4 id="利用分组统计个数"><a href="#利用分组统计个数" class="headerlink" title="利用分组统计个数"></a>利用分组统计个数</h4><blockquote><p>在指定使用哪个字段分组时，记得要加上”$“</p></blockquote><p>接下来使用 aggregate 来统计集合中”男“、”女“性别个数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">db.user_2_0.aggregate(</span></span><br><span class="line">&#123;</span><br><span class="line">    # $group 指的是将查询结果进行分组</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">group: &#123;</span></span><br><span class="line">_id: &quot;$gender&quot;, # 使用文档中的哪个字段进行分组</span><br><span class="line">gender_count: &#123;</span><br><span class="line">$sum: NumberInt(1) # 使用 $sum 进行求和</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">============= Run Results ============= <span class="comment">#</span></span></span><br><span class="line">&#123; &quot;_id&quot; : &quot;女&quot;, &quot;gender_count&quot; : 6 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &quot;男&quot;, &quot;gender_count&quot; : 10 &#125;</span><br></pre></td></tr></table></figure><p>为什么统计的时候，要写个 1 在这里？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">gender_count</span>: &#123;</span><br><span class="line">    <span class="attr">$sum</span>: <span class="title class_">NumberInt</span>(<span class="number">1</span>) # 使用 $sum 进行求和</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若写成 0 或者 2 的时候，那么得出的结果是什么样的呢？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">============= <span class="variable">$sum</span>: 2 ============= <span class="comment">#</span></span></span><br><span class="line">&#123; &quot;_id&quot; : &quot;女&quot;, &quot;gender_count&quot; : 12 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &quot;男&quot;, &quot;gender_count&quot; : 20 &#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">============= <span class="variable">$sum</span>: 0 ============= <span class="comment">#</span></span></span><br><span class="line">&#123; &quot;_id&quot; : &quot;女&quot;, &quot;gender_count&quot; : 0 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &quot;男&quot;, &quot;gender_count&quot; : 0 &#125;</span><br></pre></td></tr></table></figure><p>看到上面的结果，就明白了，这个设置 <code>$sum: 1</code> 的意义在于分组之后，性别”男“中有几个 1 ，性别”女“中有几个 1，但是这里出现了 10  个性别为”男“，所以 <code>1 * 10 = 10 </code> 。通过设置  <code>$sum: 1</code> 可以统计个数。设置  <code>$sum: 2</code> 也就不难理解了。</p><p>上面的写法，在 SQL 语句中可以理解成</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> gender, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> user_2_0 <span class="keyword">group</span> <span class="keyword">by</span> gender</span><br></pre></td></tr></table></figure><h4 id="利用分组求平均值、最小值和最大值"><a href="#利用分组求平均值、最小值和最大值" class="headerlink" title="利用分组求平均值、最小值和最大值"></a>利用分组求平均值、最小值和最大值</h4><p>平均值使用 <strong>$avg</strong>，最小值和最大值分别为 <strong>$min</strong> 和 <strong>$max</strong> 。获取男女中的平均年龄、最大值和最小值。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">db.user_2_0.aggregate([</span><br><span class="line">    &#123;</span><br><span class="line">        $group: &#123; # group 里面存着的是分组之后的字段</span><br><span class="line">            _id: &quot;$gender&quot;,</span><br><span class="line">            # 最大年龄</span><br><span class="line">            max_age: &#123;</span><br><span class="line">                $max: &quot;$age&quot; </span><br><span class="line">            &#125;,</span><br><span class="line">            # 最小年龄</span><br><span class="line">            min_age: &#123;</span><br><span class="line">                $min: &quot;$age&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            # 平均年龄</span><br><span class="line">            avg_age: &#123;</span><br><span class="line">                $avg: &quot;$age&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">])</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">============= Run Results ============= <span class="comment">#</span></span></span><br><span class="line">&#123; &quot;_id&quot; : &quot;男&quot;, &quot;max_age&quot; : 27, &quot;min_age&quot; : 18, &quot;avg_age&quot; : 22.5 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &quot;女&quot;, &quot;max_age&quot; : 23, &quot;min_age&quot; : 18, &quot;avg_age&quot; : 20.5 &#125;</span><br></pre></td></tr></table></figure><h4 id="分组结果排序"><a href="#分组结果排序" class="headerlink" title="分组结果排序"></a>分组结果排序</h4><p>若要对分组结果进行排序，不能直接调用 sort 方法，而是需要在聚合方法中加一个 <strong>$sort</strong> 即可，然后去指定分组之后的字段</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">db.user_2_0.aggregate([</span><br><span class="line">    &#123;</span><br><span class="line">        $group: &#123;</span><br><span class="line">            _id: &quot;$gender&quot;,</span><br><span class="line">            max_age: &#123;</span><br><span class="line">                $max: &quot;$age&quot; </span><br><span class="line">            &#125;,</span><br><span class="line">            min_age: &#123;</span><br><span class="line">                $min: &quot;$age&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            avg_age: &#123;</span><br><span class="line">                $avg: &quot;$age&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        $sort: &#123; # 排序</span><br><span class="line">            avg_age: 1 # 指定分组之后的哪个字段进行排序</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">])</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">============= Run Results ============= <span class="comment">#</span></span></span><br><span class="line">&#123; &quot;_id&quot; : &quot;女&quot;, &quot;max_age&quot; : 23, &quot;min_age&quot; : 18, &quot;avg_age&quot; : 20.5 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &quot;男&quot;, &quot;max_age&quot; : 27, &quot;min_age&quot; : 18, &quot;avg_age&quot; : 22.5 &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> 数据库学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之单例设计模式</title>
      <link href="/journal/design-pattern-singleton/"/>
      <url>/journal/design-pattern-singleton/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>单例设计模式的目的就是让对象只创建一次，比如在 JDK 中的 Runtime 类默认的创建方式就是使用单例模式。同时数据库连接池、线程池等等一些重量级的对象只需要创建一次随处使用即可。</p><p>单例设计模式共有 7 种创建的方式。单例的主要特点就是构造方法是私有化的。</p><span id="more"></span><h2 id="第一种：饿汉式（线程安全）"><a href="#第一种：饿汉式（线程安全）" class="headerlink" title="第一种：饿汉式（线程安全）"></a>第一种：饿汉式（线程安全）</h2><p>饿汉式的方式就是类在加载之后，就立即创建一个实例对象。它是线程安全的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">singleton</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Run</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">singleton</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">singleton1</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">        <span class="comment">// 两个对象是否一样</span></span><br><span class="line">        System.out.println(singleton == singleton1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第二种：懒汉式（线程不安全）"><a href="#第二种：懒汉式（线程不安全）" class="headerlink" title="第二种：懒汉式（线程不安全）"></a>第二种：懒汉式（线程不安全）</h2><p>懒汉式的方式就是类在加载之后，只有在调用 getInstance 方法时，它才会创建对象。它在单线程下可以保证单例，但是在多线程就无法保证单例的了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">singleton</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(singleton == <span class="literal">null</span>) &#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Run</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">singleton</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">singleton1</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">        <span class="comment">// 两个对象是否一样</span></span><br><span class="line">        System.out.println(singleton == singleton1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第三种：懒汉式，同步方法（线程安全，低效率）"><a href="#第三种：懒汉式，同步方法（线程安全，低效率）" class="headerlink" title="第三种：懒汉式，同步方法（线程安全，低效率）"></a>第三种：懒汉式，同步方法（线程安全，低效率）</h2><p>解决在多线程下单例的方法，简单粗暴的在 getInstance 方法加一个同步关键字，虽然可以保证线程的安全，但是效率太低了，因为每个线程调用该方法是都需要等待获得锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">singleton</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(singleton == <span class="literal">null</span>) &#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> <span class="title class_">Singleton</span>();s</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Run</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">singleton</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">singleton1</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">        <span class="comment">// 两个对象是否一样</span></span><br><span class="line">        System.out.println(singleton == singleton1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第四种：懒汉式，同步代码块（线程不安全）"><a href="#第四种：懒汉式，同步代码块（线程不安全）" class="headerlink" title="第四种：懒汉式，同步代码块（线程不安全）"></a>第四种：懒汉式，同步代码块（线程不安全）</h2><p>虽然加了同步关键字，但是一开始有多个线程访问该对象，当线程中获得的都是 null 时，则在同步代码块中等待获得锁，当第一个线程执行完 new 时，交给第二个，第二个再次 new 时，第一个线程获得的对象就和第二个线程获得的对象就不一样了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">singleton</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(singleton == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                singleton = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Run</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">singleton</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">singleton1</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">        <span class="comment">// 两个对象是否一样</span></span><br><span class="line">        System.out.println(singleton == singleton1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第五种：懒汉式，同步代码块（线程安全，效率较高）"><a href="#第五种：懒汉式，同步代码块（线程安全，效率较高）" class="headerlink" title="第五种：懒汉式，同步代码块（线程安全，效率较高）"></a>第五种：懒汉式，同步代码块（线程安全，效率较高）</h2><p>使用双重校验就可以解决，只需要在同步代码块中再次判断对象是否已经创建即可。同时为了保证可见性，在共享的变量加一个 volatile 即可。</p><blockquote><p>可见性是值一个线程对共享变量的修改，对于另一个线程来说是否是可以看到的。</p><p>为什么会出现这种问题呢？</p><p>我们知道，Java 线程通信是通过共享内存的方式进行通信的，但是为了加快执行的速度，线程一般是不会直接操作内存的，而是操作缓存。</p><p>实际上，线程操作的是自己的工作内存，而不会直接操作主内存。如果线程对变量的操作没有刷写会主内存的话，仅仅改变了自己的工作内存的变量的副本，那么对于其他线程来说是不可见的。而如果另一个变量没有读取主内存中的新的值，而是使用旧的值的话，同样的也可以列为不可见。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">Singleton</span> <span class="variable">singleton</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(singleton == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span>(singleton == <span class="literal">null</span>) &#123;</span><br><span class="line">                    singleton = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Run</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">singleton</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">singleton1</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">        <span class="comment">// 两个对象是否一样</span></span><br><span class="line">        System.out.println(singleton == singleton1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第六种：静态内部类（线程安全）"><a href="#第六种：静态内部类（线程安全）" class="headerlink" title="第六种：静态内部类（线程安全）"></a>第六种：静态内部类（线程安全）</h2><p>使用静态内部类创建单例对象也是一种不错的方式，静态的内部类不会随着外部类的加载而加载，由于类在加载的时候就是线程安全的，所以这里用的是类加载的方式来创建的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonInstance.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonInstance</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Run</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">singleton</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">singleton1</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">        <span class="comment">// 两个对象是否一样</span></span><br><span class="line">        System.out.println(singleton == singleton1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第七种：枚举（线程安全）"><a href="#第七种：枚举（线程安全）" class="headerlink" title="第七种：枚举（线程安全）"></a>第七种：枚举（线程安全）</h2><p>使用枚举的方式也可以创建单例对象，当被反序列化的时候，第六种就无法保证对象是单例的了。Effective Java 作者推荐使用枚举的方式解决单例模式，但是感觉方式可能是平时最少用到的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ok</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> Singleton.INSTANCE;</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance1</span> <span class="operator">=</span> Singleton.INSTANCE;</span><br><span class="line">        System.out.println(instance == instance1);</span><br><span class="line">        instance.ok();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 23 种设计模式 </category>
          
          <category> 创建型设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式的 6 大原则</title>
      <link href="/journal/design-pattern-tutoral/"/>
      <url>/journal/design-pattern-tutoral/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>编写软件过程中，程序员面临着来自耦合性，内聚性以及可维护性，可扩展性，重用性，灵活性等多方面的挑战，设计模式是为了让程序(软件)，具有更好的代码重用性、可读性、可扩展性、可靠性，使程序呈现高内聚，低耦合的特性。</p><ol><li>代码重用性（相同功能的代码，不用多次编写）</li><li>可读性（编程规范性，便于理解）</li><li>可扩展性（需要增加新功能，非常的方便）</li><li>可靠性（增加新的功能后，对原有的功能不影响）</li><li>高内聚（模块内部非常紧密）、低耦合（功能之间依赖性低）</li></ol><blockquote><p>设计模式包含了面向对象的精髓，“懂了设计模式，你就懂了面向对象分析和设计(OOA/D）的精要”</p></blockquote><span id="more"></span><p>设计模式原则，其实就是程序员在编程时，应当遵守的原则，也是各种设计模式的基础（即:设计模式为什么这样设计的依据）。</p><p>设计模式常见的六大原则有:</p><ol><li>单一职责原则</li><li>接口隔离原则</li><li>依赖倒转（倒置）原则</li><li>里氏替换原则</li><li>开闭原则</li><li>迪米特法则</li></ol><h2 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h2><blockquote><p>约定大于编码，所有的设计模式都需要遵循这 7 种原则。 </p></blockquote><p>对类来说的，即一个类应该只负责一项职责。如类 A 负责两个不同职责：职责1，职责2。当职责 1 需求变更而改变 A 时，可能造成职责 2 执行错误，所以需要将类A的粒度分解为 A1，A2。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>交通工具案例。</p><h4 id="方式-1"><a href="#方式-1" class="headerlink" title="方式 1"></a>方式 1</h4><p>所有的交通工具在一个方法上面跑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String vehicle)</span>&#123;</span><br><span class="line">System.out.println(vehicle + <span class="string">&quot;在公路上跑....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">Vehicle</span> <span class="variable">vehicle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vehicle</span>();</span><br><span class="line">       vehicle.run(<span class="string">&quot;汽车&quot;</span>);</span><br><span class="line">        vehicle.run(<span class="string">&quot;飞机&quot;</span>);</span><br><span class="line">        vehicle.run(<span class="string">&quot;游艇&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">汽车在公路上跑....</span><br><span class="line">飞机在公路上跑....</span><br><span class="line">游艇在公路上跑....</span><br></pre></td></tr></table></figure><p>有没有发现一个问题，飞机和游艇都在公路上跑，游艇在公路上跑。发现有问题了，那就改改代码吧。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String vehicle)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;汽车&quot;</span>.equals(vehicle)) &#123;</span><br><span class="line">System.out.println(vehicle + <span class="string">&quot;在公路上跑....&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;飞机&quot;</span>.equals(vehicle)) &#123;</span><br><span class="line">System.out.println(vehicle + <span class="string">&quot;在天空飞....&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;游艇&quot;</span>.equals(vehicle)) &#123;</span><br><span class="line">System.out.println(vehicle + <span class="string">&quot;在水中划....&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">Vehicle</span> <span class="variable">vehicle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vehicle</span>();</span><br><span class="line">       vehicle.run(<span class="string">&quot;汽车&quot;</span>);</span><br><span class="line">        vehicle.run(<span class="string">&quot;飞机&quot;</span>);</span><br><span class="line">        vehicle.run(<span class="string">&quot;游艇&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">汽车在公路上跑....</span><br><span class="line">飞机在在天空飞....</span><br><span class="line">游艇在水中划....</span><br></pre></td></tr></table></figure><p>现在似乎没什么问题了，但是这违反了单一职责原则，而且代码的重用性、可读性、可扩展性、可靠性都比较差。解决的方法根据交通工具运行方法不同，分解成不同类即可。</p><h4 id="方式-2"><a href="#方式-2" class="headerlink" title="方式 2"></a>方式 2</h4><p>分解成三种交通工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RoadVehicle</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String vehicle)</span>&#123;</span><br><span class="line">System.out.println(vehiclc + <span class="string">&quot;在公路上跑....&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AirVehicle</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String vchiclc)</span>&#123;</span><br><span class="line">Systcm.out.println(vchicle + <span class="string">&quot;在天空上飞...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">                           </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WatcrVchiclc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String vehicle)</span>&#123;</span><br><span class="line">        System.out.println(vehicle + <span class="string">&quot;在水中划....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">RoadVehicle</span> <span class="variable">roadVehicle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RoadVehicle</span>();</span><br><span class="line">       roadVehicle.run(<span class="string">&quot;汽车&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">AirVehicle</span> <span class="variable">airVehicle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AirVehicle</span>();</span><br><span class="line">        airVehicle.run(<span class="string">&quot;飞机&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">WaterVehicle</span> <span class="variable">waterVehicle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WaterVehicle</span>();</span><br><span class="line">        waterVehicle.run(<span class="string">&quot;游艇&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遵守类级别的单一职责原则。</p><p>类级别的单一职责原则是最好的，也是最彻底的。但是在本案例中代码简单，方法就只有一个，若要对类这个级别中遵守单一职责，改动较大，可以降为方法级别的单一职责，参见方案 3。</p><h4 id="方式-3"><a href="#方式-3" class="headerlink" title="方式 3"></a>方式 3</h4><p>一个类中分别有三种交通工具不同运作的方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String vehicle)</span> &#123;</span><br><span class="line">System.out.println(vehicle + <span class="string">&quot;在公路上跑....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">runAir</span><span class="params">(String vchiclc)</span>&#123;</span><br><span class="line">        Systcm.out.println(vehiclc + <span class="string">&quot;在天空上飞...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">runWater</span><span class="params">(String vehicle)</span> &#123;</span><br><span class="line">    System.out.printIn(vehicle + <span class="string">&quot;在水中划....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">Vehicle</span> <span class="variable">vehicle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vehicle</span>();</span><br><span class="line">       vehicle.run(<span class="string">&quot;汽车&quot;</span>);</span><br><span class="line">        vehicle.runAir(<span class="string">&quot;飞机&quot;</span>);</span><br><span class="line">        vehicle.runWatetr(<span class="string">&quot;游艇&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遵守方法级别的单一职责原则。</p><p>这种修改方法没有对原来的类做大的修改，只是增加方法。这里虽然没有在类这个级别上遵守单一职责原则，但是在方法级别上，仍然是遵守单一职责。</p><blockquote><p>注意：方法级别的单一职责只是类中的模块或者功能较少的时候可以这么做，否则直接建议使用类级别的单一职责原则。</p></blockquote><h2 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h2><p>客户端不应该依赖它不需要的接口，即<strong>一个类对另一个类的依赖应孩建立在最小的接口</strong>上。最小接口，其实就是将接口中用不到的方法，将大的接口（抽象方法多的）拆分成小的接口（抽象方法少的）。若要实现某个方法，只需要实现即可。</p><p>请看此类图的关系。</p><p><img src="/journal/design-pattern-tutoral/image-20220402144032636.png" alt="image-20220402144032636" loading="lazy"></p><p>对应的代码如下所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Segregation1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        a.depend1(<span class="keyword">new</span> <span class="title class_">B</span>());</span><br><span class="line">        a.depend2(<span class="keyword">new</span> <span class="title class_">B</span>());</span><br><span class="line">        a.depend3(<span class="keyword">new</span> <span class="title class_">B</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">C</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">C</span>();</span><br><span class="line">        c.depend1(<span class="keyword">new</span> <span class="title class_">D</span>());</span><br><span class="line">        c.depend4(<span class="keyword">new</span> <span class="title class_">D</span>());</span><br><span class="line">        c.depend5(<span class="keyword">new</span> <span class="title class_">D</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Interface1</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">operation1</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">operation2</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">operation3</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">operation4</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">operation5</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * B 实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">implements</span> <span class="title class_">Interface1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B 实现 operation1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B 实现 operation2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation3</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B 实现 operation3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation4</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B 实现 operation4&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation5</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B 实现 operation5&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * D 实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span> <span class="keyword">implements</span> <span class="title class_">Interface1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;D 实现 operation1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;D 实现 operation2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation3</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;D 实现 operation3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation4</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;D 实现 operation4&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation5</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;D 实现 operation5&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类 A 中，只依赖了接口的 operation1()、operation2()、operation3() 方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend1</span><span class="params">(Interface1 i)</span> &#123;</span><br><span class="line">        i.operation1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend2</span><span class="params">(Interface1 i)</span> &#123;</span><br><span class="line">        i.operation2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend3</span><span class="params">(Interface1 i)</span> &#123;</span><br><span class="line">        i.operation3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类 C 中，只依赖了接口的 operation1()、operation4()、operation5() 方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend1</span><span class="params">(Interface1 i)</span> &#123;</span><br><span class="line">        i.operation1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend4</span><span class="params">(Interface1 i)</span> &#123;</span><br><span class="line">        i.operation4();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend5</span><span class="params">(Interface1 i)</span> &#123;</span><br><span class="line">        i.operation5();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A 只依赖了接口的 operation1()、operation2()、operation3() 方法，operation4()、operation5() 方法没有使用到，C 只依赖了接口的 operation1()、operation4()、operation5() 方法，operation2()、operation3() 方法没有使用到。没有使用的方法显得多余，所以就违背了接口隔离的原则。</p><p>此时我们需要对接口进行拆分，拆分之后的代码如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bestguo.segregation.after;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Segregation1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        a.depend1(<span class="keyword">new</span> <span class="title class_">B</span>());</span><br><span class="line">        a.depend2(<span class="keyword">new</span> <span class="title class_">B</span>());</span><br><span class="line">        a.depend3(<span class="keyword">new</span> <span class="title class_">B</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">C</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">C</span>();</span><br><span class="line">        c.depend1(<span class="keyword">new</span> <span class="title class_">D</span>());</span><br><span class="line">        c.depend4(<span class="keyword">new</span> <span class="title class_">D</span>());</span><br><span class="line">        c.depend5(<span class="keyword">new</span> <span class="title class_">D</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Interface1</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">operation1</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Interface2</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">operation2</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">operation3</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Interface3</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">operation4</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">operation5</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * B 实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">implements</span> <span class="title class_">Interface1</span>, Interface2 &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B 实现 operation1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B 实现 operation2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation3</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B 实现 operation3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * D 实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span> <span class="keyword">implements</span> <span class="title class_">Interface1</span>, Interface3 &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;D 实现 operation1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation4</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;D 实现 operation4&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation5</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;D 实现 operation5&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类 A 中，只依赖了接口的 operation1()、operation2()、operation3() 方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend1</span><span class="params">(Interface1 i)</span> &#123;</span><br><span class="line">        i.operation1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend2</span><span class="params">(Interface2 i)</span> &#123;</span><br><span class="line">        i.operation2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend3</span><span class="params">(Interface2 i)</span> &#123;</span><br><span class="line">        i.operation3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类 C 中，只依赖了接口的 operation1()、operation4()、operation5() 方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend1</span><span class="params">(Interface1 i)</span> &#123;</span><br><span class="line">        i.operation1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend4</span><span class="params">(Interface3 i)</span> &#123;</span><br><span class="line">        i.operation4();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend5</span><span class="params">(Interface3 i)</span> &#123;</span><br><span class="line">        i.operation5();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后对应的类图如下所示，这样一来就对接口进行了分离，该用到的方法都用到了。也不会显得特别的多余了。</p><p><img src="/journal/design-pattern-tutoral/image-20220402144907003.png" alt="image-20220402144907003" loading="lazy"></p><h2 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h2><ol><li>高层模块不应该依赖低层模块，二者都应该依赖其抽象。</li><li>抽象不应该依赖细节，细节应该依赖抽象。</li><li>依赖倒置的中心思想是面向接口编程。</li><li>依赖倒转原则是基于这样的设计理念：相对于细节的多变性，抽象的东西要稳定的多。以抽象为基础搭建的架构比以细节为基础的架构要稳定的多。在 Java 中，抽象指的是接口或抽象类,细节就是具体的实现类。</li><li>使用接口或抽象类的目的是制定好规范，而不涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成。</li></ol><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><p>完成 Person 接收消息的功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inversion1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.getMessage(<span class="keyword">new</span> <span class="title class_">Email</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Email</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;接收到消息：hello email!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMessage</span><span class="params">(Email email)</span> &#123;</span><br><span class="line">        System.out.println(email.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>功能虽然实现了，但是如果我们获取的对象是微信，短信等等，则新增类，同时 Person 也要增加相应的接收方法。</p><p>解决思路：引入一个抽象的接口 IReceiver，表示接收者，这样Person类与接口 IReceiver 发生因为Email，WeiXin 等等属于接收的范围，他们各自实观 IReceiver 接口就ok，这样我们就符合依赖倒转原则。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inversion2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.getMessage(<span class="keyword">new</span> <span class="title class_">Email</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IReceiver</span> &#123;</span><br><span class="line">    String <span class="title function_">getInfo</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Email</span> <span class="keyword">implements</span> <span class="title class_">IReceiver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;接收到消息：hello email!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMessage</span><span class="params">(IReceiver receiver)</span> &#123;</span><br><span class="line">        System.out.println(receiver.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们加一个微信的消息会怎么样？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WeiXin</span> <span class="keyword">implements</span> <span class="title class_">IReceiver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;接收到微信消息：hello wechat!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inversion2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.getMessage(<span class="keyword">new</span> <span class="title class_">Email</span>());</span><br><span class="line">        person.getMessage(<span class="keyword">new</span> <span class="title class_">WeiXin</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Person 类中不需要任何的改动，就实现了接收微信的消息，仅需实现该接口，在主方法中调用该类即可。</p><h3 id="依赖倒转的其它三种形式"><a href="#依赖倒转的其它三种形式" class="headerlink" title="依赖倒转的其它三种形式"></a>依赖倒转的其它三种形式</h3><h4 id="通过接口的方式实现"><a href="#通过接口的方式实现" class="headerlink" title="通过接口的方式实现"></a>通过接口的方式实现</h4><p>ITV 是电视的接口类，IOpenAndClose 是遥控器的接口类。实现遥控器的接口，再通过依赖的形式操作电视。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IOpenAndClose</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">(iTv tv)</span>; <span class="comment">//抽象方法,接收接口</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ITV</span> &#123; <span class="comment">// ITV接口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OpenAndClose</span> <span class="keyword">implements</span> <span class="title class_">IOpenAndClose</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">(ITV tv)</span>&#123;</span><br><span class="line">tv.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通过构造方法"><a href="#通过构造方法" class="headerlink" title="通过构造方法"></a>通过构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OpenAndClose</span> <span class="keyword">implements</span> <span class="title class_">IOpenAndClose</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> ITV itv;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OpenAndClose</span><span class="params">(ITV itv)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.itv = itv;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">(ITV tv)</span>&#123;</span><br><span class="line">tv.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通过-setter-方法"><a href="#通过-setter-方法" class="headerlink" title="通过 setter 方法"></a>通过 setter 方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OpenAndClose</span> <span class="keyword">implements</span> <span class="title class_">IOpenAndClose</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> ITV itv;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setItv</span><span class="params">(ITV itv)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.itv = itv;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">(ITV tv)</span>&#123;</span><br><span class="line">tv.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>低层模块尽量都要有抽象类或接口，或者两者都有，程序稳定性更好。</li><li>变量的声明类型尽量是抽象类或接口，这样我们的变量引用和实际对象间，就存在一个缓冲层,利于程序扩展和优化。</li><li>继承时遵循里氏替换原则。</li></ol><h2 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h2><blockquote><p>继承包含这样一层含义：父类中凡是已经实现好的方法，实际上是在设定<strong>规范和契约</strong>，虽然它不强制要求所有的子类必须遵循这些契约，但是如果子类对这些已经实现的方法任意修改，就会对整个继承体系造成破坏。</p><p>继承在给程序设计带来便利的同时，也带来了弊端。比如使用继承会给程序带来侵入性，程序的可移植性降低，增加对象间的耦合性，如果一个类被其他的类所继承,则当这个类需要修改时，必须考虑到所有的子类，并且父类修改后，所有涉及到子类的功能都有可能产生故障。</p></blockquote><ol><li>里氏替换原则（Liskov Substitution Principle）在1988年，由麻省理工学院的以为姓里的女士提出的。</li><li>如果对每个类型为 T1 的对象 o1，都有类型为 T2 的对象o2，使得以 T1 定义的所有程序 P 在所有的对象 o1 都代换成 o2 时，程序 P 的行为没有发生变化，那么类型 T2 是类型 T1 的子类型。换句话说，所有引用基类的地方必须能透明地使用其子类的对象。</li><li>在使用继承时，遵循里氏替换原则，在子类中改变父类的原有功能时，<strong>最好</strong>不要重写父类的方法。</li><li>里氏替换原则告诉我们，继承实际上让两个类耦合性增强了，<strong>在适当的情况下，可以通过聚合，组合,依赖来解决问题</strong>。</li></ol><h3 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func1</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num1 - num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func1</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func2</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> func1(a, b) + <span class="number">9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;11-3=&quot;</span>+a.func1(<span class="number">11</span>,<span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;1-8=&quot;</span> +a.func1(<span class="number">1</span>, <span class="number">8</span>));</span><br><span class="line">        System.out.println( <span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;11-3=&quot;</span> + b.func1(<span class="number">11</span>,<span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;1-8=&quot;</span> + b.func1(<span class="number">1</span>, <span class="number">8</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;11+3+9=&quot;</span> + b.func2(<span class="number">11</span>, <span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们发现原来运行正常的相减功能发生了错误。原因就是类 B 无意中重写了父类的方法，造成原有功能出现错误。在实际编程中，我们常常会通过重写父类的方法完成新的功能，这样写起来虽然简单，但整个继承体系的复用性会比较差。特别是运行多态比较频繁的时候。</p><p>通用的做法是：原来的父类和子类都继承一个更通俗的基类，原有的继承关系去掉，采用依赖，聚合，组合等关系代替。</p><h3 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要有一个更加基础的类（抽象类，接口类也可以）</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func1</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">implements</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func1</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num1 - num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">implements</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果需要使用 A 方法，则使用组合关系。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func1</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func2</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> func1(a, b) + <span class="number">9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func3</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.a.func1(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;11-3=&quot;</span>+a.func1(<span class="number">11</span>,<span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;1-8=&quot;</span> +a.func1(<span class="number">1</span>, <span class="number">8</span>));</span><br><span class="line">        System.out.println( <span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        <span class="comment">// B 类不再继承自 A 类，所以调用者不会在认为func1是减法的操作了。在调用完成的功能会很明确。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;11+3=&quot;</span> + b.func1(<span class="number">11</span>,<span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;1-8=&quot;</span> + b.func1(<span class="number">1</span>, <span class="number">8</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;11+3+9=&quot;</span> + b.func2(<span class="number">11</span>, <span class="number">3</span>));</span><br><span class="line">        <span class="comment">// 使用组合方法可以使用到 A 类的相关方法。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;11-3=&quot;</span> + b.func3(<span class="number">11</span>,<span class="number">3</span>)); <span class="comment">// 11-3=8</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h2><ol><li>开闭原则（Open Closed Principle）是编程中最基础、最重要的设计原则。</li><li>一个软件实体如类，模块和函数应该对扩展开放（对提供方），对修改关闭（对使用方）。用抽象构建框架，用实现扩展细节。</li><li>当软件需要变化时，尽量<strong>通过扩展</strong>软件实体的行为来实现变化，而不是通过修改已有的代码来实现变化。</li><li>编程中遵循其它原则，以及使用设计模式的目的就是遵循开闭原则。</li></ol><h3 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用方</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GraphicEditor</span> &#123;</span><br><span class="line">    <span class="comment">// 接牧Shape对象,然后根据type，来绘制不同的图形</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawShape</span><span class="params">(Shape s)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.m_type == <span class="number">1</span>)</span><br><span class="line">            drawRectangle(s);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s.m_type == <span class="number">2</span>)</span><br><span class="line">            drawCircle(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawRectangle</span><span class="params">(Shape r)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;绘制矩形&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawCircle</span><span class="params">(Shape r)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;绘制圆形&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="type">int</span> m_type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    Rectangle() &#123;</span><br><span class="line">        <span class="built_in">super</span>.m_type = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    Circle() &#123;</span><br><span class="line">        <span class="built_in">super</span>.m_type = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">GraphicEditor</span> <span class="variable">graphicEditor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GraphicEditor</span>();</span><br><span class="line">        graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Rectangle</span>());</span><br><span class="line">        graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Circle</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果此时再添加一个三角形的类，创建一个三角形的类是有必要的，同时再使用方也要添加判断和方法。这就不符合开闭原则了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Triangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    Triangle() &#123;</span><br><span class="line">        <span class="built_in">super</span>.m_type = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用方</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GraphicEditor</span> &#123;</span><br><span class="line">    <span class="comment">// 接牧Shape对象,然后根据type，来绘制不同的图形</span></span><br><span class="line">    <span class="comment">// 这里修改了</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawShape</span><span class="params">(Shape s)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.m_type == <span class="number">1</span>)</span><br><span class="line">            drawRectangle(s);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s.m_type == <span class="number">2</span>)</span><br><span class="line">            drawCircle(s);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s.m_type == <span class="number">3</span>)</span><br><span class="line">            drawTriangle(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"><span class="comment">// 这里添加了新方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawTriangle</span><span class="params">(Shape r)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;绘制三角形&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="改进-1"><a href="#改进-1" class="headerlink" title="改进"></a>改进</h3><p>改进办法就是给 Shape 类变成抽象来并提供 draw 这个抽象方法，让继承该抽象类的实现类实现该方法。使用方只需要调用 Shape 中提供的 draw 方法即可完成绘制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="type">int</span> m_type;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    Circle() &#123;</span><br><span class="line">        <span class="built_in">super</span>.m_type = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;绘制圆形&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    Rectangle() &#123;</span><br><span class="line">        <span class="built_in">super</span>.m_type = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;绘制矩形&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GraphicEditor</span> &#123;</span><br><span class="line">    <span class="comment">// 接牧Shape对象,然后根据type，来绘制不同的图形</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawShape</span><span class="params">(Shape s)</span> &#123;</span><br><span class="line">        s.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">GraphicEditor</span> <span class="variable">graphicEditor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GraphicEditor</span>();</span><br><span class="line">        graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Rectangle</span>());</span><br><span class="line">        graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Circle</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h2><ol><li>一个对象应该对其他对象保持最少的了解。</li><li>类与类关系越密切，耦合度越大。</li><li>迪米特法则(Demeter Principle)又叫最少知道原则，即一个类对自己依赖的类知道的越少越好。也就是说，对于被依赖的类不管多么复杂，都尽量将逻辑封装在类的内部。对外除了提供的public方法，不对外泄露任何信息。</li><li>迪米特法则还有个更简单的定义：只与直接的朋友通信。</li><li>直接的朋友：每个对象都会与其他对象由耦合关系，只要两个对象之间有耦合关系，我们就说这两个对象之间是朋友关系。耦合的方式很多，依赖，关联，组合，聚合等。其中，我们称出现成员变量，方法参数，方法返回值中的类为直接的朋友，而出现在局部变量中的类不是直接的朋友。也就是说，陌生的类最好不要以局部变量的形式出现在类的内部。</li></ol><h3 id="例子-4"><a href="#例子-4" class="headerlink" title="例子"></a>例子</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CollegeEmployee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 学院员工类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CollegeManager</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;CollegeEmployee&gt; <span class="title function_">getAllEmployee</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;CollegeEmployee&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;CollegeEmployee&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="type">CollegeEmployee</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CollegeEmployee</span>();</span><br><span class="line">            emp.setId(<span class="string">&quot;学院员工id= &quot;</span> +i);</span><br><span class="line">            list.add(emp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 学校管理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SchoolManager</span> &#123;</span><br><span class="line">    <span class="comment">//返回学校总部的员工</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Employee&gt; <span class="title function_">getAllEmployee</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Employee&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Employee&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();emp.setId(<span class="string">&quot;学校总部员工id=&quot;</span> +i);</span><br><span class="line">            list.add(emp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">printAllEmployee</span><span class="params">(CollegeManager sub)</span> &#123;</span><br><span class="line">        List&lt;CollegeEmployee&gt; list1 = sub.getAllEmployee();</span><br><span class="line">        System.out.println(<span class="string">&quot;------------学院员工------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (CollegeEmployee e : list1) &#123;</span><br><span class="line">            System.out.println(e.getId());</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Employee&gt; list2 = <span class="built_in">this</span>.getAllEmployee();</span><br><span class="line">        System.out.println(<span class="string">&quot;------------学校总部员工----&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Employee e : list2) &#123;</span><br><span class="line">            System.out.println(e.getId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SchoolManager</span> <span class="variable">schoolManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SchoolManager</span>();</span><br><span class="line">        schoolManager.printAllEmployee(<span class="keyword">new</span> <span class="title class_">CollegeManager</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析 SchoolManager 类的直接朋友类有哪些？其中 Employee、CollegeManager 是直接朋友关系。但是CollegeEmployee 类不是直接朋友关系，因为在成员变量，参数，方法返回值没有出现，而在局部变量中突然出现。它就是一个陌生类，这违背了迪米特法则。</p><h3 id="改进-2"><a href="#改进-2" class="headerlink" title="改进"></a>改进</h3><p>将输出学院的员工方法，封装到 CollegeManager。也就是员工管理相关的类不要出现在别的类里面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CollegeEmployee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 学院员工类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CollegeManager</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;CollegeEmployee&gt; <span class="title function_">getAllEmployee</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;CollegeEmployee&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;CollegeEmployee&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="type">CollegeEmployee</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CollegeEmployee</span>();</span><br><span class="line">            emp.setId(<span class="string">&quot;学院员工id= &quot;</span> +i);</span><br><span class="line">            list.add(emp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 学校管理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SchoolManager</span> &#123;</span><br><span class="line">    <span class="comment">//返回学校总部的员工</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Employee&gt; <span class="title function_">getAllEmployee</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Employee&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Employee&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();emp.setId(<span class="string">&quot;学校总部员工id=&quot;</span> +i);</span><br><span class="line">            list.add(emp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">printAllEmployee</span><span class="params">(CollegeManager sub)</span> &#123;</span><br><span class="line">        List&lt;CollegeEmployee&gt; list1 = sub.getAllEmployee();</span><br><span class="line">        System.out.println(<span class="string">&quot;------------学院员工------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (CollegeEmployee e : list1) &#123;</span><br><span class="line">            System.out.println(e.getId());</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Employee&gt; list2 = <span class="built_in">this</span>.getAllEmployee();</span><br><span class="line">        System.out.println(<span class="string">&quot;------------学校总部员工----&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Employee e : list2) &#123;</span><br><span class="line">            System.out.println(e.getId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SchoolManager</span> <span class="variable">schoolManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SchoolManager</span>();</span><br><span class="line">        schoolManager.printAllEmployee(<span class="keyword">new</span> <span class="title class_">CollegeManager</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>迪米特法则的核心是降低类之间的耦合。</p><p>但是注意：由于每个类都减少了不必要的依赖，因此迪米特法则只是要求降低类间（对象间）耦合关系，并不是要求完全没有依赖关系。</p>]]></content>
      
      
      <categories>
          
          <category> 23 种设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shiro 权限数据持久化</title>
      <link href="/journal/shiro-permission-data-persistence/"/>
      <url>/journal/shiro-permission-data-persistence/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>上篇日志简单的使用了角色授予和权限授予，接下来，将通过数据库来管理用户对应的权限与角色。</p><h2 id="权限表结构设计方式"><a href="#权限表结构设计方式" class="headerlink" title="权限表结构设计方式"></a>权限表结构设计方式</h2><p>第一种权限设计模型，权限和角色都考虑。数据库设计中，用户与角色是多对多的关系，角色与权限也是多对多的关系，而权限与资源是一对一的关系。它们的关系如下图所示。</p><span id="more"></span><pre class="mermaid">graph LR用户--关联-->角色--关联-->权限--关联-->资源</pre><p>第二种权限设计模型，不考虑权限。用户与角色直接对应，是一种多对多的关系，通过不同的角色来对资源进行不同的限制这也是可以的，他们的关系如下所示。</p><pre class="mermaid">graph LR用户--关联-->角色</pre><p>第三种模式权限设计模型，不考虑角色。用户与权限直接对应，也是一种多对多的关系。</p><pre class="mermaid">graph LR用户--关联-->权限</pre><p>当然，或许还有更多的权限表结构方式。</p><p>接下来，咱们就使用第一种的方式来体验一把角色授予和权限授予吧。</p><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><p>首先是角色表，角色表的 DDL 如下所示。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_role</span><br><span class="line">(</span><br><span class="line">    id   <span class="type">int</span> auto_increment    <span class="keyword">primary</span> key,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">null</span> comment <span class="string">&#x27;权限标识&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>用户表与角色表的关联</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_user_role</span><br><span class="line">(</span><br><span class="line">    id     <span class="type">int</span> auto_increment     <span class="keyword">primary</span> key,</span><br><span class="line">    userId <span class="type">int</span> <span class="keyword">null</span> comment <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">    roleId <span class="type">int</span> <span class="keyword">null</span> comment <span class="string">&#x27;角色id&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>权限表的 DDL 如下所示</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_pers</span><br><span class="line">(</span><br><span class="line">    id   <span class="type">int</span> auto_increment    <span class="keyword">primary</span> key,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">null</span>,</span><br><span class="line">    url  <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">null</span> comment <span class="string">&#x27;请求路径&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>权限表与角色表的关联</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_role_perms</span><br><span class="line">(</span><br><span class="line">    id      <span class="type">int</span> auto_increment   <span class="keyword">primary</span> key,</span><br><span class="line">    roleId  <span class="type">int</span> <span class="keyword">null</span>,</span><br><span class="line">    permsId <span class="type">int</span> <span class="keyword">null</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="表数据"><a href="#表数据" class="headerlink" title="表数据"></a>表数据</h2><p>角色表 SQL 数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> shiro.t_role (id, name)</span><br><span class="line"><span class="keyword">values</span>  (<span class="number">1</span>, <span class="string">&#x27;admin&#x27;</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">&#x27;user&#x27;</span>),</span><br><span class="line">        (<span class="number">3</span>, <span class="string">&#x27;product&#x27;</span>);</span><br></pre></td></tr></table></figure><p>用户——角色表 SQL 关联数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> shiro.t_user_role (id, userId, roleId)</span><br><span class="line"><span class="keyword">values</span>  (<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>),</span><br><span class="line">        (<span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>权限表 SQL 数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> shiro.t_user_role (id, userId, roleId)</span><br><span class="line"><span class="keyword">values</span>  (<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>),</span><br><span class="line">        (<span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>权限——角色表 SQL 关联数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> shiro.t_role_perms (id, roleId, permsId)</span><br><span class="line"><span class="keyword">values</span>  (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>),</span><br><span class="line">        (<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>),</span><br><span class="line">        (<span class="number">4</span>, <span class="number">3</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><h2 id="权限和角色授予"><a href="#权限和角色授予" class="headerlink" title="权限和角色授予"></a>权限和角色授予</h2><p>给用户授予对应的权限和角色，对应 SQL 如下。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    t_user.id <span class="keyword">AS</span> uid,</span><br><span class="line">    t_user.username,</span><br><span class="line">    t_role.id <span class="keyword">AS</span> rid,</span><br><span class="line">    t_role.`name` <span class="keyword">AS</span> `rolename`</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    t_user,</span><br><span class="line">    t_role,</span><br><span class="line">    t_user_role</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    t_user.id <span class="operator">=</span> t_user_role.userId</span><br><span class="line">  <span class="keyword">AND</span> t_user_role.roleId <span class="operator">=</span> t_role.id</span><br><span class="line">  <span class="keyword">AND</span> t_user.username <span class="operator">=</span> #&#123;username&#125;</span><br></pre></td></tr></table></figure><p>查询该角色对应的权限。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    t_pers.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    t_role_perms,</span><br><span class="line">    t_pers</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    t_role_perms.roleId <span class="operator">=</span> #&#123;roleId&#125;</span><br><span class="line">  <span class="keyword">AND</span> t_role_perms.permsId <span class="operator">=</span> t_pers.id</span><br></pre></td></tr></table></figure><p>查询出来之后，在自定义的 Realm 中，利用 for 循环或者 foreach 方法来授予用户的角色。然后通过每一层循环来给当前的角色授予权限。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.findRolesByUsername(username);</span><br><span class="line"><span class="type">SimpleAuthorizationInfo</span> <span class="variable">authorizationInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthorizationInfo</span>();</span><br><span class="line"><span class="keyword">if</span>(user != <span class="literal">null</span> &amp;&amp; !CollectionUtils.isEmpty(user.getRoles())) &#123;</span><br><span class="line">    <span class="comment">// 角色授予</span></span><br><span class="line">    user.getRoles().forEach(role -&gt; &#123;</span><br><span class="line">        authorizationInfo.addRole(role.getName());</span><br><span class="line">        <span class="comment">// 权限授予</span></span><br><span class="line">        List&lt;Pers&gt; perms = userService.findPermsByRoleId(role.getId());</span><br><span class="line">        perms.forEach(pers -&gt; &#123;</span><br><span class="line">            System.out.println(pers);</span><br><span class="line">            authorizationInfo.addStringPermission(pers.getName());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> authorizationInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一来，权限的授予就保存在数据库中了。当用户访问不同的页面时，就可以控制哪些资源不能访问，哪些资源允许访问。</p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> 权限框架学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shiro 与 SpringBoot 整合</title>
      <link href="/journal/shiro-spring/"/>
      <url>/journal/shiro-spring/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>前篇日志了解到 Shiro 是什么，Shiro 可以做什么，以及 Shiro 结合 ini 文件来做一个简单的权限管理的示例。</p><p>接下来，就是将 Shiro 与 SpringBoot 进行整合，然后结合数据库对用户进行身份认证。</p><h2 id="整合的基本思路"><a href="#整合的基本思路" class="headerlink" title="整合的基本思路"></a>整合的基本思路</h2><p>在未整合 SpringBoot 之前，所有的数据都是在文件中，所以要读取 ini 配置文件，我们一般的步骤如下图所示。</p><span id="more"></span><pre class="mermaid">graphA(创建 IniSecurityManagerFactory 对象) --> B(获取 SecurityManager 实例对象)B --> C(将 SecurityManager 对象保存到 SecurityUtils 中)C --> D(获取 Subject 对象)D --> E(调用相关方法: 登录, 角色判断等)</pre><p>在 Spring Web 中，整合的步骤和上述基本一致。</p><p>但是，现在变了，由于现在是处于 Spring Web 的环境中，要控制访问网站资源的权限，哪些资源可以匿名访问，哪些资源需要登录才能访问等等，所以需要使用 Shiro 的 Filter，而不是 SecurityManagerFactory 对象。</p><p>首先 Shiro 中有一个过滤器，叫 ShiroFilterFactoryBean ，利用它可以控制资源访问，同时可以设置过滤器的类型来过滤某些请求。</p><p>接下来就是 SecurityManager ，在 Spring Web 的环境中，我们无法在过滤器中找到 getInstance 方法，而是需要创建 DefaultWebSecurityManager 对象，将该对象放到 ShiroFilterFactoryBean 中。</p><p>最后就是 Realm 了，Realm 做的事情主要是授权和认证了，可自定义一个自己的 Realm 继承自 AuthorizingRealm。将自定义的 Realm 添加到 DefaultWebSecurityManager 对象中即可，</p><p>后面的操作就基本一致了，比如调用 SecurityUtils 方法等等。</p><p>在了解非 web 环境下的调用步骤以及上述的整合步骤之后，可知每个组件的依赖关系如下图所示。</p><pre class="mermaid">graph LR自定义Realm --> DefaultWebSecurityFactoryBean-->ShiroFactoryBean</pre><p>接下来，就通过 SpringBoot 来整合 Shiro。</p><h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><p>先通过 Spring Initializer 初始化项目模板，然后导入 Shiro 的 spring-boot-starter。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>后面需要用到 MySQL，使用 MyBatis-Plus 来操作数据库，JDBC，连接池 Druid，以及是用 jsp 文件来做页面渲染，导入 jsp 相关的依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>创建一个 ShiroConfig 类，用于配置 Shiro，按照之前的依赖关系，可以这样配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfig</span> &#123;</span><br><span class="line">    <span class="comment">// 1、创建 ShiroFilter</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">shiroFilterFactoryBean</span><span class="params">(<span class="meta">@Autowired</span> DefaultWebSecurityManager defaultWebSecurityManager)</span> &#123;</span><br><span class="line">        <span class="type">ShiroFilterFactoryBean</span> <span class="variable">factoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">        <span class="comment">// 配置安全管理器</span></span><br><span class="line">        factoryBean.setSecurityManager(defaultWebSecurityManager);</span><br><span class="line">        <span class="keyword">return</span> factoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、创建 SecurityManager 对象</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">defaultWebSecurityManager</span><span class="params">(<span class="meta">@Autowired</span> Realm realm)</span> &#123;</span><br><span class="line">        <span class="type">DefaultWebSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>(realm);</span><br><span class="line">        securityManager.setRealm(realm);</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、创建 Realm。</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Realm <span class="title function_">realm</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CustomerRealm</span> <span class="variable">realm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustomerRealm</span>();</span><br><span class="line">        <span class="keyword">return</span> realm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些配置完成之后，还需要在 application.yml 文件中配置好数据库。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/yourdb?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=GMT%2B8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">yourpassword</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">top.bestguo.springboot_shiro.entity</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/**/*.xml</span></span><br></pre></td></tr></table></figure><p>在 application.properties 的配置中，配置好 jsp 的前后缀，以及 web 服务的端口等等。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">springboot_shiro</span></span><br><span class="line"><span class="comment"># 应用服务 WEB 访问端口</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8080</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/shiro</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.mvc.view.prefix</span>=<span class="string">/</span></span><br><span class="line"><span class="attr">spring.mvc.view.suffix</span>=<span class="string">.jsp</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging.level.top.bestguo.springboot_shiro.mapper</span>=<span class="string">debug</span></span><br></pre></td></tr></table></figure><h2 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h2><p>创建三个页面，分别是登录页、注册页和系统主页。这些页面分别创建在 webapp 文件夹下，没有可以新建一个文件夹。可以直接在浏览器直接访问 jsp 文件。</p><p><img src="/journal/shiro-spring/image-20220329102659182.png" alt="image-20220329102659182" loading="lazy"></p><p>页面都很简单，这三个页面的的代码如下。</p><h3 id="login-jsp"><a href="#login-jsp" class="headerlink" title="login.jsp"></a>login.jsp</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@page contentType=&quot;text/html; UTF-8&quot; pageEncoding=&quot;UTF-8&quot; isELIgnored=&quot;false&quot; %&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/login&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="register-jsp"><a href="#register-jsp" class="headerlink" title="register.jsp"></a>register.jsp</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@page contentType=&quot;text/html; UTF-8&quot; pageEncoding=&quot;UTF-8&quot; isELIgnored=&quot;false&quot; %&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/register&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="index-jsp"><a href="#index-jsp" class="headerlink" title="index.jsp"></a>index.jsp</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@page contentType=&quot;text/html; UTF-8&quot; pageEncoding=&quot;UTF-8&quot; isELIgnored=&quot;false&quot; %&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>系统主页V1.0<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/logout&quot;</span>&gt;</span>登出<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>用户管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>更新<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>商品管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>物流管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>订单管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="资源访问控制"><a href="#资源访问控制" class="headerlink" title="资源访问控制"></a>资源访问控制</h2><p>页面创建完成之后，测试这些页面均能够正常的访问。由于主页是不能够直接访问的到的，所以可以利用 Filter 来允许哪些页面可以匿名访问，哪些页面需要验证和授权才能访问。所以，我们在 ShiroConfig 类中设置。</p><p>ShiroFilterFactoryBean 中有一个 setFilterChainDefinitionMap 方法，用于设置拦截的资源，需要传入一个 map 集合，key 为访问的路径，value 为使用的<a href="https://www.bestguo.top/journal/shiro-study/#Shiro-%E5%86%85%E7%BD%AE%E7%9A%84%E8%BF%87%E6%BB%A4%E5%99%A8">过滤器名称</a>。</p><p>利用通配符可以拦截子路径下的资源， <code>/**</code> 就是拦截全部的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">shiroFilterFactoryBean</span><span class="params">(<span class="meta">@Autowired</span> DefaultWebSecurityManager defaultWebSecurityManager)</span> &#123;</span><br><span class="line">    <span class="type">ShiroFilterFactoryBean</span> <span class="variable">factoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">    <span class="comment">// 配置安全管理器</span></span><br><span class="line">    factoryBean.setSecurityManager(defaultWebSecurityManager);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 配置系统受限资源和公共资源</span></span><br><span class="line">    HashMap&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// authc 请求这个资源需要认证和授权，anon就是该资源无需认证</span></span><br><span class="line">    map.put(<span class="string">&quot;/user/login&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;/register.jsp&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;/user/register&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;/**&quot;</span>, <span class="string">&quot;authc&quot;</span>);</span><br><span class="line"></span><br><span class="line">    factoryBean.setFilterChainDefinitionMap(map);</span><br><span class="line">    <span class="keyword">return</span> factoryBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我访问至 index.jsp 页面时，如果未进行认证，那么就会直接跳转至 login.jsp 页面。因为在 Shiro 中，默认的访问路径就是 login.jsp 页面，该项可以通过 setLoginUrl 方法来执行需要跳转的认证页面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// shiro有一个默认的认证界面路径，默认就是 login.jsp 页面</span></span><br><span class="line">factoryBean.setLoginUrl(<span class="string">&quot;/your/login/path&quot;</span>);</span><br></pre></td></tr></table></figure><p>如果以进行认证，那么就可以正常进行访问了。</p><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><p>新建一个 shiro 数据库，创建一个 t_user 表，表中的字段分别如下所示。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_user</span><br><span class="line">(</span><br><span class="line">    id       <span class="type">int</span> auto_increment      <span class="keyword">primary</span> key,</span><br><span class="line">    username <span class="type">varchar</span>(<span class="number">40</span>)  <span class="keyword">null</span>,</span><br><span class="line">    password <span class="type">varchar</span>(<span class="number">40</span>)  <span class="keyword">null</span>,</span><br><span class="line">    salt     <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">null</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>然后利用 MybatisX-generator 生成相对应的 mapper 以及对应的实体类，该插件可以在 idea 中找到并安装。</p><h2 id="注册功能实现"><a href="#注册功能实现" class="headerlink" title="注册功能实现"></a>注册功能实现</h2><p>用户注册的实现也是非常简单的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">register</span><span class="params">(TUser user)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        userService.register(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/login.jsp&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/register.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>密码的加密使用的是 MD5 来对密码进行加密，利用加盐工具类，传入明文密码，盐值和迭代次数即可，相关的代码在后面的附录中。</p><h2 id="登录功能实现"><a href="#登录功能实现" class="headerlink" title="登录功能实现"></a>登录功能实现</h2><p>登录的实现逻辑如下，首先获取 Subject，然后调用登录方法。利用捕获的哪些异常来说明登录失败的原因。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line">    <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        subject.login(<span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>(username, password));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnknownAccountException e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;用户名错误!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IncorrectCredentialsException e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;密码错误!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/login.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在自定义的 Realm 中，重写认证的方法，调用 userService，判断是否查询到用户信息，如果有用户信息，那么比对用户的密码。创建 SimpleAuthenticationInfo 对象来对用户进行过认证。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;=====================================&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> (String) authenticationToken.getPrincipal();</span><br><span class="line">    <span class="comment">// 按照用户名查询</span></span><br><span class="line">    <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> (UserService) ApplicationUtils.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">    <span class="type">TUser</span> <span class="variable">userInfo</span> <span class="operator">=</span> userService.findUserInfo(username);</span><br><span class="line">    <span class="keyword">if</span>(Objects.nonNull(userInfo)) &#123;</span><br><span class="line">        <span class="comment">// 用户名、密码、盐值、名字。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(username, userInfo.getPassword(), ByteSource.Util.bytes(userInfo.getSalt()), <span class="built_in">this</span>.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 SimpleAuthenticationInfo 类中，如果是对加密的密码进行比较，需要有 4 个参数：一个用户名、一个加密所使用的盐值、一个加密的类型和 realm 的名字。如果是比较明文的话，只需要三个参数即可，分别是用户名、密码、 realm 的名字。</p><p>这样，登录功能就基本上实现了。只要认证成功之后就能访问主页了。</p><p><img src="/journal/shiro-spring/image-20220329114737704.png" alt="image-20220329114737704" loading="lazy"></p><h2 id="退出登录功能实现"><a href="#退出登录功能实现" class="headerlink" title="退出登录功能实现"></a>退出登录功能实现</h2><p>退出功能很简单，只需调用 logout 方法即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;logout&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">logout</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line">    subject.logout();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/login.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="授权功能实现"><a href="#授权功能实现" class="headerlink" title="授权功能实现"></a>授权功能实现</h2><blockquote><p>这里只做一个简单的授权功能实现，由于还没有授权之类的相关表，后面再详细的介绍授权的完整流程。</p></blockquote><p>每个用户登录之后，应该需要授予对应的角色和权限。若要给对应的用户赋予对应的权限，则需要创建一个 SimpleAuthorizationInfo 对象，用于授予角色和权限。</p><p>比如，我要给 xiaohe123 这个用户授予管理员角色。该管理员的角色拥有用户操作，所有订单保存和所有商品保存，可以这样写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取身份信息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> (String) principalCollection.getPrimaryPrincipal();</span><br><span class="line">    System.out.println(<span class="string">&quot;调用授权验证：&quot;</span> + username);</span><br><span class="line">    <span class="type">SimpleAuthorizationInfo</span> <span class="variable">authorizationInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthorizationInfo</span>();</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;xiaohe123&quot;</span>.equals(username)) &#123;</span><br><span class="line">        authorizationInfo.addRole(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        authorizationInfo.addStringPermission(<span class="string">&quot;user:*:*&quot;</span>);</span><br><span class="line">        authorizationInfo.addStringPermission(<span class="string">&quot;order:save:*&quot;</span>);</span><br><span class="line">        authorizationInfo.addStringPermission(<span class="string">&quot;shop:save:*&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> authorizationInfo;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;xiaohe124&quot;</span>.equals(username)) &#123;</span><br><span class="line">        authorizationInfo.addRole(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        authorizationInfo.addStringPermission(<span class="string">&quot;user:revise:*&quot;</span>);</span><br><span class="line">        authorizationInfo.addStringPermission(<span class="string">&quot;user:update:*&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> authorizationInfo;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>addRole 方法就是授予角色，addStringPermission 就是根据字符串来授予相对应的权限。授权方式可以参考上一篇的日志。</p><h3 id="权限判断方式"><a href="#权限判断方式" class="headerlink" title="权限判断方式"></a>权限判断方式</h3><p>授权完成之后，就可以判断用户具备那些权限了。判断权限有多种方式，可以在 jsp 中引入 shiro 标签，可以通过程序进行判断，也可以使用注解的方式来判断。</p><h4 id="Shiro-标签对判断方式"><a href="#Shiro-标签对判断方式" class="headerlink" title="Shiro 标签对判断方式"></a>Shiro 标签对判断方式</h4><p>利用 jstl 标签判断权限，不同的角色来用于展示不同的菜单页。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">shiro:hasAnyRoles</span> <span class="attr">name</span>=<span class="string">&quot;user,admin&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>用户管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">shiro:hasPermission</span> <span class="attr">name</span>=<span class="string">&quot;user:add:*&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">shiro:hasPermission</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">shiro:hasPermission</span> <span class="attr">name</span>=<span class="string">&quot;user:update:*&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">shiro:hasPermission</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">shiro:hasPermission</span> <span class="attr">name</span>=<span class="string">&quot;user:delete:*&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">shiro:hasPermission</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">shiro:hasPermission</span> <span class="attr">name</span>=<span class="string">&quot;user:update:*&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>更新<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">shiro:hasPermission</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">shiro:hasAnyRoles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">shiro:hasRole</span> <span class="attr">name</span>=<span class="string">&quot;admin&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 管理员权限可见 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>商品管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>物流管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>订单管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">shiro:hasRole</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>按照授权的代码来讲，如果我登录的账户是 xiaohe123，那么它具备用户操作的所有权限，和其它的功能。如果是 xiaohe124，那么它只有用户的修改和更新操作。</p><p>下图是 xiaohe124 的页面。</p><p><img src="/journal/shiro-spring/image-20220329143610917.png" alt="image-20220329143610917" loading="lazy"></p><p>下图是 xiaohe123 的页面。</p><p><img src="/journal/shiro-spring/image-20220329114737704.png" alt="image-20220329114737704" loading="lazy"></p><h4 id="程序判断的方式"><a href="#程序判断的方式" class="headerlink" title="程序判断的方式"></a>程序判断的方式</h4><p>程序的判断在上一篇的日志中有提及到，这里就不再赘述了。这里我写了一个小例子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;save&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 获取主题对象</span></span><br><span class="line">    <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line">    <span class="comment">// 代码方式</span></span><br><span class="line">    <span class="keyword">if</span>(subject.hasRole(<span class="string">&quot;admin&quot;</span>)) &#123;</span><br><span class="line">        <span class="comment">// 按照权限字符串</span></span><br><span class="line">        <span class="keyword">if</span>(subject.isPermitted(<span class="string">&quot;order:save:*&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;保存订单&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;保存订单失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无权访问&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注解判断方式"><a href="#注解判断方式" class="headerlink" title="注解判断方式"></a>注解判断方式</h4><p>注解的判断在控制层上，利用 @RequireRoles 注解就类似于 <code>subject.hasRole</code> 方法来判断权限的规则。利用 @RequiresPermissions 注解用于判断该角色对应的相关权限。</p><p>比如下面这个代码，访问的用户必须是 admin 的角色，且能够保存商品编号为 114 的商品。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;saveShop&quot;)</span></span><br><span class="line"><span class="meta">@RequiresRoles(&quot;admin&quot;)</span> <span class="comment">// 用来判断角色</span></span><br><span class="line"><span class="meta">@RequiresPermissions(&#123;&quot;shop:save:114&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">saveShop</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;商品信息保存！&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我是 xiaohe123 操作时，它的权限字符串是 <code>shop:save:*</code> ，也就是说它能够保存全部的商品信息，自然也就包括 114 这个商品了。</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>UserService 代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TUserMapper tUserMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(TUser tUser)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">salt</span> <span class="operator">=</span> SaltUtils.getSalt(<span class="number">8</span>);</span><br><span class="line">        <span class="comment">// 生成 md5，传入明文密码，盐值和迭代次数。</span></span><br><span class="line">        <span class="type">Md5Hash</span> <span class="variable">md5Hash</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Md5Hash</span>(tUser.getPassword(), salt, <span class="number">3</span>);</span><br><span class="line">        tUser.setSalt(salt);</span><br><span class="line">        tUser.setPassword(md5Hash.toHex());</span><br><span class="line">        tUserMapper.insert(tUser);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> TUser <span class="title function_">findUserInfo</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="type">TUser</span> <span class="variable">user</span> <span class="operator">=</span> tUserMapper.selectOne(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;TUser&gt;()</span><br><span class="line">                .eq(<span class="string">&quot;username&quot;</span>, username));</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ApplicationUtils.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取 spring 容器中的 bean 对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationUtils</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext context;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        context = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getBean</span><span class="params">(String beanName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> context.getBean(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SaltUtils.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SaltUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getSalt</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] chars = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&amp;*()&quot;</span>.toCharArray();</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> chars[<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(chars.length)];</span><br><span class="line">            sb.append(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> 权限框架学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shiro 学习小记</title>
      <link href="/journal/shiro-study/"/>
      <url>/journal/shiro-study/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Shiro-介绍"><a href="#Shiro-介绍" class="headerlink" title="Shiro 介绍"></a>Shiro 介绍</h2><p>权限体系在现代软件应用中有着非常重要的地位。一个应用如果没有权限体系都会显着这个系统“特别不安全”，无论是传统的 MIS 系统还是互联网项目出于对业务数据和应用自身的安全，都会设置自己的安全策略。</p><p>Apache Shiro 是一个强大的并且简单使用的 Java 权限框架。主要应用认证（Authentication）、授权（Authorization）、加密（Cryptography）和 Session Manager。Shiro 具有简单易懂的 API，使用Shiro 可以快速并且简单的应用到任何应用中，无论是从最小的移动 app 到最大的企业级 web 应用都可以使用。</p><span id="more"></span><h2 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h2><p><strong><font color="red">Authentication</font></strong> 认证。如用户的登录。</p><p><strong><font color="red">Authorization</font></strong> 授权。用户是否有权限访问指定 URL 等。</p><p><strong>Cryptography</strong> 密码学。如密码的加密。</p><p><strong>Session Management</strong> Session 管理。</p><p><strong>Web Integration</strong> Web集成。Shiro不依赖于容器。</p><h2 id="Shiro-的架构原理"><a href="#Shiro-的架构原理" class="headerlink" title="Shiro 的架构原理"></a>Shiro 的架构原理</h2><p>Shiro 的架构如下图所示，接下来将介绍架构的每一个部分。</p><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fattach.dataguru.cn%2Fattachments%2Fforum%2F201403%2F10%2F1435301im3t21cbc0itmbi.png&refer=http%3A%2F%2Fattach.dataguru.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1650680539&t=675d9d7d30c47a14cefe25549d6bbc93" alt="shiro架构" loading="lazy"></p><h3 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h3><p>主体。每个“用户”登录成功后都会对应一个 Subject 对象，所有“用户”信息都存放在 Subject 中。可以理解成 Subject 就是 Shiro 提供的用户实体类。没有 Subject 就没有认证这个操作。</p><h3 id="Security-Manager"><a href="#Security-Manager" class="headerlink" title="Security Manager"></a>Security Manager</h3><p>Shiro 最大的容器，此客器中包含了 Shiro 的绝大多数功能。在其它项目中，获取 Security Manager 是编写代码的第一步。但是 Spring Boot 中已经帮助我们进行自动化配置了。</p><h3 id="Authenticator"><a href="#Authenticator" class="headerlink" title="Authenticator"></a>Authenticator</h3><p>认证器。执行认证过程时所调用的组件，其中包含了认证策略。</p><h3 id="Authorizer"><a href="#Authorizer" class="headerlink" title="Authorizer"></a>Authorizer</h3><p>授权器。执行授权时调用的组件。</p><h3 id="Session-Manager"><a href="#Session-Manager" class="headerlink" title="Session Manager"></a>Session Manager</h3><p>Shiro 被 Web 集成后，HttpSession 对象会由 Shiro 的 Session Manager 进行管理。</p><h3 id="Cache-Manager"><a href="#Cache-Manager" class="headerlink" title="Cache Manager"></a>Cache Manager</h3><p>缓存管理。Shiro 执行很多第三方缓存技术，如 EHCache 等。</p><h3 id="Session-DAO"><a href="#Session-DAO" class="headerlink" title="Session DAO"></a>Session DAO</h3><p>操作 Session 内容的组件。</p><h3 id="Realms"><a href="#Realms" class="headerlink" title="Realms"></a>Realms</h3><p>Shiro 框架实现权限控制不依赖于数据库，通过内置数据也可以实现权限控制，比如后面提到的 ini 文件。但是目前绝大多数应用的数据都存储在数据库中，所以 Shiro 提供了 Realms 组件，此组件的作用就是访问数据库。Shiro 内置的访问数据库的代码，通过简单配置就可以访问数据库，也可以自定义 Realms 实现访问数据库逻辑。</p><h2 id="Shiro-的-INI-文件"><a href="#Shiro-的-INI-文件" class="headerlink" title="Shiro 的 INI 文件"></a>Shiro 的 INI 文件</h2><p>INI 英文名称是 Initialization file，INI 文件是 Window 系统配置文件的扩展名。Shiro 的全局配置文件就是“.ini”文件，ini 中数据都是固定数据。</p><p>.ini 文件内容的语法和 .properties 类似，都是 key=value 格式，INI 文件中包含了 4 个部分。分别是 main、users、roles、urls。</p><p>Shiro 的配置文件大致有如下内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[main]</span></span><br><span class="line"><span class="comment"># Shiro 的一些全局配置</span></span><br><span class="line"></span><br><span class="line"><span class="section">[users]</span></span><br><span class="line"><span class="comment"># 用户名=密码,角色名</span></span><br><span class="line"><span class="attr">xiaohehe</span>=<span class="number">123456</span>,role1,role2</span><br><span class="line"></span><br><span class="line"><span class="section">[roles]</span></span><br><span class="line"><span class="comment"># 角色名=权限名</span></span><br><span class="line"><span class="attr">role1</span>=user:inseet,role2=user:update</span><br><span class="line"><span class="attr">role2</span>=insert,update,delete,select</span><br><span class="line"></span><br><span class="line"><span class="section">[urls]</span></span><br><span class="line"><span class="comment"># 定义哪个控制器被哪个过滤器过滤。Shiro 内置很多过滤器。此部分主要在 WEB 应用中使用</span></span><br><span class="line"><span class="comment"># 控制器名称（可理解成url请求路径）=过滤器名称</span></span><br><span class="line">/<span class="attr">login</span>=authc</span><br><span class="line">/**=anon</span><br></pre></td></tr></table></figure><h3 id="Shiro-内置的过滤器"><a href="#Shiro-内置的过滤器" class="headerlink" title="Shiro 内置的过滤器"></a>Shiro 内置的过滤器</h3><p>过滤器分为两类：认证相关过滤器和授权相关过滤器</p><h4 id="认证相关的过滤器"><a href="#认证相关的过滤器" class="headerlink" title="认证相关的过滤器"></a>认证相关的过滤器</h4><table><thead><tr><th>过滤器名</th><th>过滤器类</th><th>功能</th></tr></thead><tbody><tr><td>anon</td><td>AnonymousFilter</td><td>匿名拦截器，不需要登录即可访问的资源，匿名用户或游客，一般用于过滤静态资源。</td></tr><tr><td>authc</td><td>FormAuthenticationFilter</td><td>需要认证登录才能访问</td></tr><tr><td>authcBasic</td><td>BasicHttpAuthenticationFilter</td><td>httpBasic 身份验证拦截器。</td></tr><tr><td>user</td><td>UserFilter</td><td>用户拦截器，表示必须存在用户。</td></tr><tr><td>logout</td><td>authc.LogoutFilter</td><td>退出拦截器，执行后会直接跳转到shiroFilterFactoryBean.setLoginUrl() 设置的 url</td></tr></tbody></table><h4 id="授权相关过滤器"><a href="#授权相关过滤器" class="headerlink" title="授权相关过滤器"></a>授权相关过滤器</h4><table><thead><tr><th>过滤器名</th><th>过滤器类</th><th>功能</th></tr></thead><tbody><tr><td>noSessionCreation</td><td>NoSessionCreationFilter</td><td>阻止在请求期间创建新的会话。以保证无状态的体验</td></tr><tr><td>perms</td><td>PermissionsAuthorizationFilter</td><td>验证用户是否拥有权限，表示需要某些权限才能通过</td></tr><tr><td>port</td><td>PortFilter</td><td>指定请求访问的端口号，如果不匹配则跳转到登录页面</td></tr><tr><td>rest</td><td>HttpMethodPermissionFilter</td><td>根据请求的方法</td></tr><tr><td>roles</td><td>RolesAuthorizationFilter</td><td>角色过滤器。判断当前用户是否指定角色。</td></tr><tr><td>ssl</td><td>SslFilter</td><td>表示安全的url请求，协议为https。</td></tr></tbody></table><blockquote><p>以上的权限过滤器不一要全部用，按照项目的具体情况来分配相应的权限，使用相关的过滤器即可。后面在学习到<a href="/journal/shiro-spring">整合到 SpringBoot </a>的时候会抽出一些用法。</p></blockquote><p><strong>在 INI 文件中的配置时，需要按照下面的方式配置。</strong></p><p>anon：不认证也可以访问。例如：<code>/admin/=anon</code>，<code>/login=anno</code></p><p>authc：必须认证。<code>/**=authc</code> ——所有的资源都认证。</p><p>authcBasic：没有参数时表示 httpBasic 认证(客户端认证方式)。</p><p>logout：退出。</p><p>noSessionCreation：新增 Filter，表示没有 Session 创建。</p><p>perms：判断是有具有指定权限。例如：<code>/admin/user/=perms[ &quot;per1” &quot; per2” ]</code>。必须同时具有给定权限才可以访问。如果只有一个权限可以省略双引号。</p><p>port：限制端口。例如：<code>/admin/**=port[8081]</code>。只要请求不是 8081 端口就重新发送URL到8081端口。</p><p>rest：请求方式和权限的简便写法。例如：<code>/admin/**=rest[user]</code>，相当于<code>/admin/** = perms[user:方式]</code>，方式是http请求的方式: post 、get 等。</p><p>roles：判断是否具有指定角色。<code>/admin/** =roles[role1]</code>。</p><p>ssl：表示是安全的请求。协议为 https。</p><p>user：表示必须存在用户。</p><h2 id="Shiro-基本认证流程"><a href="#Shiro-基本认证流程" class="headerlink" title="Shiro 基本认证流程"></a>Shiro 基本认证流程</h2><ol><li>获取 Subject 主体，通过主体 Subject 对象的 login 方法进行登录。</li><li>把 Subject 中内容传递给Security Manager。</li><li>把 Security Manager 内部组件 Authenticator 进行认证。</li><li>使用 Realm 来认证数据，比如使用 INI Realm 来认证，调用 ini 文件中数据。</li></ol><h3 id="简单小试一下"><a href="#简单小试一下" class="headerlink" title="简单小试一下"></a>简单小试一下</h3><p>1、创建一个 Maven 工程、复制以下依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、在 resources 目录下，创建一个 ini 文件。新建一个 users 选项，按照 <code>用户名=密码</code> 的方式在 ini 文件中添加用户。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[users]</span></span><br><span class="line"><span class="attr">zs</span>=<span class="number">123</span></span><br><span class="line"><span class="attr">sxc</span>=<span class="number">123</span></span><br><span class="line"><span class="attr">xiaohehe</span>=<span class="number">123</span></span><br></pre></td></tr></table></figure><p>3、创建一个 Main 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bestguo.shirofirst;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.IncorrectCredentialsException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UnknownAccountException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.config.IniSecurityManagerFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.SecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroFirstApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">        <span class="comment">// 1、解析 ini 文件，创建 SecurityManager 工厂</span></span><br><span class="line">        <span class="type">IniSecurityManagerFactory</span> <span class="variable">managerFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IniSecurityManagerFactory</span>(<span class="string">&quot;classpath:shiro.ini&quot;</span>);</span><br><span class="line">        <span class="comment">// 2、获得 SecurityManager 实例对象</span></span><br><span class="line">        <span class="type">SecurityManager</span> <span class="variable">instance</span> <span class="operator">=</span> managerFactory.getInstance();</span><br><span class="line">        <span class="comment">// 3、将 SecurityManager 对象保存到 SecurityUtils 中</span></span><br><span class="line">        SecurityUtils.setSecurityManager(instance);</span><br><span class="line">        <span class="comment">// 4、获取 Subject 主题对象</span></span><br><span class="line">        <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line">        <span class="comment">// 5、创建令牌对象，相当于是给我们用户自己输入用户名和密码</span></span><br><span class="line">        <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>(<span class="string">&quot;sxc&quot;</span>, <span class="string">&quot;1123&quot;</span>);</span><br><span class="line">        <span class="comment">// 6、进行认证的比较（Realms）</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            subject.login(token);</span><br><span class="line">            System.out.println(<span class="string">&quot;认证成功！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownAccountException exception) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;认证失败，未知的账户！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IncorrectCredentialsException exception) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;认证失败，不正确的口令！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4、运行结果</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 用户名为sxc、密码为 1123</span><br><span class="line">Hello World!</span><br><span class="line">SLF4J: Failed to load class &quot;org.slf4j.impl.StaticLoggerBinder&quot;.</span><br><span class="line">SLF4J: Defaulting to no-operation (NOP) logger implementation</span><br><span class="line">SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.</span><br><span class="line">认证失败，不正确的口令！</span><br><span class="line">    </span><br><span class="line">// 用户名为 sc、密码为 123</span><br><span class="line">Hello World!</span><br><span class="line">SLF4J: Failed to load class &quot;org.slf4j.impl.StaticLoggerBinder&quot;.</span><br><span class="line">SLF4J: Defaulting to no-operation (NOP) logger implementation</span><br><span class="line">SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.</span><br><span class="line">认证失败，未知的账户！</span><br><span class="line"></span><br><span class="line">// 用户名为 sxc、密码为 123</span><br><span class="line">Hello World!</span><br><span class="line">SLF4J: Failed to load class &quot;org.slf4j.impl.StaticLoggerBinder&quot;.</span><br><span class="line">SLF4J: Defaulting to no-operation (NOP) logger implementation</span><br><span class="line">SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.</span><br><span class="line">认证成功！</span><br></pre></td></tr></table></figure><h3 id="认证的过程"><a href="#认证的过程" class="headerlink" title="认证的过程"></a>认证的过程</h3><p>在上面的示例中，使用了 UsernamePasswordToken 类来进行用户的认证，认证原理首先是比对用户名，判断用户名是否存在，然后再判断用户的密码是否匹配。如果用户名或者密码不正确，那么则通过异常抛出的形式提示用户名或者密码是否有效。</p><h2 id="Shiro-的授权"><a href="#Shiro-的授权" class="headerlink" title="Shiro 的授权"></a>Shiro 的授权</h2><p>若要判断一个用户是否有什么权限，有两种方式，一种是利用方法返回的布尔值进行判断，另一种方法没有返回值，但是会抛出异常，通过捕获异常的方式来处理用户有哪些权限。</p><p>判断用户是否有角色以及权限，前提是用户能够正确的通过认证。</p><h3 id="判断角色"><a href="#判断角色" class="headerlink" title="判断角色"></a>判断角色</h3><p>判断角色的方法有 hasRole、hasRoles、hasAllRole、checkRole 等，一般来说，带 has 前缀的都带返回值，类型为 boolean 型。</p><h4 id="hasRole-方法"><a href="#hasRole-方法" class="headerlink" title="hasRole 方法"></a>hasRole 方法</h4><p>判断当前认证成功用户是否具有某一个角色，返回一个 boolean 值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">hasRole</span> <span class="operator">=</span> subject.hasRole(<span class="string">&quot;role2&quot;</span>);</span><br><span class="line">System.out.println(hasRole);</span><br></pre></td></tr></table></figure><h4 id="hasRoles-方法"><a href="#hasRoles-方法" class="headerlink" title="hasRoles 方法"></a>hasRoles 方法</h4><p>判断当前用户是否具有多个角色，返回一组 boolean 值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="string">&quot;role1&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;role2&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(subject.hasRoles(list))); <span class="comment">// boolean[] 型</span></span><br></pre></td></tr></table></figure><h4 id="hasAllRoles-方法"><a href="#hasAllRoles-方法" class="headerlink" title="hasAllRoles 方法"></a>hasAllRoles 方法</h4><p>判断当前用户是否包含当前列出的全部的角色。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="string">&quot;role1&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;role2&quot;</span>);</span><br><span class="line">System.out.println(subject.hasAllRoles(list));</span><br></pre></td></tr></table></figure><h4 id="checkPermission-方法"><a href="#checkPermission-方法" class="headerlink" title="checkPermission 方法"></a>checkPermission 方法</h4><p>功能上和 hasRole 一样，只是它是通过异常抛出的形式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    subject.checkRole(<span class="string">&quot;fsffsdf&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (UnauthorizedException exception) &#123;</span><br><span class="line">    exception.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断权限"><a href="#判断权限" class="headerlink" title="判断权限"></a>判断权限</h3><p>权限是包含在角色中，也就是意味着当前用户包含着这些权限，此时可以判断该用户拥有哪些可以操作的权限了。</p><p>判断权限的方法有：isPermitted、isPermittedAll、checkPermission、checkPermissions 等，使用方法也和判断角色一样，但是传入的参数是权限名称而不是角色名称。一般来说，带 is 前缀的都带返回值，类型为 boolean 型。</p><h3 id="授权方式"><a href="#授权方式" class="headerlink" title="授权方式"></a>授权方式</h3><p>授权方式分为两种，分别是基于角色的访问控制（Role-Based Access Control）和基于资源的访问控制（Resource-Based Access Control），两者简称都是 RBAC。</p><h4 id="基于角色的访问控制"><a href="#基于角色的访问控制" class="headerlink" title="基于角色的访问控制"></a>基于角色的访问控制</h4><p>RBAC 基于角色的访问控制（Role-Based Access Control）是以角色为中心进行访问控制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(subject.hasRole(<span class="string">&quot;admin&quot;</span>)) &#123;</span><br><span class="line">    <span class="comment">// 操作什么资源</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="基于资源的访问控制"><a href="#基于资源的访问控制" class="headerlink" title="基于资源的访问控制"></a>基于资源的访问控制</h4><p>RBAC 基于资源的访问控制（Resource-Based Access Control）是以资源为中心进行访问控制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(subject.isPermission(<span class="string">&quot;user:create:*&quot;</span>)) &#123;</span><br><span class="line">    <span class="comment">// 对所有的用户具有创建的权限</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(subject.isPermission(<span class="string">&quot;user:update:01&quot;</span>)) &#123;</span><br><span class="line">    <span class="comment">// 对01的用户具有创建的权限</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>权限字符串的规则是：<code>资源标识符∶操作︰资源实例标识符</code>，意思是对哪个资源的哪个实例具有什么操作，”:” 是资源 / 操作 / 实例的分割符,权限字符串也可以使用 * 通配符。</p><p>user：系统中的一个模块</p><p>create：创建</p><p>*：某个资源的实例</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> 权限框架学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 哨兵模式</title>
      <link href="/journal/redis-sentinel/"/>
      <url>/journal/redis-sentinel/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="哨兵模式概述"><a href="#哨兵模式概述" class="headerlink" title="哨兵模式概述"></a>哨兵模式概述</h2><p>就是主节点宕机了，然后通过“哨兵”来自动从很多从节点中自动选出一个主节点来。从 Redis 2.8 开始就正式提供了 Sentinel （哨兵）架构来解决“手动切换为主服务器”问题。</p><p>哨兵模式是一种特殊的模式，首先 Redis 提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它会独立运行。其原理是<strong>哨兵通过发送命令，等待 Redis 服务器响应，从而监控运行的多个 Redis 实例。</strong></p><p><img src="/journal/redis-sentinel/image-20211121081433399.png" alt="image-20211121081433399" loading="lazy"></p><p>它是根据投票的方式，得出的投票数自动将从库转换为主库。</p><span id="more"></span><p>这里的哨兵有两个作用</p><ul><li>通过发送命令，让Redis服务器返回监控其运行状态，包括主服务器和从服务器。</li><li>当哨兵监测到master宕机，会自动将slave切换成master，然后通过发布订阅模式通知其他的从服务器，修改配置文件，让它们切换主机。</li></ul><p>然而一个哨兵进程对Redis服务器进行监控，可能会出现问题，为此，我们可以使用多个哨兵进行监控。各个哨兵之间还会进行监控，这样就形成了多哨兵模式。</p><p><img src="/journal/redis-sentinel/image-20211121081638591.png" alt="image-20211121081638591" loading="lazy"></p><p>假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行 failover（故障转移）过程，仅仅是哨兵1主观的认为主服务器不可用，这个现象成为<strong>主观下线</strong>。</p><p>当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行 failover（故障转移）操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为<strong>客观下线</strong>。</p><h2 id="启动哨兵模式"><a href="#启动哨兵模式" class="headerlink" title="启动哨兵模式"></a>启动哨兵模式</h2><p>1、配置哨兵模式配置文件 <code>sentinel.conf </code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;</span><br><span class="line">sentinel monitor redis-master-6379 127.0.0.1 6379 1</span><br></pre></td></tr></table></figure><p>2、启动哨兵</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]<span class="comment"># redis-sentinel ./sentinel.conf</span></span><br></pre></td></tr></table></figure><p>3、如果主节点宕机了，那么哨兵模式将会通过投票的方式决定哪台是主节点，通过日志可以了解到。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1882:X 21 Nov 2021 08:39:24.386 # +vote-for-leader 8ce966f56d289a4560ef0479726cf5899fdb1101 3</span><br><span class="line">1882:X 21 Nov 2021 08:39:24.387 # +elected-leader master redis-master-6379 127.0.0.1 6379</span><br><span class="line">1882:X 21 Nov 2021 08:39:24.387 # +failover-state-select-slave master redis-master-6379 127.0.0.1 6379</span><br><span class="line">1882:X 21 Nov 2021 08:39:24.443 # +selected-slave slave 127.0.0.1:6381 127.0.0.1 6381 @ redis-master-6379 127.0.0.1 63791882:X 21 Nov 2021 08:39:24.443 * +failover-state-send-slaveof-noone slave 127.0.0.1:6381 127.0.0.1 6381 @ redis-master-6379 127.0.0.1 6379</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Redis 的学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 主从复制</title>
      <link href="/journal/redis-master-slave/"/>
      <url>/journal/redis-master-slave/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="主从复制伪集群搭建"><a href="#主从复制伪集群搭建" class="headerlink" title="主从复制伪集群搭建"></a>主从复制伪集群搭建</h2><blockquote><p>这里的伪集群配置的是 1 主 2 从。</p></blockquote><p><strong>1、复制 3 个配置文件，配置文件名分别为 <code>redis-master-6379.conf</code>、<code>redis-slave-6380.conf</code>、<code>redis-slave-6381.conf</code></strong></p><p><strong>2、修改三个配置文件的端口号、日志文件和 rdb 文件。</strong></p><p><code>redis-master-6379.conf</code> 需要配置内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pidfile /var/run/redis-slave-6379.pid</span><br><span class="line">port 6379</span><br><span class="line">logfile &quot;redis-master-6379.log&quot;</span><br><span class="line">dbfilename redis-master-6379.rdb</span><br></pre></td></tr></table></figure><p><code>redis-slave-6380.conf</code> 需要配置内容如下</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pidfile /var/run/redis-slave-6380.pid</span><br><span class="line">port 6380</span><br><span class="line">logfile &quot;redis-slave-6380.log&quot;</span><br><span class="line">dbfilename redis-slave-6380.rdb</span><br></pre></td></tr></table></figure><p><code>redis-slave-6381.conf</code> 需要配置内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pidfile /var/run/redis-slave-6381.pid</span><br><span class="line">port 6381</span><br><span class="line">logfile &quot;redis-slave-6381.log&quot;</span><br><span class="line">dbfilename redis-slave-6381.rdb</span><br></pre></td></tr></table></figure><h3 id="临时配置主从节点"><a href="#临时配置主从节点" class="headerlink" title="临时配置主从节点"></a>临时配置主从节点</h3><p>临时配置非常简单，只需要将从节点配置成主节点即可。以下是将 6380 端口的 redis 配置成从节点。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6380&gt; SLAVEOF 127.0.0.1 6379</span><br></pre></td></tr></table></figure><p>以下是将 6381 端口的 redis 配置成从节点。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6381&gt; SLAVEOF 127.0.0.1 6379</span><br></pre></td></tr></table></figure><p>如果在从节点，输入这个命令，将会看到 role 是 slaver</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6380&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br></pre></td></tr></table></figure><p>如果是在主节点，输入这个命令，可以看到有两台从节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip=127.0.0.1,port=6380,state=online,offset=294,lag=1</span><br><span class="line">slave1:ip=127.0.0.1,port=6381,state=online,offset=294,lag=0</span><br></pre></td></tr></table></figure><h3 id="永久配置主从节点"><a href="#永久配置主从节点" class="headerlink" title="永久配置主从节点"></a>永久配置主从节点</h3><p>永久配置的话，只需将配置一下从节点中的配置文件。配置如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># replicaof &lt;masterip&gt; &lt;masterport&gt;</span><br><span class="line">replicaof 127.0.0.1 6379</span><br></pre></td></tr></table></figure><h2 id="主从节点的一些细节"><a href="#主从节点的一些细节" class="headerlink" title="主从节点的一些细节"></a>主从节点的一些细节</h2><p>向主节点写入数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;tel&quot;</span></span><br><span class="line">2) <span class="string">&quot;age&quot;</span></span><br><span class="line">3) <span class="string">&quot;k1&quot;</span></span><br><span class="line">4) <span class="string">&quot;qq&quot;</span></span><br><span class="line">5) <span class="string">&quot;name&quot;</span></span><br><span class="line">6) <span class="string">&quot;home&quot;</span></span><br></pre></td></tr></table></figure><p><strong>1、从节点不能写数据，只能读取数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6380&gt; set key1 v1</span><br><span class="line">(error) READONLY You can&#x27;t write against a read only replica.</span><br><span class="line">127.0.0.1:6380&gt; get k1</span><br><span class="line">&quot;v1&quot;</span><br></pre></td></tr></table></figure><p><strong>2、主节点关闭</strong></p><p>主节点一旦关闭，那么从节点还是保持原来的模式。但会提示主节点的状态是关闭的。也就是依然不能写数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6380&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:down</span><br></pre></td></tr></table></figure><p>当主节点一连接上去，此时主节点再写入数据，从节点会立刻将主节点的数据复制过来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 ve</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6380&gt; get k2</span><br><span class="line"><span class="string">&quot;ve&quot;</span></span><br></pre></td></tr></table></figure><p><strong>3、从节点关闭</strong></p><p>从节点一旦关闭，如果只是临时将其配置为从节点，那么当它再次启动时，它就接收不到主节点的数据。因为启动完成之后，它就变成主节点了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]<span class="comment"># redis-cli -p 6380</span></span><br><span class="line">127.0.0.1:6380&gt; get k3</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6380&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br></pre></td></tr></table></figure><p>如果我再次将其设置为从节点，它还会将主节点中的数据复制过来吗？当然会将主节点中的数据复制过来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6380&gt; SLAVEOF 127.0.0.1 6379</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6380&gt; get k3</span><br><span class="line"><span class="string">&quot;v3&quot;</span></span><br></pre></td></tr></table></figure><p>如果是永久配置的话，再次启动从节点，它就会自动地将主节点中的数据给复制过来了。</p><h2 id="从节点变成主节点"><a href="#从节点变成主节点" class="headerlink" title="从节点变成主节点"></a>从节点变成主节点</h2><p>要想变成主节点也非常简单，只需输入以下命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6381&gt; SLAVEOF no one</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6381&gt; show replication</span><br><span class="line">(error) ERR unknown <span class="built_in">command</span> `show`, with args beginning with: `replication`,</span><br><span class="line">127.0.0.1:6381&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_failover_state:no-failover</span><br></pre></td></tr></table></figure><h2 id="主从复制原理"><a href="#主从复制原理" class="headerlink" title="主从复制原理"></a>主从复制原理</h2><p>Slave 启动成功连接到 master 后会发送—个 sync 同步命令。</p><p>Master 接到命令，启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，master 将传送整个数据文件到 slave，并完成一次完全同步。</p><p>主从复制有分为两种情况</p><ul><li><p>全量复制：而 slave 服务在接收到数据库文件数据后，将其存盘并加载到内存中。</p></li><li><p>增量复制：Master 继续将新的所有收集到的修改命令依次传给 slave，完成同步。</p></li></ul><p>==只要是重新连接 master，一次完全同步（全量复制）将被自动执行。==</p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Redis 的学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java I/O 笔记（1）</title>
      <link href="/journal/java-io-stream-1/"/>
      <url>/journal/java-io-stream-1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="I-O-流是什么"><a href="#I-O-流是什么" class="headerlink" title="I/O 流是什么"></a>I/O 流是什么</h2><p>I：Input、O：Output，即输入输出。</p><p>一个文件，从磁盘到内存，叫输入。从内存到磁盘，叫输出。通过 IO 可以完成磁盘文件的读和写。</p><p>以内存为参照物就好理解了。</p><p><img src="/journal/java-io-stream-1/image-20211113102421553.png" alt="i/o" loading="lazy"></p><p>流是什么，流可以认为是一种数据流向。从磁盘到内存，从内存到磁盘，这就是流向。</p><span id="more"></span><h2 id="I-O-流的分类"><a href="#I-O-流的分类" class="headerlink" title="I/O 流的分类"></a>I/O 流的分类</h2><p>按照流向，分为输入流和输出流。</p><p>按照类别分，分为字节流和字符流。</p><h2 id="Java-I-O-的四大家族"><a href="#Java-I-O-的四大家族" class="headerlink" title="Java I/O 的四大家族"></a>Java I/O 的四大家族</h2><p><code>java.io.InputStream</code> 字节输入流、<code>java.io.OutputStream</code> 字节输出流</p><p><code>java.io.Reader</code> 字符输入流、<code>java.io.InputStream</code> 字符输出流</p><p>该四大家族都是抽象类。其中，所有的流都实现了 <code>java.io.Closeable</code> 接口，都是可关闭的，都有 close() 方法。流毕竟是一个管道，这个是内存和硬盘之间的通道，用完之后一定要关闭，不然会耗费（占用）很多资源。养成好习惯，用完流一定要关闭。</p><p>所有的输出流都实现了：<code>java.io.Flushable</code> 接口，都是可刷新的，都有 flush() 方法。养成一个好习惯，输出流在最终输出之后，一定要记得 flush() 刷新一下。这个刷新表示将管道当中剩余未输出的数据强行输出完，刷新的作用就是清空管道。</p><h3 id="一些-I-O-类"><a href="#一些-I-O-类" class="headerlink" title="一些 I/O 类"></a>一些 I/O 类</h3><p>文件专属：</p><ul><li><code>java.io.FileInputStream</code></li><li><code>java.io.FileOutputStream</code></li><li><code>java.io.FileReader</code></li><li><code>java.io.FileWriter</code></li></ul><p>转换流：(将字节流转换成字符流)</p><ul><li><code>java.io.InputStreanReader</code></li><li><code>java.io.OutputStreamWriter</code></li></ul><p>缓冲流专属：</p><ul><li><code>java.io.BufferedReader</code></li><li><code>java.io BufferedWriter</code></li><li><code>java.io.BufferedInputStream</code></li><li><code>java.io.BufferedOutputStream</code></li></ul><p>数据流专属：</p><ul><li><code>java.io.DataInputStream</code></li><li><code>java.io.DataOutputStream</code></li></ul><p>标准输出流：</p><ul><li><code>java.io.PrintWriter</code></li><li><code>java.io.PrintStream</code></li></ul><p>对象专属流：</p><ul><li><code>java.io.ObjectInputStream</code></li><li><code>java.io.ObjectOutputStream</code></li></ul><h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><p>利用字节流读取文件和写入文件，这里以 test.txt 文件为例。test.txt 的内容如下。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my name is van</span><br><span class="line">i am a artist</span><br><span class="line">i am a performance artist</span><br><span class="line">the deep dark fantasy</span><br></pre></td></tr></table></figure><h3 id="读取文件，磁盘-→-内存"><a href="#读取文件，磁盘-→-内存" class="headerlink" title="读取文件，磁盘 → 内存"></a>读取文件，磁盘 → 内存</h3><blockquote><p>创建的步骤大致都一样，先创建对象 → 读取文件 → 关闭流</p></blockquote><p>1、先创建一个输入流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;e:\\test.txt&quot;</span>);</span><br></pre></td></tr></table></figure><p>2、创建文件完之后，就可以调用 read() 直接读数据了。数每读取一次，文件指针就会移动一位。当移动到文件末尾时，此时 read() 的返回值为 -1，可以用 while 循环让它一直读</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> read;</span><br><span class="line"><span class="keyword">while</span>((read = fis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">    System.out.println(read);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、最后关闭文件流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fis.close();</span><br></pre></td></tr></table></figure><p>代码运行完之后，控制台输出并不是字符，而是每个字符所对应的 ascii 码，可以强制类型转换成 char 类型，输出的就都是字符了。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">109</span><br><span class="line">121</span><br><span class="line">32</span><br><span class="line">110</span><br><span class="line">97</span><br><span class="line">109</span><br><span class="line">101</span><br><span class="line">32</span><br><span class="line">105</span><br><span class="line">115</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>但是，上面这种方式读取文件效率太低了，因为是一个一个读。Java 还可以通过字节数组的方式读取数据，这样效率就会高很多。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(path);</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">12</span>];</span><br><span class="line">        <span class="type">int</span> i; <span class="comment">// 拿到的是读取的字节数，当读取不到数据的时候，直接返回 -1</span></span><br><span class="line">        <span class="keyword">while</span> ((i = fis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 不能全部读取数组中的元素，读到哪里指针就指到哪里</span></span><br><span class="line">            <span class="comment">// System.out.println(new String(bytes));</span></span><br><span class="line">            System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="number">0</span>, i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (fis != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fis.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="写入到文件，内存-→-磁盘"><a href="#写入到文件，内存-→-磁盘" class="headerlink" title="写入到文件，内存 → 磁盘"></a>写入到文件，内存 → 磁盘</h3><blockquote><p>步骤：创建输出流 → 写入 → 刷新 → 关闭</p></blockquote><p>1、创建文件输出流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认是直接覆盖，要在文件结尾追加数据，在构造方法中另加一个参数 true，表示可追加。</span></span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(path, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>2、写入数据。由于是字节，所以只能一个一个按字节写或者通过字节数组的方式来写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>, <span class="number">68</span>&#125;;</span><br><span class="line">fos.write(bytes);</span><br><span class="line">fos.write(<span class="number">51</span>);</span><br></pre></td></tr></table></figure><p>3、刷新流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fos.flush();</span><br></pre></td></tr></table></figure><p>4、关闭</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fos.close();</span><br></pre></td></tr></table></figure><p>如果不加 true 的话，那么文件中的内容是 ABCD ，加了 true 的话，那么就是文件结尾 ABCD。</p><h3 id="复制一个视频文件"><a href="#复制一个视频文件" class="headerlink" title="复制一个视频文件"></a>复制一个视频文件</h3><p>通过字节输入流和输出流的配合，可以实现一个简单的文件复制功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">copyFileTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始复制......&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 读文件</span></span><br><span class="line">        fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\fakepath\\星愿（茶理理版）.mov&quot;</span>);</span><br><span class="line">        <span class="comment">// 写文件</span></span><br><span class="line">        fos = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\星愿（茶理理版）.mov&quot;</span>);</span><br><span class="line">        <span class="comment">// 每次读取 10kb 数据</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span> * <span class="number">10</span>];</span><br><span class="line">        <span class="type">int</span> read;</span><br><span class="line">        <span class="keyword">while</span> ((read = fis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(bytes);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 刷新输出流</span></span><br><span class="line">        fos.flush();</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;耗时：&quot;</span> + (end - start) + <span class="string">&quot; ms&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(fis != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fis.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(fos != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><p>字符流是专门操作纯文本文件的，如果要操作图片，音频，word 文档就不可以了。它的使用方式和字节流一样的</p><p>读取文件中的数据，通过字符数组的方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">FileReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;e:\\test.txt&quot;</span>);</span><br><span class="line">        <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">read</span> <span class="operator">=</span> chars.length;</span><br><span class="line">        <span class="keyword">while</span> ((read = reader.read(chars)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(chars, <span class="number">0</span>, read));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(reader != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                reader.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将字符串写入到文件中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">FileWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        writer = <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;e:\\test2.txt&quot;</span>);</span><br><span class="line">        writer.write(<span class="string">&quot;On a sultry evening in August, Zhang Yuwei, &quot;</span> +</span><br><span class="line">                     <span class="string">&quot;who works in sales in Shanghai, &quot;</span> +</span><br><span class="line">                     <span class="string">&quot;donned a chiffon shirt and hotpants to attend one of &quot;</span> +</span><br><span class="line">                     <span class="string">&quot;the first performances of the show in Mandarin.&quot;</span>);</span><br><span class="line">        writer.write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        writer.write(<span class="string">&quot;八月的一个闷热的晚上，在上海从事销售工作的张雨薇（音译）穿着雪纺纱T恤和热裤去观看&quot;</span> + <span class="string">&quot;普通话版本的最早的几场演出。&quot;</span>);</span><br><span class="line">        writer.flush();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(writer != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                writer.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复制纯文本文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCopyFile</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">FileWriter</span> <span class="variable">fileWriter</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fileReader = <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;D:\\fakepath\\forge-1.14.4-28.2.23-installer.jar.log&quot;</span>);</span><br><span class="line">        fileWriter = <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;e:\\forge-1.14.4-28.2.23-installer.jar.log&quot;</span>);</span><br><span class="line">        <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="type">int</span> read;</span><br><span class="line">        <span class="keyword">while</span>((read = fileReader.read(chars)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fileWriter.write(chars, <span class="number">0</span>, read);</span><br><span class="line">        &#125;</span><br><span class="line">        fileWriter.flush();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(fileReader != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fileReader.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(fileWriter != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fileWriter.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用缓冲流读取文本中的一行数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 当一个流的构造方法中需要一个流的时候,这个被传进来的流叫做节点流，比如 FileReader</span></span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;e:\\forge-1.14.4-28.2.23-installer.jar.log&quot;</span>);</span><br><span class="line">        <span class="comment">// 外部负责包装的这个流，叫做包装流,还有一个名字叫做处理流，比如 BufferedReader</span></span><br><span class="line">        bufferedReader = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(fr);</span><br><span class="line">        String s;</span><br><span class="line">        <span class="keyword">while</span>((s = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(bufferedReader != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                bufferedReader.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="标准输入输出流"><a href="#标准输入输出流" class="headerlink" title="标准输入输出流"></a>标准输入输出流</h2><p>什么是标准输入输出流，看似没听过，其实经常会使用，而且很频繁。<code>System.in</code> 就是标准输入流，<code>System.out</code> 就是标准输出流。</p><p>默认的标准输入流是通过键盘读取的，标准输出流是输出到控制台的。而最常用的 Scanner 类也只是对标准输入流进行了封装而已。</p><p>默认的标准输入输出流其实是这样的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输入</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> System.in;</span><br><span class="line">in.read();</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="type">PrintStream</span> <span class="variable">out</span> <span class="operator">=</span> System.out;</span><br><span class="line">out.println(<span class="string">&quot;fmisfsdfoidk&quot;</span>);</span><br></pre></td></tr></table></figure><p>既然输入可以用键盘、输出可以打印到控制台上。那肯定是修改成可以通过文件来进行输入、输出结果打印到文件上。</p><p>这是将结果输出到控制台上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ps = <span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;log.txt&quot;</span>));</span><br><span class="line">        System.setOut(ps);</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello BestGuo!&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;世界全由你谱写\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;相处的时间你我已命运相连&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是通过文件的方式读取数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 标准输入流，通过文件的方式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testIn</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    System.setIn(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;log.txt&quot;</span>));</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">        System.out.println(scanner.nextInt());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java 部分 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashMap 实现原理</title>
      <link href="/journal/java-hashmap-principle/"/>
      <url>/journal/java-hashmap-principle/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>HashMap 在我们的实际开发中是非常频繁使用到的一个类，也非常的清楚它保存的是一组键值对。不过，HashMap 在面试当中也是非常高频面试的一个点。经过我的了解及研究，我也开始写一遍日志，来展现我对 HashMap 的一些看法。</p><p>在了解 HashMap 之前，来聊聊哈希表是什么吧。</p><span id="more"></span><h2 id="了解哈希表"><a href="#了解哈希表" class="headerlink" title="了解哈希表"></a>了解哈希表</h2><p>哈希表，再也非常熟悉不过的一种数据结构了。</p><p>它是根据关键码值来直接进行访问的数据结构，也就是说，它通过把关键码值映射到表中一个位置，来访问当前位置的内容，以加快查找的速度。这个映射函数叫做散列函数，存放记录的容器叫做散列表（哈希表）。</p><blockquote><p>码值：可以理解为键的 HashCode 经过哈希算法计算所得元素的位置</p></blockquote><p>一般来说，存放记录的容器是数组。因为数组查询的效率很高，时间复杂度为 O(1) ，随机性也是非常强的。当然，用链表也是可以的，只不过查询的效率低，时间复杂度为 O(n)。</p><p>我并不认同，哈希表就是“数组 + 链表”的结合体，因为我觉得使用链表只是解决哈希冲突的一种解决办法而已。这个问题到后面会提及到。</p><h3 id="哈希算法"><a href="#哈希算法" class="headerlink" title="哈希算法"></a>哈希算法</h3><p>哈希算法并没有固定的一种算法，哈希算法它是一种思想，目的就是算出元素所在的位置。同时，更好的算法让元素在散列的时候尽量变得均匀起来。</p><p>在 Java 中的 HashMap ，它是通过 ( 哈希表的长度 - 1 ) &amp; 哈希值来计算的，也就是通过与运算来算出元素要放的位置。</p><h3 id="哈希冲突"><a href="#哈希冲突" class="headerlink" title="哈希冲突"></a>哈希冲突</h3><p>产生：通过哈希算法得到的下标，被另一个元素所占用，就是哈希冲突了。</p><p>解决办法：开放寻址法、再散列法、链地址法、建立一个公共溢出区。</p><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>在 JDK 1.7 中，它的 HashMap 是通过“数组 + 链表”来实现的。但是到了 1.8 之后，它的实现方式是通过“数组 + 链表 + 红黑树”实现的。</p><h3 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h3><p>这是 HashMap 的哈希表，通过 HashMap 的中的与运算来得到要放置的位置。但是给哈希表分配的长度始终是 2 的 n 次幂来分配空间。</p><p>并且它是通过数组的形式来保存的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The table, initialized on first use, and resized as</span></span><br><span class="line"><span class="comment"> * necessary. When allocated, length is always a power of two.</span></span><br><span class="line"><span class="comment"> * (We also tolerate length zero in some operations to allow</span></span><br><span class="line"><span class="comment"> * bootstrapping mechanics that are currently not needed.)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br></pre></td></tr></table></figure><p>但是，我们在创建 HashMap 的时候并没有指定哈希表的长度，原因是这里面默认创建了一个长度为 16 的哈希表。这个再 HashMap 的常量中、无参的构造方法中都有非常明确的描述。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The default initial capacity - MUST be a power of two.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_INITIAL_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br></pre></td></tr></table></figure><p>然而，无参构造方法中并没有直接初始化这个值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs an empty &lt;tt&gt;HashMap&lt;/tt&gt; with the default initial capacity</span></span><br><span class="line"><span class="comment"> * (16) and the default load factor (0.75).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 HashMap 集合中添加一条数据的时候，会调用 resize 方法，才给它进行扩容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCap</span> <span class="operator">=</span> (oldTab == <span class="literal">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldThr</span> <span class="operator">=</span> threshold;</span><br><span class="line">    <span class="type">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//此处省略......</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (<span class="type">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//此处省略......</span></span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时新的容量就是 <code>DEFAULT_INITIAL_CAPACITY</code> ，也就是 16，同时也计算出阈值，阈值是什么？阈值就是临界值，计算方法是：<code>阈值 = 容量 * 负载因子</code>。就比如，当哈希表的容量为 16 时，阈值为 12 ，当哈希表中元素的个数扩容，它将会将原来的容量扩大到两倍。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newThr = (<span class="type">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br></pre></td></tr></table></figure><p>默认的负载因子为 0.75。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The load factor used when none specified in constructor.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> <span class="variable">DEFAULT_LOAD_FACTOR</span> <span class="operator">=</span> <span class="number">0.75f</span>;</span><br></pre></td></tr></table></figure><p>为什么会取 0.75，因为此时的空间利用率比较高，而且避免了相当多的哈希冲突，使得底层的链表或者是红黑树的高度比较低，提升了空间效率。</p><h3 id="添加键值对"><a href="#添加键值对" class="headerlink" title="添加键值对"></a>添加键值对</h3><p>在向 HashMap 中添加第一组键值对，它是如何添加的呢？</p><p>1、从调用 HashMap 的 put 方法开始，它实际上调用的是 putVal 方法，putVal 共有 5 个参数，分别是，获取 key 的哈希值、key、value、这个键是否存在和是否插入到后结点。</p><blockquote><p>最后一个参数是给 LinkedHashMap（基于链表实现的 HashMap）所使用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、初始化容量，一开始会判断 Node 数组是否为 null。开始肯定是 null，所以肯定会调用 resize 方法初始化容量，且值为 16。</p><p>初始化容量完成之后，然后再去利用与运算得到数组的下标，调用 newNode方法 创建出来的 Node 对象需要放入到数组的哪个位置。而这个位置则通过哈希算法来得到的，在上面也提及到计算方法。 <code>i = (n - 1) &amp; hash</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,</span></span><br><span class="line"><span class="params">               <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, i;</span><br><span class="line">    <span class="comment">// 判断表是否为 null 或者表的长度是否为 0</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">    <span class="comment">// 此处省略很多代码......</span></span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、第一个元素成功的添加进来了，添加完成之后给 HashMap 中键值对的个数 +1 ，如果 HashMap 中键值对的个数超过了阈值，那么将会触发扩容，扩容到原来的两倍。</p><h3 id="不可避免的冲突"><a href="#不可避免的冲突" class="headerlink" title="不可避免的冲突"></a>不可避免的冲突</h3><p>HashMap 按与运算求得的下标位置是会造成哈希冲突的，它的解决办法就是通过链地址法（拉链法）的方式来解决。所以这也是为什么 HashMap 底层数据结构包括数组和链表。</p><p>所以 HashMap 可以想象成是古代皇帝所戴的帽子（<a href="https://www.baidu.com/s?wd=%E5%86%95%E6%97%92">冕旒</a>）。数组就是冕，链表就是帘子。</p><p><img src="https://p1.itc.cn/q_70/images01/20210828/a93b2cc0f0f84010bcc11181b816ff30.png" alt="img" loading="lazy"></p><p>假如哈希表中的第 3 个元素已经存在了一个 A 元素，然而另外一个元素 B 得到的下标也是 3 ，此时通过尾插法的形式，将 B 元素插入到 A 的后面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,</span></span><br><span class="line"><span class="params">               <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, i;</span><br><span class="line">    <span class="comment">// 判断表是否为 null 或者表的长度是否为 0，代码略</span></span><br><span class="line">    <span class="comment">// 判断当前下标的元素是否存在，不存在的代码已经省略</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="comment">// 这段代码拿到的当前的节点以及当前节点的 key</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="comment">// 判断节点的类型是否为树</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="comment">//////// 这是尾插法的关键代码部分 /////////</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">            <span class="comment">// 如果当前元素的下一个节点是空，则插入一个新的节点。</span></span><br><span class="line">            <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                <span class="comment">// 如果数量超过了8，则将链表进行树化，即转成红黑树</span></span><br><span class="line">                <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                    treeifyBin(tab, hash);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            p = e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 此处省略很多代码......</span></span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="变成红黑树的条件"><a href="#变成红黑树的条件" class="headerlink" title="变成红黑树的条件"></a>变成红黑树的条件</h3><p>当链表的长度变为 8 时，此时链表就转换成红黑树。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">8</span>;</span><br></pre></td></tr></table></figure><p>当红黑树的元素个数减为 6 时，此时红黑树又会降成链表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">UNTREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">6</span>;</span><br></pre></td></tr></table></figure><h3 id="获取值"><a href="#获取值" class="headerlink" title="获取值"></a>获取值</h3><p>获取值使用的是 get 方法进行获取，它的获取流程其实和 put 差不多。</p><p>首先进行与运算，与运算完成之后得到的数组下标，比较得到的 key 是否为传入的 key，如果是的话就返回出来，如果不是，在链表或者红黑树中寻找。找到了就返回出去，没找到就返回 null。</p><p>在调用 get 方法时，其实是去调用 getNode 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title function_">getNode</span><span class="params">(<span class="type">int</span> hash, Object key)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="type">int</span> n; K k;</span><br><span class="line">    <span class="comment">// 判断表是否为空</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="literal">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 判断 key 是否为传入的 key 以及哈希值是否相同。</span></span><br><span class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">            ((k = first.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        <span class="comment">// 如果下一个节点不为空的话，有可能是链表，也有可能是红黑树。</span></span><br><span class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果节点是树类型，就在树中查找</span></span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><blockquote><p>下次接着写吧，我先学学它。💫💫</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java 部分 </category>
          
          <category> 深入 Java 的地下世界 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 发布与订阅</title>
      <link href="/journal/redis-pub-sub/"/>
      <url>/journal/redis-pub-sub/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Redis 发布订阅（pub/sub）是一种消息通信模式︰发送者（pub）发送消息，订阅者（sub）接收消息。</p><p>Redis 客户端可以订阅任意数量的频道，其发布与订阅的流程如下图所示。</p><p><img src="/journal/redis-pub-sub/20200518084221361.png" alt="img" loading="lazy"></p><p>当消息发布者发送一旦发送，已经订阅的消息订阅者就会收到信息。</p><span id="more"></span><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol><li>实时消息系统！</li><li>实时聊天!（频道当做聊天室，将信息回显给所有人即可！)</li><li>订阅，关注系统都是可以的！</li></ol><p>它可以做简单的发布与订阅，但是如果业务复杂，Redis 的发布订阅可能就不太适用了，此时需要学习消息中间件（RabbitMQ、RocketMQ 等等）来构建复杂的发布与订阅服务了。</p><h2 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h2><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>发布使用 publish 命令进行发布，然后需要输入频道名称，消息内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PUBLISH xiaohehe hi</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; PUBLISH xiaohehe hello,xiaohehe</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; PUBLISH xiaohehe hello,redis</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; PUBLISH xiaohehe hello,redis</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; PUBLISH xiaohehe hello,redis</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; PUBLISH xiaohehe hello,redis</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><h3 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h3><p>订阅使用 subscribe 命令，比如我要订阅 <code>xixaohehe</code> 这个频道，操作的命令如下。输入完成之后，终端就开始进入订阅模式了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SUBSCRIBE xiaohehe</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) <span class="string">&quot;subscribe&quot;</span></span><br><span class="line">2) <span class="string">&quot;xiaohehe&quot;</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><p>如果发布端发布消息，订阅端就能接收到。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1) <span class="string">&quot;message&quot;</span></span><br><span class="line">2) <span class="string">&quot;xiaohehe&quot;</span></span><br><span class="line">3) <span class="string">&quot;hi&quot;</span></span><br><span class="line">1) <span class="string">&quot;message&quot;</span></span><br><span class="line">2) <span class="string">&quot;xiaohehe&quot;</span></span><br><span class="line">3) <span class="string">&quot;hello,xiaohehe&quot;</span></span><br><span class="line">1) <span class="string">&quot;message&quot;</span></span><br><span class="line">2) <span class="string">&quot;xiaohehe&quot;</span></span><br><span class="line">3) <span class="string">&quot;hello,redis&quot;</span></span><br></pre></td></tr></table></figure><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>Redis 是使用 C 实现的，通过分析Redis源码里的 pubsub.c 文件，了解发布和订阅机制的底层实现，籍此加深对 Redis 的理解。</p><p>Redis 通过 PUBLISH、SUBSCRIBE 和 PSUBSCRIBE 等命令实现发布和订阅功能。</p><p>通过 SUBSCRIBE 命令订阅某频道后，redis-server 里维护了一个字典，字典的键就是一个个频道!，而字典的值则是一个链表，链表中保存了所有订阅这个 channel 的客户端。SUBSCRIBE 命令的关键，就是将客户端添加到给定channel 的订阅链表中。</p><p><img src="/journal/redis-pub-sub/20201214083600592383.png" alt="img" loading="lazy"></p><p>通过 PUBLISH 命令向订阅者发送消息，redis-server 会使用给定的频道作为键，在它所维护的 channel 字典中查找记录了订阅这个频道的所有客户端的链表，遍历这个链表，将消息发布给所有订阅者。</p><p>Pub/Sub 从字面上理解就是发布（Publish）与订阅（Subscribe），在 Redis 中，你可以设定对某一个 key 值进行消息发布及消息订阅，当一个 key 值上进行了消息发布后，所有订阅它的客户端都会收到相应的消息。这一功能最明显的用法就是用作实时消息系统，比如普通的即时聊天，群聊等功能。</p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Redis 的学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 持久化</title>
      <link href="/journal/redis-persistence/"/>
      <url>/journal/redis-persistence/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Redis 是内存数据库，如果不将内存中的数据库状态保存到磁盘，那么一旦服务器进程退出，服务器中的数据库状态也会消失。 对此，Redis 提供了持久化功能！</p><p>Redis 数据持久化共有两种数据，分别是 RDB 和 AOF。接下来看看那这两种持久化方式有什么异同。</p><span id="more"></span><h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><p>RDB 全称也叫 Redis Database</p><p>在指定的时间间隔内将内存中的数据集快照写入磁盘，也就是行话讲的Snapshot快照，它恢复时是将快照文件直接读到内存里。Redis 使用 RDB 的持久化流程如下。</p><p><img src="/journal/redis-persistence/F202004281588086055367603.png" alt="img" loading="lazy"></p><p>Redis 会单独创建（fork） 一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上一次的持久化文件。</p><p>在整个过程中，主进程是不进行任何 IO 操作的。这就确保了极高的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那 RDB 方式要比 AOF 方式更加的高效。</p><p>RDB 的缺点是最后一次持久化后的数据可能丢失。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>当时间到多少秒时，如果 redis 数据发生了至少几次变化，则执行 bgsave</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Save the DB to disk.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># save &lt;seconds&gt; &lt;changes&gt;</span></span><br><span class="line">save 60 5</span><br></pre></td></tr></table></figure><h3 id="触发机制"><a href="#触发机制" class="headerlink" title="触发机制"></a>触发机制</h3><ul><li>在 save 的规则满足的情况下，会自动触发 rdb 规则</li><li>执行 flushdb，也会触发 rdb 规则</li><li>退出 redis ，也会生成 rdb 文件</li></ul><h3 id="如何恢复"><a href="#如何恢复" class="headerlink" title="如何恢复"></a>如何恢复</h3><ul><li><p>只需要将 rdb 文件放在我们 redis 启动目录就可以，redis 启动的时候会自动检查 dump.rdb 恢复其中的数据</p></li><li><p>查看需要存在的位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt;config get <span class="built_in">dir</span></span><br><span class="line">1) <span class="string">&quot;dir&quot;</span></span><br><span class="line">2) <span class="string">&quot;/usr/loca1/bin” # 如果在这个目录下存在 dump.rdb 文件，启动就会自动恢复其中的数据</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>适合大规模的数据恢复</li><li>对数据的完整性不高</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>需要一定的时间间隔去操作，如果 Redis 崩了，那么最后一次修改数据就没有了。</li><li>fork 进程的时候，会占用一定的内存。</li></ul><h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h2><p>AOF 全称是 Appnd Only File。</p><p>它其实是日志，但是通过日志形式来记录每个写操作，将 Redis 执行过的所有指令记录下来（读操作不记录），只许追加文件但不可以改写文件，Redis 启动之初会读取该文件重新构建数据，换言之， Redis 重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。</p><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>默认是不开启的，需要手动进行配置，将其开启。我们只需要将 appendonly 改为 yes 就开启了 aof !</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">appendonly <span class="built_in">yes</span></span><br><span class="line"><span class="comment"># The name of the append only file (default: &quot;appendonly.aof&quot;)</span></span><br><span class="line">appendfilename <span class="string">&quot;appendonly.aof&quot;</span></span><br></pre></td></tr></table></figure><h3 id="如何修复"><a href="#如何修复" class="headerlink" title="如何修复"></a>如何修复</h3><p>由于 AOF 是记录写操作的，如果这个文件被破坏，那么我们可以这样修复，即使用 <code>redis-check-aof</code> 命令来修复。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">D:\Development\Redis&gt;redis-check-aof.exe --fix appendonly.aof</span><br><span class="line">0x              f6: Expected prefix <span class="string">&#x27;*&#x27;</span>, got: <span class="string">&#x27;f&#x27;</span></span><br><span class="line">AOF analyzed: size=267, ok_up_to=246, ok_up_to_line=51, diff=21</span><br><span class="line">This will shrink the AOF from 267 bytes, with 21 bytes, to 246 bytes</span><br><span class="line">Continue? [y/N]: y</span><br><span class="line">Successfully truncated AOF</span><br></pre></td></tr></table></figure><h3 id="重写规则"><a href="#重写规则" class="headerlink" title="重写规则"></a>重写规则</h3><p>AOF 默认就是文件的无限追加，文件会越来越大！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Automatic rewrite of the append only file.</span></span><br><span class="line"><span class="comment"># Redis is able to automatically rewrite the log file implicitly calling</span></span><br><span class="line"><span class="comment"># BGREWRITEAOF when the AOF log size grows by the specified percentage.</span></span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br></pre></td></tr></table></figure><p>如果超过 64 mb，那么就创建一个新文件。</p><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ul><li>每一次修改都同步，文件的完整会更加好</li><li>每秒同步一次，可能会丢失一秒的数据</li><li>从不同步，效率最高的!</li></ul><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ul><li>相对于数据文件来说，AOF 远远大于 RDB，修复的速度也比 RDB 慢！</li><li>AOF 运行效率也要比rdb慢，所以我们 Redis 默认的配置就是 RDB 持久化！</li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>RDB 持久化方式能够在指定的时间间隔内对你的数据进行快照存储</li><li>AOF 持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始的数据，</li><li>AOF 命令以 Redis 协议追加保存每次写的操作到文件末尾，Redis 还能对 AOF 文件进行后台重写，使得 AOF 文件的体积不至于过大。</li><li>只做缓存，如果你只希望你的数据在服务器运行的时候存在，你也可以不使用任何持久化</li><li>如果同时开启两种持久化方式<ul><li>在这种情况下，当 redis 重启的时候会优先载入 AOF 文件来恢复原始的数据，因为在通常情况下 AOF 文件保存的数据集要比 RDB 文件保存的数据集要完整。</li><li>RDB 的数据不实时，同时使用两者时服务器重启也只会找 AOF 文件，那要不要只使用 AOF 呢？作者建议不要，因为RDB更适合用于备份数据库（AOF在不断变化不好备份），快速重启，而且不会有 AOF 可能潜在的 Bug，留着作为一个万一的手段。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Redis 的学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 事务</title>
      <link href="/journal/redis-transaction/"/>
      <url>/journal/redis-transaction/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一组命令的集合，一个事务中的所有命令都会被序列化，在事务执行过程的中，会按照顺序执行。一次性、顺序性、排他性。执行一些列的命令。</p><p>Redis单条命令是保持原子性的，但是事务不保证原子性！</p><p>redis的事务总共三步</p><ul><li>开启事务（multi）</li><li>命令入队（……）</li><li>执行事务（exec）</li></ul><span id="more"></span><h2 id="事务执行"><a href="#事务执行" class="headerlink" title="事务执行"></a>事务执行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">set</span> name xiaohehe</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; mset age 18 house 123 gender 0</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; get name</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; get age</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; mget name age gender</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">exec</span></span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br><span class="line">3) <span class="string">&quot;xiaohehe&quot;</span></span><br><span class="line">4) <span class="string">&quot;18&quot;</span></span><br><span class="line">5) 1) <span class="string">&quot;xiaohehe&quot;</span></span><br><span class="line">   2) <span class="string">&quot;18&quot;</span></span><br><span class="line">   3) <span class="string">&quot;0&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="取消事务"><a href="#取消事务" class="headerlink" title="取消事务"></a>取消事务</h2><p>discard 用于取消事务，事务一旦取消，事务命令中的命令都不会执行了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">set</span> name xiaohehe</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; mset age 18 house 123 gender 0</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; get name</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; get age</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; mget name age gender</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">exec</span></span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br><span class="line">3) <span class="string">&quot;xiaohehe&quot;</span></span><br><span class="line">4) <span class="string">&quot;18&quot;</span></span><br><span class="line">5) 1) <span class="string">&quot;xiaohehe&quot;</span></span><br><span class="line">   2) <span class="string">&quot;18&quot;</span></span><br><span class="line">   3) <span class="string">&quot;0&quot;</span></span><br></pre></td></tr></table></figure><h2 id="事务异常"><a href="#事务异常" class="headerlink" title="事务异常"></a>事务异常</h2><h3 id="编译型异常"><a href="#编译型异常" class="headerlink" title="编译型异常"></a>编译型异常</h3><p>代码有问题，命令有错! ，事务中所有的命令都不会被执行！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; incr age</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; get age</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; lpush like dancing singing running basketball</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; lrange like <span class="comment"># 语法错误</span></span><br><span class="line">(error) ERR wrong number of arguments <span class="keyword">for</span> <span class="string">&#x27;lrange&#x27;</span> <span class="built_in">command</span></span><br><span class="line">127.0.0.1:6379(TX)&gt; lrange like 0 -1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">exec</span></span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br></pre></td></tr></table></figure><h3 id="运行时异常"><a href="#运行时异常" class="headerlink" title="运行时异常"></a>运行时异常</h3><p>如果事务队列中存在语法性，那么执行命令的时候，其他命令式可以正常执行的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; lrange like 0 -1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; linsert like after dance car</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; lindex like 10</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; incr name</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">exec</span></span><br><span class="line">1) (empty array)</span><br><span class="line">2) (<span class="built_in">integer</span>) 0</span><br><span class="line">3) (nil)</span><br><span class="line">4) (error) ERR value is not an <span class="built_in">integer</span> or out of rang</span><br></pre></td></tr></table></figure><h2 id="监视"><a href="#监视" class="headerlink" title="监视"></a>监视</h2><p>使用 watch 指令监视某一个变量。主要场景是利用 watch 实现一个乐观锁。</p><p>悲观锁︰</p><ul><li>很悲观，认为什么时候都会出问题，无论做什么都会加锁！</li></ul><p>乐观锁∶</p><ul><li><p>很乐观，认为什么时候都不会出问题，所以不会上锁。更新数据的时候去判断一下，在此期间是否有人修改过这个数据。</p></li><li><p>获取 version</p></li><li><p>更新的时候比较 version，如果 version 发生变化，则更新失败，否则更新成功。</p></li></ul><h3 id="正常过程"><a href="#正常过程" class="headerlink" title="正常过程"></a>正常过程</h3><p>这个例子模拟了付款的过程。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> money 1000</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> out 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; watch money</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; decrby money 10</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; incrby out 10</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">exec</span></span><br><span class="line">1) (<span class="built_in">integer</span>) 990</span><br><span class="line">2) (<span class="built_in">integer</span>) 10</span><br></pre></td></tr></table></figure><p>事务执行完成，执行正常。</p><h3 id="修改失败过程"><a href="#修改失败过程" class="headerlink" title="修改失败过程"></a>修改失败过程</h3><p>第一个终端的操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; watch money</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; decrby money 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; incrby out 20</span><br><span class="line">QUEUED</span><br></pre></td></tr></table></figure><p>此时又启动一个终端，直接修改了 money 的值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get money</span><br><span class="line"><span class="string">&quot;990&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; incrby money 30</span><br><span class="line">(<span class="built_in">integer</span>) 1020</span><br></pre></td></tr></table></figure><p>最后回到第一个终端，执行事务，输出的结果为 nil，输出为 nil。由于 money 发生了改变，导致了这个 money 的 version 发生改变，所以该事务的操作都是无效的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">exec</span></span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><p>由于事务执行完成，导致当前的监视已经失效，需要重新监视，重新监视的目的就是获取新的 version。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; UNWATCH</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; WATCH money</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Redis 的学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 基本数据类型的操作</title>
      <link href="/journal/redis-type-of-data/"/>
      <url>/journal/redis-type-of-data/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Redis 有这些数据类型，基本数据类型：String、List、Hash、Set、Zset，特殊的数据类型：Geospatial、Hyperloglog、Bitmap。</p><p>命令并未包含全部的，可供参考，要查询更多命令，请<a href="http://www.redis.cn/commands.htm">点此</a>。</p><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>String，也叫字符串，是基本的数据类型之一。</p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><p>设置值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name xiaohehe</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><h4 id="get"><a href="#get" class="headerlink" title="get"></a>get</h4><p>获得值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line"><span class="string">&quot;xiaohehe&quot;</span></span><br></pre></td></tr></table></figure><span id="more"></span><h4 id="append"><a href="#append" class="headerlink" title="append"></a>append</h4><p>追加字符串，如果当前 key 不存在，它的用法和 set 命令一样。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; append name 2021</span><br><span class="line">(<span class="built_in">integer</span>) 12</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line"><span class="string">&quot;xiaohehe2021&quot;</span></span><br></pre></td></tr></table></figure><h4 id="strlen"><a href="#strlen" class="headerlink" title="strlen"></a>strlen</h4><p>得到字符串的长度</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; strlen name</span><br><span class="line">(<span class="built_in">integer</span>) 12</span><br></pre></td></tr></table></figure><h4 id="mset"><a href="#mset" class="headerlink" title="mset"></a>mset</h4><p>设置多组 key : value</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; mset age 23 sex 0 address bestguo.top</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><h4 id="mget"><a href="#mget" class="headerlink" title="mget"></a>mget</h4><p>输入多个 key，获取对应的 value</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; mget age sex address</span><br><span class="line">1) <span class="string">&quot;23&quot;</span></span><br><span class="line">2) <span class="string">&quot;0&quot;</span></span><br><span class="line">3) <span class="string">&quot;bestguo.top&quot;</span></span><br></pre></td></tr></table></figure><h4 id="getset"><a href="#getset" class="headerlink" title="getset"></a>getset</h4><p>获取 key 中的值并替换 key 中的值，如果 key 在数据库不存在，则返回 null，并且给 key 设置值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; getset name2 1111</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; get name2</span><br><span class="line"><span class="string">&quot;1111&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; getset age 18</span><br><span class="line"><span class="string">&quot;23&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get age</span><br><span class="line"><span class="string">&quot;18&quot;</span></span><br></pre></td></tr></table></figure><h3 id="截取与替换"><a href="#截取与替换" class="headerlink" title="截取与替换"></a>截取与替换</h3><h4 id="getrange"><a href="#getrange" class="headerlink" title="getrange"></a>getrange</h4><p>提取字符串中介于两个指定下标之间的字符，类比 substring</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; getrange name 0 3</span><br><span class="line"><span class="string">&quot;xiao&quot;</span></span><br></pre></td></tr></table></figure><h4 id="setrange"><a href="#setrange" class="headerlink" title="setrange"></a>setrange</h4><p>替换指定位置开始的字符串位置，并且之后的字符会被替换掉</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line"><span class="string">&quot;xiaxiaoe2021&quot;</span></span><br></pre></td></tr></table></figure><h3 id="同时设置"><a href="#同时设置" class="headerlink" title="同时设置"></a>同时设置</h3><h4 id="setex"><a href="#setex" class="headerlink" title="setex"></a>setex</h4><p>设置值的时候，同时设置过期时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; setex tel 10 123456789</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get tel</span><br><span class="line"><span class="string">&quot;123456789&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ttl tel</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; ttl tel</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; ttl tel</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; ttl tel</span><br><span class="line">(<span class="built_in">integer</span>) -2</span><br><span class="line">127.0.0.1:6379&gt; get tel</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><h4 id="setnx"><a href="#setnx" class="headerlink" title="setnx"></a>setnx</h4><p>key 不存在时，则设置值，反之则不设置值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; setex tel 10 123456789</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; setnx tel 111</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setnx tel 111</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setnx tel 111</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; get tel</span><br><span class="line"><span class="string">&quot;111&quot;</span></span><br></pre></td></tr></table></figure><h4 id="msetnx"><a href="#msetnx" class="headerlink" title="msetnx"></a>msetnx</h4><p>设置多个值的时候，同时设置过期时间。他是一个原子性的操作，要么一起成功，要么一起失败。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 由于house不存在，肯定设置失败</span></span><br><span class="line">127.0.0.1:6379&gt; msetnx name xiaohehe2020 house 111</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; get house</span><br><span class="line">(nil)</span><br><span class="line"><span class="comment"># 之前我把 tel 的值给删除了，然后再重新设置值，此时都设置成功了</span></span><br><span class="line">127.0.0.1:6379&gt; msetnx tel 1234 house 111</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; mget tel house</span><br><span class="line">1) <span class="string">&quot;1234&quot;</span></span><br><span class="line">2) <span class="string">&quot;111&quot;</span></span><br></pre></td></tr></table></figure><h3 id="增加与减少"><a href="#增加与减少" class="headerlink" title="增加与减少"></a>增加与减少</h3><h4 id="incr"><a href="#incr" class="headerlink" title="incr"></a>incr</h4><p>自增命令，每次增加1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get age</span><br><span class="line"><span class="string">&quot;18&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; incr age</span><br><span class="line">(<span class="built_in">integer</span>) 19</span><br><span class="line"><span class="comment"># 不能是英文</span></span><br><span class="line">127.0.0.1:6379&gt; getset age a</span><br><span class="line"><span class="string">&quot;19&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; incr age</span><br><span class="line">(error) ERR value is not an <span class="built_in">integer</span> or out of range</span><br></pre></td></tr></table></figure><h4 id="decr"><a href="#decr" class="headerlink" title="decr"></a>decr</h4><p>自减命令，每次减少1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; decr age</span><br><span class="line">(<span class="built_in">integer</span>) 18</span><br></pre></td></tr></table></figure><h4 id="incrby"><a href="#incrby" class="headerlink" title="incrby"></a>incrby</h4><p>增加命令，指定设置自增量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; incrby age 10</span><br><span class="line">(<span class="built_in">integer</span>) 28</span><br></pre></td></tr></table></figure><h4 id="decrby"><a href="#decrby" class="headerlink" title="decrby"></a>decrby</h4><p>减少命令，指定设置自减量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; decrby age 8</span><br><span class="line">(<span class="built_in">integer</span>) 20</span><br></pre></td></tr></table></figure><h3 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h3><p>设置 user1 对象，值为 json 字符串来保存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> user:1 &#123;name: zhangsan, age: 3&#125;</span><br><span class="line"><span class="built_in">set</span> user:1:name zhangsan user:1:age 3</span><br></pre></td></tr></table></figure><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>计数器</li><li>对象缓存存储</li></ul><h4 id="对象缓存存储"><a href="#对象缓存存储" class="headerlink" title="对象缓存存储"></a>对象缓存存储</h4><p>将结构体 json 序列化成字符串，然后将字符串保存在 redis 的 value 中，将结构体的业务唯一标示作为 key；这种保存 json 的用法用的最多的场景就是缓存用户信息，将用户 bean 信息转成 json 再序列化为字符串作为 value保存在 redis 中，将用户 id 作为 key。从代码中获取用户缓存信息就是一个逆过程，根据 userid 作为 key 获取到结构体 json，然后将 json 转成 java bean。</p><p>比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set user.10001 &#123;“id”:”10001”,”name”:”monkey”&#125;</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><h4 id="计数功能"><a href="#计数功能" class="headerlink" title="计数功能"></a>计数功能</h4><p>redis 是单线程模式，并且 redis 将很多常用的事务操作进行了封装，这里我们最常用的就是数值自增或自减，redis 的作者封装了 incr 可以进行自增，没调用一次自增1，因为 redis 是单线程运行，所以就算 client 是多线程调用那么也是正确自增，因为 incr 命令中将 read 和 write 做了事务封装。同样可以设置 incr 的 step，每次根据 step 进行自增，当然如果要达到自减的效果，那么只要将 step 设置为负数就可以了。</p><p>计数功能使用的场景很多，我们之前经常用在实时计数统计场景，也用在过库存场景、限流计数场景等等，而且redis 的性能也是非常高的，对于一般的并发量没那么高的系统都是适用的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set num 1</span><br><span class="line">127.0.0.1:6379&gt; incr num</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; incrby num 2</span><br><span class="line">(integer) 4</span><br></pre></td></tr></table></figure><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>List，也叫列表，是基本的数据类型之一，Redis 的列表可以当成栈、队列。因为有这些操作命令。在 Redis 中，它的实现方式是双向链表。因此，它有双向链表的特点。</p><blockquote><p>提示：绝大部分的 List 命令都是由 L 开头的。</p></blockquote><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><h4 id="lpush"><a href="#lpush" class="headerlink" title="lpush"></a>lpush</h4><p>从第一个位置插入元素</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lpush words one two three four</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br></pre></td></tr></table></figure><h4 id="lrange"><a href="#lrange" class="headerlink" title="lrange"></a>lrange</h4><p>通过区间取得元素</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange words 0 -1</span><br><span class="line">1) <span class="string">&quot;four&quot;</span></span><br><span class="line">2) <span class="string">&quot;three&quot;</span></span><br><span class="line">3) <span class="string">&quot;two&quot;</span></span><br><span class="line">4) <span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrange words 0 2</span><br><span class="line">1) <span class="string">&quot;four&quot;</span></span><br><span class="line">2) <span class="string">&quot;three&quot;</span></span><br><span class="line">3) <span class="string">&quot;two&quot;</span></span><br></pre></td></tr></table></figure><h4 id="rpush"><a href="#rpush" class="headerlink" title="rpush"></a>rpush</h4><p>从最后一个位置插入元素</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange words 0 -1</span><br><span class="line">1) <span class="string">&quot;four&quot;</span></span><br><span class="line">2) <span class="string">&quot;three&quot;</span></span><br><span class="line">3) <span class="string">&quot;two&quot;</span></span><br><span class="line">4) <span class="string">&quot;one&quot;</span></span><br><span class="line">5) <span class="string">&quot;five&quot;</span></span><br></pre></td></tr></table></figure><h3 id="移除"><a href="#移除" class="headerlink" title="移除"></a>移除</h3><h4 id="lpop"><a href="#lpop" class="headerlink" title="lpop"></a>lpop</h4><p>从第一个位置移除元素</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lpop words</span><br><span class="line"><span class="string">&quot;four&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrange words 0 -1</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;one&quot;</span></span><br><span class="line">4) <span class="string">&quot;five&quot;</span></span><br><span class="line"><span class="comment"># 从第一个位置开始，移除2个元素</span></span><br><span class="line">127.0.0.1:6379&gt; lpop words 2</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrange words 0 -1</span><br><span class="line">1) <span class="string">&quot;five&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br></pre></td></tr></table></figure><h4 id="rpop"><a href="#rpop" class="headerlink" title="rpop"></a>rpop</h4><p>从最后一个位置移除元素</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rpop words</span><br><span class="line"><span class="string">&quot;one&quot;</span></span><br></pre></td></tr></table></figure><h3 id="两者结合"><a href="#两者结合" class="headerlink" title="两者结合"></a>两者结合</h3><h4 id="rpoplpush"><a href="#rpoplpush" class="headerlink" title="rpoplpush"></a>rpoplpush</h4><p>从最后一个位置移除元素，将该元素放到另一个列表中的第一个位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rpoplpush words words2</span><br><span class="line"><span class="string">&quot;five&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrange words 0 -1</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; lrange words2 0 -1</span><br><span class="line">1) <span class="string">&quot;five&quot;</span></span><br></pre></td></tr></table></figure><h3 id="其它命令"><a href="#其它命令" class="headerlink" title="其它命令"></a>其它命令</h3><blockquote><p>现在，words 中有以下内容：five,four,three,two,one</p></blockquote><h4 id="lindex"><a href="#lindex" class="headerlink" title="lindex"></a>lindex</h4><p>指定下标获取元素</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lindex words 1</span><br><span class="line"><span class="string">&quot;four&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lindex words 0</span><br><span class="line"><span class="string">&quot;five&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lindex words -2</span><br><span class="line"><span class="string">&quot;two&quot;</span></span><br></pre></td></tr></table></figure><h4 id="llen"><a href="#llen" class="headerlink" title="llen"></a>llen</h4><p>获取列表的长度</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; llen words</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br></pre></td></tr></table></figure><h4 id="lrem"><a href="#lrem" class="headerlink" title="lrem"></a>lrem</h4><p>移除列表中指定的元素，需要指定个数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rpush words two</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; lrem words 2 two</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br></pre></td></tr></table></figure><h4 id="ltrim"><a href="#ltrim" class="headerlink" title="ltrim"></a>ltrim</h4><p>通过下标截取指定的长度，这个 list 已经被改变了、截断了只剩下截取的元素！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ltrim words 0 2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lrange words 0 -1</span><br><span class="line">1) <span class="string">&quot;five&quot;</span></span><br><span class="line">2) <span class="string">&quot;four&quot;</span></span><br><span class="line">3) <span class="string">&quot;three&quot;</span></span><br></pre></td></tr></table></figure><h4 id="exists"><a href="#exists" class="headerlink" title="exists"></a>exists</h4><p>判断列表是否存在</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; exists words</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><h4 id="lset"><a href="#lset" class="headerlink" title="lset"></a>lset</h4><p>指定列表中的下标设置元素，如果列表是空的，则会插入失败</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lset words 0 five</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lrange words 0 -1</span><br><span class="line">1) <span class="string">&quot;five&quot;</span></span><br><span class="line">2) <span class="string">&quot;three&quot;</span></span><br><span class="line">3) <span class="string">&quot;two&quot;</span></span><br><span class="line">4) <span class="string">&quot;one&quot;</span></span><br><span class="line">5) <span class="string">&quot;two&quot;</span></span><br></pre></td></tr></table></figure><h4 id="linsert"><a href="#linsert" class="headerlink" title="linsert"></a>linsert</h4><p>在指定的位置插入一个元素，可以在目标位置之前，也可以在目标位置之后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 three 之前添加 six</span></span><br><span class="line">127.0.0.1:6379&gt; linsert words before three six</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; lrange words 0 -1</span><br><span class="line">1) <span class="string">&quot;five&quot;</span></span><br><span class="line">2) <span class="string">&quot;six&quot;</span></span><br><span class="line">3) <span class="string">&quot;three&quot;</span></span><br><span class="line">4) <span class="string">&quot;two&quot;</span></span><br><span class="line">5) <span class="string">&quot;one&quot;</span></span><br><span class="line">6) <span class="string">&quot;two&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; linsert words after one seven</span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line"><span class="comment"># 在 one 之后添加 seven</span></span><br><span class="line">127.0.0.1:6379&gt; lrange words 0 -1</span><br><span class="line">1) <span class="string">&quot;five&quot;</span></span><br><span class="line">2) <span class="string">&quot;six&quot;</span></span><br><span class="line">3) <span class="string">&quot;three&quot;</span></span><br><span class="line">4) <span class="string">&quot;two&quot;</span></span><br><span class="line">5) <span class="string">&quot;one&quot;</span></span><br><span class="line">6) <span class="string">&quot;seven&quot;</span></span><br><span class="line">7) <span class="string">&quot;two&quot;</span></span><br></pre></td></tr></table></figure><h4 id="lmove"><a href="#lmove" class="headerlink" title="lmove"></a>lmove</h4><p>将列表中的指定的元素移动到另外一个列表中。需要指定从列表的哪一边，移动到另一个列表的哪一边。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从列表的左边取出一个元素，再移入到另一个列表的左边。</span></span><br><span class="line">127.0.0.1:6379&gt; lmove words words2 left left</span><br><span class="line"><span class="string">&quot;five&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrange words2 0 -1</span><br><span class="line">1) <span class="string">&quot;five&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lmove words words2 left left</span><br><span class="line"><span class="string">&quot;six&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrange words2 0 -1</span><br><span class="line">1) <span class="string">&quot;six&quot;</span></span><br><span class="line">2) <span class="string">&quot;five&quot;</span></span><br><span class="line"><span class="comment"># 从列表的左边取出一个元素，再移入到另一个列表的左边。</span></span><br><span class="line">127.0.0.1:6379&gt; lmove words words2 left right</span><br><span class="line"><span class="string">&quot;three&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrange words2 0 -1</span><br><span class="line">1) <span class="string">&quot;six&quot;</span></span><br><span class="line">2) <span class="string">&quot;five&quot;</span></span><br><span class="line">3) <span class="string">&quot;three&quot;</span></span><br><span class="line"><span class="comment"># 从列表的右边取出一个元素，再移入到另一个列表的左边。</span></span><br><span class="line">127.0.0.1:6379&gt; lmove words words2 right left</span><br><span class="line"><span class="string">&quot;two&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrange words2 0 -1</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;six&quot;</span></span><br><span class="line">3) <span class="string">&quot;five&quot;</span></span><br><span class="line">4) <span class="string">&quot;three&quot;</span></span><br><span class="line"><span class="comment"># 从列表的右边取出一个元素，再移入到另一个列表的右边。</span></span><br><span class="line">127.0.0.1:6379&gt; lmove words words2 right right</span><br><span class="line"><span class="string">&quot;seven&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrange words2 0 -1</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;six&quot;</span></span><br><span class="line">3) <span class="string">&quot;five&quot;</span></span><br><span class="line">4) <span class="string">&quot;three&quot;</span></span><br><span class="line">5) <span class="string">&quot;seven&quot;</span></span><br></pre></td></tr></table></figure><h3 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>队列</li><li>秒杀</li></ul><h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><p>将需要延后处理的任务结构体序列化成字符串塞进 Redis 的列表，另一个线程从这个列表中轮询数据进行处理。</p><h4 id="秒杀"><a href="#秒杀" class="headerlink" title="秒杀"></a>秒杀</h4><p>在商品秒杀场景最怕的就是商品超卖，为了解决超卖问题，我们经常会将库存商品缓存到类似 MQ 的队列中，多线程的购买请求都是从队列中取，取完了就卖完了，但是用 MQ 处理的化有点重，这里就可以使用 redis 的 list 数据类型来实现，在秒杀前将本场秒杀的商品放到list中，因为 list 的 pop 操作是原子性的，所以即使有多个用户同时请求，也是依次 pop，list 空了 pop 抛出异常就代表商品卖完了。</p><p>比如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; rpush goods:cola cola cola cola</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">&gt; lpop goods:cola</span><br><span class="line"><span class="string">&quot;cola&quot;</span></span><br><span class="line">&gt; lpop goods:cola</span><br><span class="line"><span class="string">&quot;cola&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>Set，也叫集合，是基本的数据类型之一，集合中的元素不重复且无序。</p><blockquote><p>提示：所有的 Set 命令都是由 s 开头的。</p></blockquote><h3 id="基本操作-1"><a href="#基本操作-1" class="headerlink" title="基本操作"></a>基本操作</h3><h4 id="sadd"><a href="#sadd" class="headerlink" title="sadd"></a>sadd</h4><p>添加一组元素</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd s1 b g a o f c</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br></pre></td></tr></table></figure><h4 id="scard"><a href="#scard" class="headerlink" title="scard"></a>scard</h4><p>获取 set 集合中的内容元素个数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; scard s1</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br></pre></td></tr></table></figure><h4 id="smembers"><a href="#smembers" class="headerlink" title="smembers"></a>smembers</h4><p>查看指定 set 集合中的所有元素</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; smembers s1</span><br><span class="line">1) <span class="string">&quot;o&quot;</span></span><br><span class="line">2) <span class="string">&quot;a&quot;</span></span><br><span class="line">3) <span class="string">&quot;b&quot;</span></span><br><span class="line">4) <span class="string">&quot;c&quot;</span></span><br><span class="line">5) <span class="string">&quot;g&quot;</span></span><br><span class="line">6) <span class="string">&quot;f&quot;</span></span><br></pre></td></tr></table></figure><h4 id="sismember"><a href="#sismember" class="headerlink" title="sismember"></a>sismember</h4><p>判断某一个值是不是在 set 集合中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; smembers s1</span><br><span class="line">1) <span class="string">&quot;o&quot;</span></span><br><span class="line">2) <span class="string">&quot;a&quot;</span></span><br><span class="line">3) <span class="string">&quot;b&quot;</span></span><br><span class="line">4) <span class="string">&quot;c&quot;</span></span><br><span class="line">5) <span class="string">&quot;g&quot;</span></span><br><span class="line">6) <span class="string">&quot;f&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; sismember s1 s</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; sismember s1 a</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><h4 id="srandmember"><a href="#srandmember" class="headerlink" title="srandmember"></a>srandmember</h4><p>随机抽取元素，默认取出一个。可以指定取出多个元素。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 取出一个元素</span></span><br><span class="line">127.0.0.1:6379&gt; srandmember s1</span><br><span class="line"><span class="string">&quot;f&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; srandmember s1</span><br><span class="line"><span class="string">&quot;g&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; srandmember s1</span><br><span class="line"><span class="string">&quot;o&quot;</span></span><br><span class="line"><span class="comment"># 取出多个元素</span></span><br><span class="line">127.0.0.1:6379&gt; srandmember s1 3</span><br><span class="line">1) <span class="string">&quot;g&quot;</span></span><br><span class="line">2) <span class="string">&quot;c&quot;</span></span><br><span class="line">3) <span class="string">&quot;a&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; srandmember s1 3</span><br><span class="line">1) <span class="string">&quot;g&quot;</span></span><br><span class="line">2) <span class="string">&quot;c&quot;</span></span><br><span class="line">3) <span class="string">&quot;f&quot;</span></span><br></pre></td></tr></table></figure><h4 id="spop"><a href="#spop" class="headerlink" title="spop"></a>spop</h4><p>随机弹出一个元素</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; spop s1</span><br><span class="line"><span class="string">&quot;g&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; spop s1</span><br><span class="line"><span class="string">&quot;b&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; smembers s1</span><br><span class="line">1) <span class="string">&quot;o&quot;</span></span><br><span class="line">2) <span class="string">&quot;c&quot;</span></span><br><span class="line">3) <span class="string">&quot;a&quot;</span></span><br><span class="line">4) <span class="string">&quot;f&quot;</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h4 id="smove"><a href="#smove" class="headerlink" title="smove"></a>smove</h4><p>将集合中的指定的元素移动到另外一个集合中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; smembers s1</span><br><span class="line">1) <span class="string">&quot;o&quot;</span></span><br><span class="line">2) <span class="string">&quot;c&quot;</span></span><br><span class="line">3) <span class="string">&quot;a&quot;</span></span><br><span class="line">4) <span class="string">&quot;f&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; smove s1 s2 c</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; smembers s2</span><br><span class="line">1) <span class="string">&quot;c&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; smembers s1</span><br><span class="line">1) <span class="string">&quot;o&quot;</span></span><br><span class="line">2) <span class="string">&quot;a&quot;</span></span><br><span class="line">3) <span class="string">&quot;f&quot;</span></span><br></pre></td></tr></table></figure><h3 id="相关运算"><a href="#相关运算" class="headerlink" title="相关运算"></a>相关运算</h3><blockquote><p>假设 s1 中有 “o”、”b”、”c”、”a”、”f” 5 个元素，s2 中有 “c”、”e”、”d”、”f” 4 个元素。</p></blockquote><p>集合中的运算分别有三种，分别是交集，并集和差集。</p><h4 id="sdiff"><a href="#sdiff" class="headerlink" title="sdiff"></a>sdiff</h4><p>计算两个元素的差集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sdiff s1 s2</span><br><span class="line">1) <span class="string">&quot;a&quot;</span></span><br><span class="line">2) <span class="string">&quot;o&quot;</span></span><br><span class="line">3) <span class="string">&quot;b&quot;</span></span><br></pre></td></tr></table></figure><h4 id="sinter"><a href="#sinter" class="headerlink" title="sinter"></a>sinter</h4><p>计算两个元素的交集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sinter s1 s2</span><br><span class="line">1) <span class="string">&quot;c&quot;</span></span><br><span class="line">2) <span class="string">&quot;f&quot;</span></span><br></pre></td></tr></table></figure><h4 id="sunion"><a href="#sunion" class="headerlink" title="sunion"></a>sunion</h4><p>计算两个元素的并集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sunion s1 s2</span><br><span class="line">1) <span class="string">&quot;d&quot;</span></span><br><span class="line">2) <span class="string">&quot;e&quot;</span></span><br><span class="line">3) <span class="string">&quot;o&quot;</span></span><br><span class="line">4) <span class="string">&quot;b&quot;</span></span><br><span class="line">5) <span class="string">&quot;c&quot;</span></span><br><span class="line">6) <span class="string">&quot;a&quot;</span></span><br><span class="line">7) <span class="string">&quot;f&quot;</span></span><br></pre></td></tr></table></figure><h3 id="使用场景-去重"><a href="#使用场景-去重" class="headerlink" title="使用场景 - 去重"></a>使用场景 - 去重</h3><p>redis 的 set 相当于 java 中的 HashSet，内部的健值是无序唯一的，相当于一个 HashMap，但是 value 都是null。set 数据类型其实没什么好讲的，使用场景也是比较单一的，就是用在一些去重的场景里，例如每个用户只能参与一次活动、一个用户只能中奖一次等等去重场景。</p><h2 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h2><p>Hash 是什么呢？就类似于 Java 中的 Map 集合。Map 集合中都是以键值对的形式。在本质上和 String 类型没有太大的区别，还是一个简单的键值对形式。</p><blockquote><p>提示：所有的 Hash 命令都是由 h 开头的。</p></blockquote><h3 id="基本操作-2"><a href="#基本操作-2" class="headerlink" title="基本操作"></a>基本操作</h3><h4 id="hset"><a href="#hset" class="headerlink" title="hset"></a>hset</h4><p>设置一个哈希表，并且保存一对键值对。不过 hset 也可以多对键值对</p><blockquote><p>hset 命令：<code>hset key field value [field value ...]</code></p><p>hmset 命令：<code>hmset key field value [field value ...]</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hset user name xiaohehe age 18 sex 0 house 122 </span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br></pre></td></tr></table></figure><h4 id="hget"><a href="#hget" class="headerlink" title="hget"></a>hget</h4><p>从哈希表中的键中拿出一个值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hget user age</span><br><span class="line"><span class="string">&quot;18&quot;</span></span><br></pre></td></tr></table></figure><h4 id="hmset"><a href="#hmset" class="headerlink" title="hmset"></a>hmset</h4><p>设置一个哈希表，并且保存多对键值对，用法和 hset 一样</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hset user name xiaohehe age 18 sex 0 house 122 </span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br></pre></td></tr></table></figure><h4 id="hmget"><a href="#hmget" class="headerlink" title="hmget"></a>hmget</h4><p>从哈希表中使用多个键中拿出多个值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hmget user name age asd</span><br><span class="line">1) <span class="string">&quot;xiaohehe&quot;</span></span><br><span class="line">2) <span class="string">&quot;18&quot;</span></span><br><span class="line">3) (nil)</span><br></pre></td></tr></table></figure><h4 id="hgetall"><a href="#hgetall" class="headerlink" title="hgetall"></a>hgetall</h4><p>获取全部的数据，包括键和值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hgetall user</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">2) <span class="string">&quot;xiaohehe&quot;</span></span><br><span class="line">3) <span class="string">&quot;age&quot;</span></span><br><span class="line">4) <span class="string">&quot;18&quot;</span></span><br><span class="line">5) <span class="string">&quot;sex&quot;</span></span><br><span class="line">6) <span class="string">&quot;0&quot;</span></span><br><span class="line">7) <span class="string">&quot;house&quot;</span></span><br><span class="line">8) <span class="string">&quot;122&quot;</span></span><br></pre></td></tr></table></figure><h4 id="hdel"><a href="#hdel" class="headerlink" title="hdel"></a>hdel</h4><p>删除哈希表中指定的 key 字段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hdel user sex</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hgetall user</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">2) <span class="string">&quot;xiaohehe&quot;</span></span><br><span class="line">3) <span class="string">&quot;age&quot;</span></span><br><span class="line">4) <span class="string">&quot;18&quot;</span></span><br><span class="line">5) <span class="string">&quot;house&quot;</span></span><br><span class="line">6) <span class="string">&quot;122&quot;</span></span><br></pre></td></tr></table></figure><h4 id="hlen"><a href="#hlen" class="headerlink" title="hlen"></a>hlen</h4><p>获取哈希表的长度</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hlen user</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br></pre></td></tr></table></figure><h4 id="hexists"><a href="#hexists" class="headerlink" title="hexists"></a>hexists</h4><p>判断哈希表中指定的 key 是否存在</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hexists user sex</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; hexists user name</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><h4 id="hkeys"><a href="#hkeys" class="headerlink" title="hkeys"></a>hkeys</h4><p>获取哈希表中所有的 key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hkeys user</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">2) <span class="string">&quot;age&quot;</span></span><br><span class="line">3) <span class="string">&quot;house&quot;</span></span><br></pre></td></tr></table></figure><h4 id="hvals"><a href="#hvals" class="headerlink" title="hvals"></a>hvals</h4><p>获取哈希表中所有的 value</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hvals user</span><br><span class="line">1) <span class="string">&quot;xiaohehe&quot;</span></span><br><span class="line">2) <span class="string">&quot;18&quot;</span></span><br><span class="line">3) <span class="string">&quot;122&quot;</span></span><br></pre></td></tr></table></figure><h3 id="增加和减少"><a href="#增加和减少" class="headerlink" title="增加和减少"></a>增加和减少</h3><blockquote><p>这和 String 数据类型中的增加和减少是一样的，但是它并没有 decrby 的命令。如果要减少的话，可以设置增加负数的目的来达到减少</p></blockquote><h4 id="hincrby"><a href="#hincrby" class="headerlink" title="hincrby"></a>hincrby</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hincrby user age 2</span><br><span class="line">(<span class="built_in">integer</span>) 20</span><br><span class="line">127.0.0.1:6379&gt; hincrby user age -1</span><br><span class="line">(<span class="built_in">integer</span>) 19</span><br></pre></td></tr></table></figure><h3 id="同时设置-1"><a href="#同时设置-1" class="headerlink" title="同时设置"></a>同时设置</h3><h4 id="hsetnx"><a href="#hsetnx" class="headerlink" title="hsetnx"></a>hsetnx</h4><p>哈希表中的 key 不存在时，则设置值，反之则不设置值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hsetnx user age 100</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; hsetnx user asd <span class="string">&quot;this is a redis&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hget user asd</span><br><span class="line"><span class="string">&quot;this is a redis&quot;</span></span><br></pre></td></tr></table></figure><h3 id="使用场景-保存结构体信息"><a href="#使用场景-保存结构体信息" class="headerlink" title="使用场景 - 保存结构体信息"></a>使用场景 - 保存结构体信息</h3><p>hash 字典类型也是比较适合保存结构体信息的，不同于字符串一次序列化整个对象，hash 可以对用户结构中的每个字段单独存储。这样当我们需要获取结构体信息时可以进行部分获取，而不用序列化所有字段，而将整个字符串保存的结构体信息只能一次性全部读取。</p><h2 id="Zset"><a href="#Zset" class="headerlink" title="Zset"></a>Zset</h2><p>在 set 的基础上，增加了一个值。</p><blockquote><p>提示：所有的 Zset 命令都是由 z 开头的。</p></blockquote><h3 id="基本操作-3"><a href="#基本操作-3" class="headerlink" title="基本操作"></a>基本操作</h3><blockquote><p>开始有如下数据：</p><p>85 xiaoqiang<br>90 zhangsan<br>91 lisi<br>95 wanwu<br>76 zhaoliu</p></blockquote><h4 id="zadd"><a href="#zadd" class="headerlink" title="zadd"></a>zadd</h4><p>向有序集中添加一个值，可以添加多个值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd grade a xiaoqiang</span><br><span class="line">(error) ERR value is not a valid <span class="built_in">float</span></span><br><span class="line">127.0.0.1:6379&gt; zadd grade 85 xiaoqiang</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd grade 90 zhangsan</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd grade 90 zhangsan 91 lisi 95 wanwu 76 zhaoliu</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br></pre></td></tr></table></figure><h4 id="zrange"><a href="#zrange" class="headerlink" title="zrange"></a>zrange</h4><p>向有序集合中通过下标区间取得元素</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrange grade 0 -1</span><br><span class="line">1) <span class="string">&quot;zhaoliu&quot;</span></span><br><span class="line">2) <span class="string">&quot;xiaoqiang&quot;</span></span><br><span class="line">3) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">4) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">5) <span class="string">&quot;wanwu&quot;</span></span><br><span class="line"><span class="comment"># 逆序</span></span><br><span class="line">127.0.0.1:6379&gt; zrange grade 0 -1 rev</span><br><span class="line">1) <span class="string">&quot;wanwu&quot;</span></span><br><span class="line">2) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">3) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">4) <span class="string">&quot;xiaoqiang&quot;</span></span><br><span class="line">5) <span class="string">&quot;zhaoliu&quot;</span></span><br><span class="line"><span class="comment"># 按照 score 截取，可以替换成 zrangebyscore</span></span><br><span class="line">127.0.0.1:6379&gt; zrange grade 95 100 byscore</span><br><span class="line">1) <span class="string">&quot;wanwu&quot;</span></span><br></pre></td></tr></table></figure><h4 id="zrevrange"><a href="#zrevrange" class="headerlink" title="zrevrange"></a>zrevrange</h4><p>向有序集合中通过下标区间取得元素，并且是逆序的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrevrange grade 0 -1</span><br><span class="line">1) <span class="string">&quot;wanwu&quot;</span></span><br><span class="line">2) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">3) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">4) <span class="string">&quot;xiaoqiang&quot;</span></span><br><span class="line">5) <span class="string">&quot;zhaoliu&quot;</span></span><br></pre></td></tr></table></figure><h4 id="zrem"><a href="#zrem" class="headerlink" title="zrem"></a>zrem</h4><p>移除有序集合中指定的元素</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrem grade zhaoliu xiaoqiang</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; zrange grade 0 -1</span><br><span class="line">1) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">2) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">3) <span class="string">&quot;wanwu&quot;</span></span><br></pre></td></tr></table></figure><h4 id="zcard"><a href="#zcard" class="headerlink" title="zcard"></a>zcard</h4><p>获取有序集合中的个数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zcard grade</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br></pre></td></tr></table></figure><h4 id="zcount"><a href="#zcount" class="headerlink" title="zcount"></a>zcount</h4><p>获取指定 score 区间的成员的数量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zcount grade 85 1000</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br></pre></td></tr></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><h4 id="zrangebyscore"><a href="#zrangebyscore" class="headerlink" title="zrangebyscore"></a>zrangebyscore</h4><p>给集合中的数据指定 score 的区间范围并从小到大排序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrangebyscore grade 85 100</span><br><span class="line">1) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">2) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">3) <span class="string">&quot;wanwu&quot;</span></span><br></pre></td></tr></table></figure><h4 id="zrevrangebyscore"><a href="#zrevrangebyscore" class="headerlink" title="zrevrangebyscore"></a>zrevrangebyscore</h4><p>给集合中的数据指定 score 的区间范围并从大到小排序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrevrangebyscore grade 100 85</span><br><span class="line">1) <span class="string">&quot;wanwu&quot;</span></span><br><span class="line">2) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">3) <span class="string">&quot;zhangsan&quot;</span></span><br></pre></td></tr></table></figure><h3 id="使用场景-各类热门排序场景"><a href="#使用场景-各类热门排序场景" class="headerlink" title="使用场景 - 各类热门排序场景"></a>使用场景 - 各类热门排序场景</h3><p>例如热门歌曲榜单列表，value值是歌曲ID，score是播放次数，这样就可以对歌曲列表按播放次数进行排序。</p><p>当然还有类似微博粉丝列表、评论列表等等，可以将value定义为用户ID、评论ID，score定义为关注时间、评论点赞次数等等。</p><h2 id="Geospatial"><a href="#Geospatial" class="headerlink" title="Geospatial"></a>Geospatial</h2><p>Redis的 Geospatial 在 Redis 3.2 就已经有了，它可以推算出地理位置的信息，两地之间的距离，方圆之内的人。关于地理位置的可以参考它：<a href="https://www.redis.net.cn/order/3685.html">Redis 地理位置(geo)</a></p><blockquote><p>注意：</p><p>该命令以采用标准格式的参数 x（纬度），y（经度），所以经度必须在纬度之前。这些坐标的限制是可以被编入索引的，区域面积可以很接近极点但是不能索引。具体的限制，由 EPSG:900913 / EPSG:3785 / OSGEO:41001 规定如下：</p><ul><li>有效的经度从 -180 度到 180 度。</li><li>有效的纬度从 -85.05112878 度到 85.05112878 度。</li></ul><p>当坐标位置超出上述指定范围时，该命令将会返回一个错误。</p></blockquote><h3 id="基本操作-4"><a href="#基本操作-4" class="headerlink" title="基本操作"></a>基本操作</h3><h4 id="geoadd"><a href="#geoadd" class="headerlink" title="geoadd"></a>geoadd</h4><p>添加元素的位置，包含（经度、纬度、名称）样板：<code>geoadd key [NX|XX] [CH] longitude（经度） latitude（纬度） member [longitude latitude member ...]</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 厦门理工学院和集美大学</span></span><br><span class="line">127.0.0.1:6379&gt; geoadd xiamen 118.08745238 24.62416819 xmut 118.09534880 24.57996881 jmu</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; geoadd xiamen 118.08518860 24.60387997 huaqiao <span class="comment"># 华侨大学</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd xiamen 118.06637022 24.61626788 xit <span class="comment"># 厦门工学院</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd xiamen 118.08278534 24.63070263 huaxia <span class="comment"># 厦门华夏学院</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd xiamen 118.10268733 24.43600074 xmu <span class="comment"># 厦门大学</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd xiamen 118.16647331 24.46291879 xmcu <span class="comment"># 厦门城市职业学院</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><h4 id="getpos"><a href="#getpos" class="headerlink" title="getpos"></a>getpos</h4><p>获取元素的位置，获取到的是坐标值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geopos xiamen xmut jmu huaqiao xit huaxia xmu xmcu</span><br><span class="line">1) 1) <span class="string">&quot;118.0874517560005188&quot;</span></span><br><span class="line">   2) <span class="string">&quot;24.62416844172170016&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;118.09534817934036255&quot;</span></span><br><span class="line">   2) <span class="string">&quot;24.57996797414514134&quot;</span></span><br><span class="line">3) 1) <span class="string">&quot;118.08518797159194946&quot;</span></span><br><span class="line">   2) <span class="string">&quot;24.60388053356235361&quot;</span></span><br><span class="line">4) 1) <span class="string">&quot;118.06636959314346313&quot;</span></span><br><span class="line">   2) <span class="string">&quot;24.61626771586804097&quot;</span></span><br><span class="line">5) 1) <span class="string">&quot;118.08278471231460571&quot;</span></span><br><span class="line">   2) <span class="string">&quot;24.63070295287047173&quot;</span></span><br><span class="line">6) 1) <span class="string">&quot;118.10268670320510864&quot;</span></span><br><span class="line">   2) <span class="string">&quot;24.43600088173700868&quot;</span></span><br><span class="line">7) 1) <span class="string">&quot;118.16647499799728394&quot;</span></span><br><span class="line">   2) <span class="string">&quot;24.46291962044919188&quot;</span></span><br></pre></td></tr></table></figure><h4 id="geodist"><a href="#geodist" class="headerlink" title="geodist"></a>geodist</h4><p>比较两个点之间的直线距离。可以指定距离单位，Redis 提供了 4 个单位。</p><ul><li>m表示单位为米。</li><li>km表示单位为千米。</li><li>mi表示单位为英里。</li><li>ft表示单位为英尺。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 厦门理工学院与厦门大学的直线距离（千米）</span></span><br><span class="line">127.0.0.1:6379&gt; geodist xiamen xmut xmu km</span><br><span class="line"><span class="string">&quot;20.9859&quot;</span></span><br><span class="line"><span class="comment"># 厦门理工学院与厦门城市职业学院的直线距离（千米）</span></span><br><span class="line">127.0.0.1:6379&gt; geodist xiamen xmut xmcu km</span><br><span class="line"><span class="string">&quot;19.6365&quot;</span></span><br></pre></td></tr></table></figure><h4 id="georadius"><a href="#georadius" class="headerlink" title="georadius"></a>georadius</h4><p>以给定的经纬度为中心，返回键包含的位置元素当中，与中心的距离不超过给定最大距离的所有位置元素。这就像是寻找附近的人。比如，在 20 km 范围内有哪些人。</p><blockquote><p>经度：118.08835144，纬度：24.63347195 所在的位置是厦门理工学院集美苑宿舍。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在厦门理工学院集美苑宿舍，方圆5公里内有哪些学校。</span></span><br><span class="line">127.0.0.1:6379&gt; georadius xiamen 118.08835144 24.63347195 5 km</span><br><span class="line">1) <span class="string">&quot;xit&quot;</span></span><br><span class="line">2) <span class="string">&quot;huaqiao&quot;</span></span><br><span class="line">3) <span class="string">&quot;xmut&quot;</span></span><br><span class="line">4) <span class="string">&quot;huaxia&quot;</span></span><br><span class="line"><span class="comment"># 在厦门理工学院集美苑宿舍，方圆2公里内有哪些学校。</span></span><br><span class="line">127.0.0.1:6379&gt; GEORADIUS xiamen 118.08835144 24.63347195 2000 m</span><br><span class="line">1) <span class="string">&quot;huaxia&quot;</span></span><br><span class="line">2) <span class="string">&quot;xmut&quot;</span></span><br><span class="line"><span class="comment"># 同时显示距离集美苑多少公里和他们的经纬度</span></span><br><span class="line">127.0.0.1:6379&gt; GEORADIUS xiamen 118.08835144 24.63347195 2 km withcoord withdist</span><br><span class="line">1) 1) <span class="string">&quot;huaxia&quot;</span></span><br><span class="line">   2) <span class="string">&quot;0.6416&quot;</span></span><br><span class="line">   3) 1) <span class="string">&quot;118.08278471231460571&quot;</span></span><br><span class="line">      2) <span class="string">&quot;24.63070295287047173&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;xmut&quot;</span></span><br><span class="line">   2) <span class="string">&quot;1.0388&quot;</span></span><br><span class="line">   3) 1) <span class="string">&quot;118.0874517560005188&quot;</span></span><br><span class="line">      2) <span class="string">&quot;24.62416844172170016&quot;</span></span><br></pre></td></tr></table></figure><h4 id="georadiusbymember"><a href="#georadiusbymember" class="headerlink" title="georadiusbymember"></a>georadiusbymember</h4><p>找出位于指定元素周围的其他元素。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 寻找厦门大学方圆10公里内有哪些学校</span></span><br><span class="line">127.0.0.1:6379&gt; GEORADIUSBYMEMBER xiamen xmu 10 km withcoord withdist</span><br><span class="line">1) 1) <span class="string">&quot;xmu&quot;</span></span><br><span class="line">   2) <span class="string">&quot;0.0000&quot;</span></span><br><span class="line">   3) 1) <span class="string">&quot;118.10268670320510864&quot;</span></span><br><span class="line">      2) <span class="string">&quot;24.43600088173700868&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;xmcu&quot;</span></span><br><span class="line">   2) <span class="string">&quot;7.1189&quot;</span></span><br><span class="line">   3) 1) <span class="string">&quot;118.16647499799728394&quot;</span></span><br><span class="line">      2) <span class="string">&quot;24.46291962044919188&quot;</span></span><br></pre></td></tr></table></figure><h4 id="geohash"><a href="#geohash" class="headerlink" title="geohash"></a>geohash</h4><p>返回一个或多个位置元素的 geohash 表示，将二维的经纬度转换为一维的字符串，如果两个字符串越接近，那么则距离越近。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geohash xiamen xmu xmut</span><br><span class="line">1) <span class="string">&quot;ws7gp2ry000&quot;</span></span><br><span class="line">2) <span class="string">&quot;ws7up4swjj0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; geohash xiamen xmu huaxia</span><br><span class="line">1) <span class="string">&quot;ws7gp2ry000&quot;</span></span><br><span class="line">2) <span class="string">&quot;ws7up5ck0r0&quot;</span></span><br><span class="line"><span class="comment"># 厦门理工学院和厦门华夏学院很近</span></span><br><span class="line">127.0.0.1:6379&gt; geohash xiamen xmut huaxia</span><br><span class="line">1) <span class="string">&quot;ws7up4swjj0&quot;</span></span><br><span class="line">2) <span class="string">&quot;ws7up5ck0r0&quot;</span></span><br></pre></td></tr></table></figure><h3 id="其它操作"><a href="#其它操作" class="headerlink" title="其它操作"></a>其它操作</h3><p>geo 底层的实现原理其实就是 Zset，我们可以使用 Zset 命令来操作 geo！可以参照 <a href="#Zset">Zset</a> 的操作来。</p><h4 id="集合中有几所大学"><a href="#集合中有几所大学" class="headerlink" title="集合中有几所大学"></a>集合中有几所大学</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZCARD xiamen</span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br></pre></td></tr></table></figure><h4 id="列出这些大学的名字"><a href="#列出这些大学的名字" class="headerlink" title="列出这些大学的名字"></a>列出这些大学的名字</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrange xiamen 0 -1</span><br><span class="line">1) <span class="string">&quot;xmu&quot;</span></span><br><span class="line">2) <span class="string">&quot;jmu&quot;</span></span><br><span class="line">3) <span class="string">&quot;xit&quot;</span></span><br><span class="line">4) <span class="string">&quot;huaqiao&quot;</span></span><br><span class="line">5) <span class="string">&quot;xmut&quot;</span></span><br><span class="line">6) <span class="string">&quot;huaxia&quot;</span></span><br><span class="line">7) <span class="string">&quot;xmcu&quot;</span></span><br></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZREM xiamen xit</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zrange xiamen 0 -1</span><br><span class="line">1) <span class="string">&quot;xmu&quot;</span></span><br><span class="line">2) <span class="string">&quot;jmu&quot;</span></span><br><span class="line">3) <span class="string">&quot;huaqiao&quot;</span></span><br><span class="line">4) <span class="string">&quot;xmut&quot;</span></span><br><span class="line">5) <span class="string">&quot;huaxia&quot;</span></span><br><span class="line">6) <span class="string">&quot;xmcu&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Hyperloglog"><a href="#Hyperloglog" class="headerlink" title="Hyperloglog"></a>Hyperloglog</h2><p>Redis 2.8.9版本就更新了 Hyperloglog 数据结构！</p><p>Redis Hyperloglog 基数统计的算法！</p><p>优点∶占用的内存是固定，2^64不同的元素的技术，只需要 12KB 内存！如果要从内存角度来比较的话 Hyperloglog 是首选，虽然 set 集合也能做到，可是它的内存并非是固定的！</p><p>网页的 UV（一个人访问一个网站多次，但是还是算作一个人！）</p><p>传统的方式，set 保存用户的 id，然后就可以统计 set 中的元素数量作为标准判断!</p><p>这个方式如果保存大量的用户 id，就会比较麻烦!我们的目的是为了计数，而不是保存用户id;</p><p>0.81% 错误率！统计 UV 任务，可以忽略不计！</p><blockquote><p>如果允许容错，那么一定可以使用 Hyperloglog，如果不允许容错，就使用 set 或者自己的数据类型。</p></blockquote><h3 id="基本操作-5"><a href="#基本操作-5" class="headerlink" title="基本操作"></a>基本操作</h3><h4 id="pfadd"><a href="#pfadd" class="headerlink" title="pfadd"></a>pfadd</h4><p>创建一组元素，可以重复。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PFADD online_users a s d f g h j q s</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><h4 id="pfcount"><a href="#pfcount" class="headerlink" title="pfcount"></a>pfcount</h4><p>统计 key 中元素的基数数量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PFCOUNT online_users</span><br><span class="line">(<span class="built_in">integer</span>) 8</span><br></pre></td></tr></table></figure><h4 id="pfmerge"><a href="#pfmerge" class="headerlink" title="pfmerge"></a>pfmerge</h4><p>将两组元素进行合并</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PFMERGE best_users online_users hot_users</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; PFCOUNT best_users</span><br><span class="line">(<span class="built_in">integer</span>) 15</span><br></pre></td></tr></table></figure><h2 id="Bitmap"><a href="#Bitmap" class="headerlink" title="Bitmap"></a>Bitmap</h2><p>位存储。统计用户信息，活跃，不活跃；登录、未登录；打卡，365 打卡。只要是涉及两个状态的，都可以使用 Bitmap。</p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><h4 id="setbit"><a href="#setbit" class="headerlink" title="setbit"></a>setbit</h4><p>设置或者清空 key 的 value（字符串）在 offset 处的 bit 值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; setbit daka 0 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit daka 1 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit daka 2 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit daka 3 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit daka 4 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure><h4 id="getbit"><a href="#getbit" class="headerlink" title="getbit"></a>getbit</h4><p>返回 key 对应的 string 在 offset 处的 bit 值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; getbit daka 1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; getbit daka 3</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; getbit daka 4</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><h4 id="bitcount"><a href="#bitcount" class="headerlink" title="bitcount"></a>bitcount</h4><p>统计字符串被设置为 1 的 bit 数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; bitcount daka 0 10</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Redis 的学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>了解 NoSQL 和 Redis 安装</title>
      <link href="/journal/redis-tutoral/"/>
      <url>/journal/redis-tutoral/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>既然要学习 Redis，那么就先了解一下什么是 NoSQL 吧。</p><blockquote><p>NoSQL 的全称是 Not Only SQL，不仅是 SQL。</p></blockquote><h2 id="什么是-NoSQL"><a href="#什么是-NoSQL" class="headerlink" title="什么是 NoSQL"></a>什么是 NoSQL</h2><p>NoSQL 泛指非关系型数据库，伴随着 web2.0 互联网的诞生。传统的关系型数据库早已很难对付 web2.0 时代，尤其是超大规模的高并发舍弃，暴露出来很多难以克服的问题，NoSQL 在当今大数据环境下发展的十分迅速，Redis 是发展最快的。</p><p>很多的数据类型用户的个人信息，社交网络，地理位盾。这些数据类型的存储不需要一个固定的格式！不需要多余的操作就可以横向扩展的！</p><p>比如 Java 中的 Map&lt;String, Object&gt; 使用是键值对的方式来控制的，它是 NoSQL 的一种表现形式。</p><span id="more"></span><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>方便扩展<ol><li>数据之间没有关系</li></ol></li><li>大数据量，高性能<ol><li>一秒写 8 万次，读取 11 万，NoSQL 的缓存记录级，是一种细粒度的缓存，性能会比较高。</li></ol></li><li>数据类型多样化<ol><li>不需要事先设计数据库，随取随用，如果是数据量十分大的表，很多人就无法设计了！</li></ol></li><li>传统 RDBMS 和 Nosql<ol><li>传统的 RDBMS<ol><li>结构化组织</li><li>SQL</li><li>数据和关系都在单独的表中</li><li>DDL、DML、DCL、DQL</li><li>严格的一致性</li><li>基础的事务</li><li>……</li></ol></li><li>Nosql<ol><li>没有固定的查询语言</li><li>键值对存储，列存储，文档存储，图形数据库(社交关系)</li><li>最终一致性，</li><li>CAP 定理和 BASE (异地多活)初级架构师!（狂神理念:只要学不死，就往死里学!)</li><li>高性能，高可用，高可扩</li><li>……</li></ol></li></ol></li></ol><p>目前，NoSQL 和 RDBMS 结合起来使用，使性能达到最佳。</p><h3 id="NoSQL-的四大分类"><a href="#NoSQL-的四大分类" class="headerlink" title="NoSQL 的四大分类"></a>NoSQL 的四大分类</h3><p><strong>KV键值对：</strong></p><ul><li>新浪：Redis</li><li>美团：Redis +Tair</li><li>阿里、百度：Redis + memecache</li></ul><p><strong>文档型数据库 ( bson 格式和 json 一样)∶</strong></p><ul><li>MongoDB (一般必须要掌握)<ul><li>MongoDB 是一个基于分布式文件存储的数据库，C++编写，主要用来处理大量的文档!</li><li>MongoDB 是一个介于关系型数据库和非关系型数据中中间的产品!MongoDB是非关系型数据库中功能最丰富，最像关系型数据库的!</li></ul></li><li>CouchDB</li></ul><p><strong>列存储数据库</strong></p><ul><li>HBase</li><li>分布式文件系统</li></ul><p><strong>图关系数据库</strong></p><p>图关系数据库存的是关系，而不是图形。</p><p><img src="/journal/redis-tutoral/84ec07ee9fb648e5bac595e1c1ee250d.png" alt="img" loading="lazy"></p><h2 id="Redis-是什么"><a href="#Redis-是什么" class="headerlink" title="Redis 是什么"></a>Redis 是什么</h2><p>Redis ( Remote Dictionary Server )，即远程字典服务!</p><p>是一个开源的使用 ANSl C 语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value 数据库，并提供多种语言的 API。</p><h2 id="Redis-能做什么"><a href="#Redis-能做什么" class="headerlink" title="Redis 能做什么"></a>Redis 能做什么</h2><ol><li>内存存储、持久化（rdb、aof）</li><li>效率高，可以用于高速缓存</li><li>发布订阅系统</li><li>地图信息分析</li><li>计时器、计数器</li><li>…</li></ol><h2 id="安装-Redis"><a href="#安装-Redis" class="headerlink" title="安装 Redis"></a>安装 Redis</h2><p>Redis 的安装有 Windows 版和 Linux 版，Windows 版解压直接运行 redis-server 即可。Linux 版只提供源代码，需要自己通过编译源代码的方式来安装。</p><p>我在学习的时候用的是 Linux 版，安装时候有几个步骤。</p><p>1、使用 wget 命令去下载，如果提示 <code>-bash: wget: command not found</code> ，则需要安装一下 wget，然后再下载。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">31  yum -y install wget</span><br><span class="line">33  wget https://download.redis.io/releases/redis-6.2.5.tar.gz</span><br></pre></td></tr></table></figure><p>2、解压，进入目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf redis-6.2.5.tar.gz </span><br><span class="line"><span class="built_in">cd</span> redis-6.2.5</span><br></pre></td></tr></table></figure><p>3、安装一下 c++ 的编译器，如果你有，就不用装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc-c++</span><br></pre></td></tr></table></figure><p>4、编译并安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make MALLOC=libc</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>这样，Redis 就安装完成了。</p><h2 id="启动-Redis"><a href="#启动-Redis" class="headerlink" title="启动 Redis"></a>启动 Redis</h2><p>Redis 的默认的安装位置是在 <code>/usr/local/bin</code> ，里面有如下信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]<span class="comment"># ls</span></span><br><span class="line">redis-benchmark  redis-check-aof  redis-check-rdb  redis-cli  redis-sentinel  redis-server</span><br></pre></td></tr></table></figure><p>Redis 的配置文件，默认是保存在解压文件中。建议将配置文件复制到上面提到的路径当中。</p><p>由于 Redis 默认不是以后台运行的，所以要在配置文件中找到以下属性并配置成 yes。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">################################# GENERAL #####################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># By default Redis does not run as a daemon. Use &#x27;yes&#x27; if you need it.</span></span><br><span class="line"><span class="comment"># Note that Redis will write a pid file in /var/run/redis.pid when daemonized.</span></span><br><span class="line"><span class="comment"># When Redis is supervised by upstart or systemd, this parameter has no impact.</span></span><br><span class="line">daemonize <span class="built_in">yes</span></span><br></pre></td></tr></table></figure><p>然后先运行服务端，再运行客户端，输入 ping 命令看看能不能联通，如果返回 PONG，说明连接成功了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]<span class="comment"># ./redis-server redis_conf/redis.conf </span></span><br><span class="line">[root@localhost bin]<span class="comment"># redis-cli</span></span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p>查看正在运行的 Redis 进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ps -ef | grep redis</span></span><br><span class="line">root       1372      1  0 16:49 ?        00:00:00 ./redis-server 127.0.0.1:6379</span><br><span class="line">root       1376   1299  0 16:49 pts/0    00:00:00 redis-cli</span><br><span class="line">root       1400   1382  0 16:52 pts/1    00:00:00 grep --color=auto redis</span><br></pre></td></tr></table></figure><h3 id="小试一下"><a href="#小试一下" class="headerlink" title="小试一下"></a>小试一下</h3><p>试用 set 和 get 命令，保存一些信息并获取。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name xiaohehe</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line"><span class="string">&quot;xiaohehe&quot;</span></span><br></pre></td></tr></table></figure><p>试用 redis-benchmark 命令来测试 redis 的单机性能，redis 的性能会受到服务器的制约，来感受一下速度。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># redis-benchmark -h localhost -p 6379 -c 100 -n 100000</span></span><br></pre></td></tr></table></figure><p>比如，我们看一下 LPUSH 的处理请求。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">====== LPUSH ======                                                   </span><br><span class="line">  100000 requests completed <span class="keyword">in</span> 3.43 seconds</span><br><span class="line">  100 parallel clients</span><br><span class="line">  3 bytes payload</span><br><span class="line">  keep alive: 1</span><br><span class="line">  host configuration <span class="string">&quot;save&quot;</span>: 3600 1 300 100 60 10000</span><br><span class="line">  host configuration <span class="string">&quot;appendonly&quot;</span>: no</span><br><span class="line">  multi-thread: no</span><br><span class="line"></span><br><span class="line">Latency by percentile distribution:</span><br><span class="line">0.000% &lt;= 0.991 milliseconds (cumulative count 2)</span><br><span class="line">50.000% &lt;= 2.287 milliseconds (cumulative count 50170)</span><br><span class="line">75.000% &lt;= 2.895 milliseconds (cumulative count 75016)</span><br><span class="line">87.500% &lt;= 3.471 milliseconds (cumulative count 87608)</span><br><span class="line">93.750% &lt;= 3.951 milliseconds (cumulative count 93756)</span><br><span class="line">96.875% &lt;= 4.351 milliseconds (cumulative count 96879)</span><br><span class="line">98.438% &lt;= 4.695 milliseconds (cumulative count 98458)</span><br><span class="line">99.219% &lt;= 5.031 milliseconds (cumulative count 99224)</span><br><span class="line">99.609% &lt;= 5.399 milliseconds (cumulative count 99610)</span><br><span class="line">99.805% &lt;= 5.847 milliseconds (cumulative count 99805)</span><br><span class="line">99.902% &lt;= 6.303 milliseconds (cumulative count 99903)</span><br><span class="line">99.951% &lt;= 10.199 milliseconds (cumulative count 99952)</span><br><span class="line">99.976% &lt;= 10.535 milliseconds (cumulative count 99976)</span><br><span class="line">99.988% &lt;= 10.703 milliseconds (cumulative count 99988)</span><br><span class="line">99.994% &lt;= 10.791 milliseconds (cumulative count 99994)</span><br><span class="line">99.997% &lt;= 10.839 milliseconds (cumulative count 99997)</span><br><span class="line">99.998% &lt;= 10.871 milliseconds (cumulative count 99999)</span><br><span class="line">99.999% &lt;= 10.911 milliseconds (cumulative count 100000)</span><br><span class="line">100.000% &lt;= 10.911 milliseconds (cumulative count 100000)</span><br></pre></td></tr></table></figure><p>测试 LPUSH 时，在 请求次数为 100000 ，每次写入 3 个字节的数据，100个客户端同时并发的情况下，花费了 10.9 ms，如果不是在虚拟机也许会更快。</p><h2 id="Redis-基础知识和基本命令"><a href="#Redis-基础知识和基本命令" class="headerlink" title="Redis 基础知识和基本命令"></a>Redis 基础知识和基本命令</h2><p>Redis 默认有 16 个数据库，可以在配置文件中查看并修改数据库个数，默认使用的数据库是第 0 个。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Set the number of databases. The default database is DB 0, you can select</span></span><br><span class="line"><span class="comment"># a different one on a per-connection basis using SELECT &lt;dbid&gt; where</span></span><br><span class="line"><span class="comment"># dbid is a number between 0 and &#x27;databases&#x27;-1</span></span><br><span class="line">databases 16</span><br></pre></td></tr></table></figure><p>select 命令是切换数据库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="keyword">select</span> 4 <span class="comment"># 切换到4号数据库</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[4]&gt;</span><br></pre></td></tr></table></figure><p>dbsize 查看数据库大小，每一组键值对占用一个单位。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[4]&gt; <span class="built_in">set</span> name xiaohehe</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[4]&gt; get name</span><br><span class="line"><span class="string">&quot;xiaohehe&quot;</span></span><br><span class="line">127.0.0.1:6379[4]&gt; dbsize</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><p>查看数据库中的键</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[4]&gt; keys *</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">127.0.0.1:6379[4]&gt;</span><br></pre></td></tr></table></figure><p>flushdb 清空当前数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[4]&gt; flushdb</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[4]&gt; dbsize</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>flushall 清空全部数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[4]&gt; flushall</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[4]&gt; <span class="keyword">select</span> 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; DBSIZE</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure><p>exists 判断当前的 key 是否存在</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; exists name</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure><p>move 移除当前的 key 到其它数据库中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name2 xiaohehe</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; move name2 2</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; <span class="keyword">select</span> 2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[2]&gt; get name2</span><br><span class="line"><span class="string">&quot;xiaohehe&quot;</span></span><br></pre></td></tr></table></figure><p>expire 设置 key 的过期时间，单位是秒</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[2]&gt; expire name2 10</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><p>ttl 查看 key 的剩余时间，单位是秒，-1 为永久，-2 为不存在。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ttl name2</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; ttl name2</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; ttl name2</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl name2</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; ttl name2</span><br><span class="line">(<span class="built_in">integer</span>) -2</span><br></pre></td></tr></table></figure><p>type 查看 key 中所保存的值的类型。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> age 20</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">type</span> age</span><br><span class="line">string</span><br></pre></td></tr></table></figure><h2 id="Redis-是单线程的"><a href="#Redis-是单线程的" class="headerlink" title="Redis 是单线程的"></a>Redis 是单线程的</h2><p>为什么？</p><p>明白 Redis 是很快的，因为 Redis 是基于内存操作，CPU 并不是 Redis 性能瓶颈，真正的 Redis 的性能瓶颈是在机器的内存和网络带宽，既然可以使用单线程来实现，就使用单线程了。</p><blockquote><p>QPS（Query Per Second），QPS 其实是衡量吞吐量（Throughput）的一个常用指标，就是说服务器在一秒的时间内处理了多少个请求 —— 我们通常是指 HTTP 请求，显然数字越大代表服务器的负荷越高、处理能力越强。作为参考，一个有着简单业务逻辑（包括数据库访问）的程序在单核心运行时可以提供 50 - 100 左右的 QPS，即每秒可以处理 50 - 100 个请求。</p></blockquote><p>Redis 是 C 语言写的，官方提供的数据为 100000+ 的 QPS，完全不比同样是使用 key-value 的 Memecache 差。</p><h2 id="Redis-为什么很快"><a href="#Redis-为什么很快" class="headerlink" title="Redis 为什么很快"></a>Redis 为什么很快</h2><p>误区1∶高性能的服务器一定是多线程的?</p><p>误区2∶多线程一定比单线程效率高！</p><p>Redis 是将所有的数据全部放在内存中的，所以说使用单线程去操作效率就是最高的，由于多线程涉及到上下文切换，这对于内存系统来说就是浪费时间，如果没有上下文切换效率就是最高的！多次读写都是在一个 CPU 上的，在内存情况这个就是最佳的方案！</p><h2 id="命令查询"><a href="#命令查询" class="headerlink" title="命令查询"></a>命令查询</h2><p><a href="http://www.redis.cn/commands.html">http://www.redis.cn/commands.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Redis 的学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> NoSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个仿 bilibili 的 web 移动端网页</title>
      <link href="/journal/imitate-bilibili/"/>
      <url>/journal/imitate-bilibili/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这是一个仿 b 站的网页 ，点此可以查看效果哟 。👉 <a href="http://124.71.21.146:8080/">点击此处</a></p><p>本次模仿 b 站移动端网页的目的是对目前学习的 Vue 知识进行运用，以及用 Vue-Cli 进行模块化开发。项目的部分预览效果如下。</p><p><img src="/journal/imitate-bilibili/image-20210915104706151.png" alt="image-20210915104706151" loading="lazy"></p><span id="more"></span><h2 id="知道了什么？"><a href="#知道了什么？" class="headerlink" title="知道了什么？"></a>知道了什么？</h2><p>使用 Vue 这种框架，能够像后端一样分功能。就好比，后端需要实现“学生管理模块”，这个模块的代码写到一个文件中；前端也是如此，每一个模块的界面代码也是保存在文件中。以下是前后端两种项目的对比方式</p><p>这是后端的项目结构</p><p><img src="/journal/imitate-bilibili/image-20210915111221924.png" alt="image-20210915111221924" loading="lazy"></p><p>这是使用 Vue 的项目结构</p><p><img src="/journal/imitate-bilibili/image-20210915110538346.png" alt="image-20210915110538346" loading="lazy"></p><h2 id="与-jQuery-的比较"><a href="#与-jQuery-的比较" class="headerlink" title="与 jQuery 的比较"></a>与 jQuery 的比较</h2><p>相对于使用原生 JavaScript 和 jQuery，真的是方便太多太多了。jQuery 虽然它的目标是写的更少，做的更多；如果项目规模非常大的话，用 jQuery 就会杂乱无章，后面修改或维护起来也较麻烦。我还记得暑假的时候写了一个基于 WebSocket 的 Web 在线聊天系统，用 jQuery 去渲染 html 的代码就会显得特别的臃肿。</p><p>虽然在国内来看用 jQuery 的项目在渐渐减少，但是这也并不意味着 jQuery 就没必要学习。因为在某些公司用的还是 jQuery 。</p><p>没有最好的技术，只有最合适的技术。</p><h2 id="想当然的跨域"><a href="#想当然的跨域" class="headerlink" title="想当然的跨域"></a>想当然的跨域</h2><blockquote><p>我原本以为在生产环境的 Vue 项目也会自动跨域，然而并不是，我想太多。🤥🤥</p></blockquote><p>什么是跨域？跨域就是从当前网站发送一个请求，来访问另一个网站上的请求。比如这个仿 b 站的页面，它当前的域是 <code>124.71.21.146:8080</code> ，然后这些页面数据是从另一个域 <code>api.bilibili.com</code> 下来获取的。于是，跨域就产生了。</p><p><img src="/journal/imitate-bilibili/cross-domain1.jpg" alt="img" loading="lazy"></p><p>当我尝试以生产环境的方式部署到 Vercel 时候，出现了跨因域的问题而报错。也就是说，在响应头中 <code>Access-Control-Allow-Origin</code> 中，仅有在当前的 <code>api.bilibili.com</code> 下的域名才能够访问。</p><p>那为什么我的就可以？</p><p>因为我现在运行的模式是开发模式，开发模式会启动一台代理服务器，代理是由 Node.js 开启的，所以我是通过代理的方式来解决跨域的。</p><p><img src="/journal/imitate-bilibili/2F25278837-1313a0937d77524e.png" alt="img" loading="lazy"></p><p>代理的过程类似于上图，只是中间的代理过程是由 Node.js 来处理的。</p>]]></content>
      
      
      <categories>
          
          <category> 小赫赫的项目日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 基础语法复习小记</title>
      <link href="/journal/vue-getting-start/"/>
      <url>/journal/vue-getting-start/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Vue 的入门，发现不是很难，其实只要是有对应的编程语言基础，将其进行类比，学习起来还是很简单的。不过开始的时候是通过引入 vue.js 来学习，后期要真正的使用 Vue 去开发网页的时候，将使用的是 vite 或者基于 webpack 的 vue 脚手架进行开发</p><p>初学时很简单，引入以下 js 文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><blockquote><p>我没使用 cdn ，我使用的是本地的 vue.js 文件</p></blockquote><p>通过 <code>&#123;&#123;&#125;&#125;</code> 来读取 data 属性中的内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// vue 对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&quot;#box&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">msg</span>: <span class="string">&quot;Hello xiaohehe&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><p>条件判断使用 v-if、v-else-if、v-else 就和使用 if、else if、else 一样的。猜猜在网页上输出的结果是什么呢？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">:title</span>=<span class="string">&quot;msg&quot;</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- if else --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;score &lt; 60&quot;</span>&gt;</span>不及格<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else-if</span>=<span class="string">&quot;score &lt; 70&quot;</span>&gt;</span>及格<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else-if</span>=<span class="string">&quot;score &lt; 80&quot;</span>&gt;</span>普通<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else-if</span>=<span class="string">&quot;score &lt; 90&quot;</span>&gt;</span>良好<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else-if</span>=<span class="string">&quot;score &lt; 100&quot;</span>&gt;</span>优秀<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>完美<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// vue 对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&quot;#box&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">score</span>: <span class="number">60</span>,</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p>循环使用的是 v-for 去循环的，比如 <code>v-for=&quot;g in grades&quot;</code> 其中 v-for 右边的值所代表的意义是，g 在 grade 的里面。也就是说将 grade 数组中的元素挨个遍历出来。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>分数<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;g in grades&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;g.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;g.age&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;g.sex&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;g.score&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0)&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showDetail&quot;</span>&gt;</span>查看详情<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&quot;#box&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">grades</span>: [</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&quot;xiaohehe&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">age</span>: <span class="string">&quot;22&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">sex</span>: <span class="string">&quot;男&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">score</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&quot;xiaozhezhe&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">age</span>: <span class="string">&quot;22&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">sex</span>: <span class="string">&quot;男&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">score</span>: <span class="number">90</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">]</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="单向数据绑定和双向数据绑定"><a href="#单向数据绑定和双向数据绑定" class="headerlink" title="单向数据绑定和双向数据绑定"></a>单向数据绑定和双向数据绑定</h2><p>单向绑定使用的是 v-bind ，而双向绑定使用的是 v-model 。</p><h3 id="单向数据绑定"><a href="#单向数据绑定" class="headerlink" title="单向数据绑定"></a>单向数据绑定</h3><p>使用方法：<code>v-bind:属性名=&quot;值&quot;</code> ，比如我要给 h3 标签添加 title 属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;msg&quot;</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// vue 对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&quot;#box&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">msg</span>: <span class="string">&quot;Hello xiaohehe&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然，v-bind 可以去掉，也就是说 h3 标签对中可以这样</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">:title</span>=<span class="string">&quot;msg&quot;</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h3><p>使用方法：<code>v-model=&quot;值&quot;</code> ，常用于各种输入框。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 普通输入框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;value1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span><span class="symbol">&amp;nbsp;</span>&#123;&#123;value1&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 单选框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;value2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> /&gt;</span>男</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;value2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> /&gt;</span>女</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span> 你的性别是：&#123;&#123;value2&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 多选框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;value3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;唱&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> /&gt;</span>唱</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;value3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;跳&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> /&gt;</span>跳</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;value3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;rap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> /&gt;</span>rap</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;value3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;篮球&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> /&gt;</span>篮球</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span> 你的爱好是：&#123;&#123;value3&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 下拉选择框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;value4&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>请选择你的老婆<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;香风智乃&quot;</span>&gt;</span>香风智乃<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;血小板妹妹&quot;</span>&gt;</span>血小板妹妹<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;御坂&quot;</span>&gt;</span>御坂<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;莹草老师&quot;</span>&gt;</span>莹草老师<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">你选择的老婆是：&#123;&#123;value4&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// vue 对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&quot;#box&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">value1</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">value2</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">value3</span>: [],</span></span><br><span class="line"><span class="language-javascript"><span class="attr">value4</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="事件与方法"><a href="#事件与方法" class="headerlink" title="事件与方法"></a>事件与方法</h2><p>使用 v-on 来触发事件，如果是点击事件，则 <code>v-on:click=&quot;方法名&quot;</code> 。如果要自己写一个方法，那么需要在 Vue 对象中，创建一个 methods 属性 ，里面写的是方法。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;showMessgae&quot;</span>&gt;</span>打开对话框<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// vue 对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&quot;#box&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">msg</span>: <span class="string">&quot;Hello xiaohehe&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 方法</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">showMessgae</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还有一种更简单的写法，使用 <code>@事件名=&#39;方法名&#39;</code> ，比如 @click=”方法名” 。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showMessgae&quot;</span>&gt;</span>打开对话框<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>写法和方法类似，但还是有区别的。计算属性的性质和变量一样，而方法在调用的时候必须要加一个括号。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;showMessgae()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;currentTimeStamp&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// vue 对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&quot;#box&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">msg</span>: <span class="string">&quot;Hello xiaohehe&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 方法</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">showMessgae</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="title class_">Date</span>.<span class="title function_">now</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 计算属性</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// ES6 语法</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">currentTimeStamp</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="title class_">Date</span>.<span class="title function_">now</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="请求发送"><a href="#请求发送" class="headerlink" title="请求发送"></a>请求发送</h2><p>请求发送使用的是 axios 来发送的。发送 get 请求就 axios.get ，post 请求时就 axios.post 。通过调用 then 方法来接收服务端的响应，最终展示到页面上。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                最近更新日期：&#123;&#123;weather.lastUpdate&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                城市：&#123;&#123;weather.location.name&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                地点：&#123;&#123;weather.location.path&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// vue 对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&quot;#box&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">weather</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">mounted</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">axios.<span class="title function_">get</span>(<span class="string">&quot;http://weather.cma.cn/api/weather/&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">.<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(response.<span class="property">data</span>.<span class="property">code</span> === <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">weather</span> = response.<span class="property">data</span>.<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="自定义组件与数据传递"><a href="#自定义组件与数据传递" class="headerlink" title="自定义组件与数据传递"></a>自定义组件与数据传递</h2><p>自定义组件就像是编程中的方法封装，就是将使用频繁，重复的代码将其封装到方法中。<code>Vue.component</code> 就和它类似。这样一来，前端的代码也可以通过模块化的方式开发了。</p><p>通过它来注册一个组件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 自定义组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">grade-xiaohehe</span> @<span class="attr">details</span>=<span class="string">&quot;getDetail&quot;</span> <span class="attr">v-bind:grades</span>=<span class="string">&quot;grades&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">grade-xiaohehe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">// 注册组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">Vue.component(&#x27;grade-xiaohehe&#x27;, &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">props: [&#x27;grades&#x27;], // 父传子使用 props </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">thead</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">th</span>&gt;</span>分数<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;g in grades&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">g.name</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">g.age</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">g.sex</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">g.score</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0)&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showDetail&quot;</span>&gt;</span>查看详情<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">methods: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">showDetail() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">this.$emit(&quot;details&quot;, &#123;name: &quot;xiaohehe&quot;, score: 100&#125;); // 子传父使用 $emit 方法，通过触发自定义事件来传值，</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">// vue 对象</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">var vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">el: &quot;#box&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">data: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">weather: &#123;&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">methods: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">getDetail(data) &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">alert(&quot;姓名：&quot; + data.name + &quot;, 得分：&quot; + data.score);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">mounted: function()&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">axios.get(&quot;http://weather.cma.cn/api/weather/&quot;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">.then((response) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">console.log(response);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">if(response.data.code === 0) &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">this.weather = response.data.data;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上述的代码中，有出现数据传递，也就是所谓的“父传子”和“子传父”了。</p><p>如果是从 Vue 实例中的数据传递到自己注册的组件中（父传子），则需要使用 props；如果是子传父则使用 $emit 方法，通过触发自定义事件来传值。</p><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><p>在注册的组件中个，我们还可以在自己注册的组件中使用 <code>slot</code> 标签对用于注册组件。如果要插入一段 html 的代码在插槽中，则必须使用 <code>template</code> 标签对将需要插入的代码放到里面去，这样才会生效。</p><p>如果插槽中放入的是我们自定义的组件的话，那么就不要用 <code>template</code> 标签对将其包裹起来。</p><p>如果在我们自定义的组件中定义多个插槽，那么则需要对每一个插槽进行命名，然后通过插槽名字来对应其插槽。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 插槽 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">weather-days</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;weather-head&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">th</span>&gt;</span>日期<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">th</span>&gt;</span>天气<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">th</span>&gt;</span>风向<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">th</span>&gt;</span>温度<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">th</span>&gt;</span>白天风速<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">th</span>&gt;</span>夜间风速<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;weather-item&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;detail in weather.daily&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;detail.date&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;detail.dayText&#125;&#125; 转 &#123;&#123;detail.nightText&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;detail.dayWindDirection&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;detail.low&#125;&#125; - &#123;&#123;detail.high&#125;&#125;℃<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;detail.dayWindScale&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;detail.nightWindScale&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">weather-days</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 注册日期组件</span></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;weather-days&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;table border=&quot;1&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;thead&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;slot name=&quot;weather-head&quot;&gt;&lt;/slot&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;/thead&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;tbody&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;slot name=&quot;weather-item&quot;&gt;&lt;/slot&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;/tbody&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;/table&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span></span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// vue 对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&quot;#box&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">weather</span>: &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">mounted</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">axios.<span class="title function_">get</span>(<span class="string">&quot;http://weather.cma.cn/api/weather/&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">.<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(response.<span class="property">data</span>.<span class="property">code</span> === <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">weather</span> = response.<span class="property">data</span>.<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jvm 入门</title>
      <link href="/journal/jvm-getting-start/"/>
      <url>/journal/jvm-getting-start/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>跟着狂神老师入门所总结的笔记。</p></blockquote><h2 id="jvm-是什么"><a href="#jvm-是什么" class="headerlink" title="jvm 是什么"></a>jvm 是什么</h2><p>jvm 全称叫 java virtual machine ，也叫 Java 虚拟机 ，Java 虚拟机是一个使用 c++ 编写的，给 Java 程序运行的一个环境 。它运行于操作系统之上 。</p><p>jvm 有很多种，目前我所使用的 jvm 是 HotSpot 。除了 Hotspot ，还有 Microsoft JDK，Open JDK 等等等等</p><p>怎么说呢？jvm 是一种模型，一种规范 。而 HotSpot 、Microsoft JDK，Open  JDK 是一种实现 。</p><span id="more"></span><h2 id="探索-jvm-的内部构造"><a href="#探索-jvm-的内部构造" class="headerlink" title="探索 jvm 的内部构造"></a>探索 jvm 的内部构造</h2><p>在一个 jvm 中 ，有这些部件，分别是“类加载器”、“栈”、“堆”、“方法区”、“程序计数器”、”本地方法栈“、“执行引擎”、“本地方法接口”和“本地方法库”。</p><p><img src="/journal/jvm-getting-start/image-20210826100704331.png" alt="image-20210826100704331" loading="lazy"></p><p>jvm 的大致架构如图所示 。</p><!-- more --><h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><p>一个 class 文件的加载，首先是需要经过加载器 ClassLoader 进行加载，当加载完成之后，放到了方法区。如果要创建一个实例对象，就从方法区调取，将该实例对象存入堆中 ，然后通过引用来获取对象。</p><p><img src="/journal/jvm-getting-start/20170926221307_4062.png" alt="img" loading="lazy"></p><p>类的加载并不是那么的简单，它有一套机制，叫“双亲委派机制” 。在 Java 中，类的加载器分为 4 类，即“启动类（根）加载器”、“扩展类加载器”、“应用程序（系统类）加载器”、“用户自定义加载器” 。</p><p>其中，前三个加载器非常重要：</p><p>根加载器又叫 Bootstrap 加载器 ：主要是加载 rt.jar 里面的类 ，然后加载到类加载器中。</p><p>扩展加载器</p><p>这里有一个简单的实验，旁边的注释是运行的结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">Car</span>&gt; aClass = car.getClass();</span><br><span class="line">        </span><br><span class="line">        System.out.println(ClassLoader.getSystemClassLoader()); <span class="comment">// sun.misc.Launcher$AppClassLoader@18b4aac2 </span></span><br><span class="line">        System.out.println(aClass.getClassLoader()); <span class="comment">// sun.misc.Launcher$AppClassLoader@18b4aac2</span></span><br><span class="line">        System.out.println(aClass.getClassLoader().getParent()); <span class="comment">// sun.misc.Launcher$ExtClassLoader@7ea987ac</span></span><br><span class="line">        System.out.println(aClass.getClassLoader().getParent().getParent()); <span class="comment">// null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getSystemClassLoader()：是获取应用程序加载器，也叫系统加载器。如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。</p><p>getClassLoader()：获取当前类的加载器，此时的加载器是 AppClassLoader 。</p><p>getParent()：获取父加载器，此时的父加载器是 ExtClassLoader ，叫扩展类加载器。如果再调用父加载器则返回的是 null 。返回为 null 的原因是 Bootstrap 类加载器，是用 C++ 实现的，是虚拟机自身的一部分，如果获取它的对象，将会返回 null 。</p><blockquote><p>注意，这里所谓的父加载器和当前的加载器，不是继承关系 。</p></blockquote><h4 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h4><p>这里有一个实验，假如我在自己新建的工程中新建一个 <code>java.lang.String</code> 类 。这其实是不会冲突的，然后我们再 String 类中创建一个 main 方法，然后运行该类，看看会发生什么事情。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">String</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果，报了一个很是令人不理解的错误。说我的 String 类中居然没有这个方法，可是我明明有 main 方法呀，这是什么鬼！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">错误: 在类 java.lang.String 中找不到 main 方法, 请将 main 方法定义为:</span><br><span class="line">   public static void main(String[] args)</span><br><span class="line">否则 JavaFX 应用程序类必须扩展javafx.application.Application</span><br></pre></td></tr></table></figure><p>出现这个问题，就是双亲委派机制造成的，说白了，双亲委派机制就是保证 Java 中内置的一些代码保证是安全的 ，这也是类加载的一个过程。</p><blockquote><p>注意，这里所谓的父加载器和当前的加载器，不是继承关系 。</p></blockquote><p>假设，我们的 <code>java.lang.String</code> 要被加载时，在不考虑我们自定义类加载器，首先会在 AppClassLoader 中检查是否加载过，如果有那就不用再加载了。</p><p>如果没有，那么会拿到父加载器，然后调用父加载器的 loadClass 方法。父加载器中同理也会先检查自己是否已经加载过，如果还没有再往上，直到到达 Bootstrap 类加载器之前，都是在检查是否加载过，并不会选择自己去加载。直到 Bootstrap 类加载器，已经没有父加载器了，这时候开始考虑自己是否能加载了。</p><blockquote><p>此 Bootstrap 非彼 Bootstrap</p></blockquote><p>然后就开始向下找。通过根加载器发现 rt.jar 中发现了 <code>java.lang.String</code> ，找到了之后就不会向下继续开始找了。如果没找到，他就在扩展加载器中加载，如果最后在应用程序加载器中还没找到（不考虑自定义类加载器），那就会抛出 <code>ClassNotFoundException</code> 异常。</p><p>类加载时的运行图如下图所示</p><p><img src="https://img-blog.csdnimg.cn/20201217213314510.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGV5YW5iYW8=,size_16,color_FFFFFF,t_70" alt="类加载的过程" loading="lazy"></p><p>加载过程的相关代码如下所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="type">boolean</span> resolve) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">        <span class="comment">// 首先检查这个类是否已经加载</span></span><br><span class="line">        Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">t0</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">                    c = parent.loadClass(name, <span class="literal">false</span>); <span class="comment">// 如果有父加载器就加载</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    c = findBootstrapClassOrNull(name); <span class="comment">// 没有找到根启动器（Bootstrap）</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">                <span class="comment">// to find the class.</span></span><br><span class="line">                <span class="type">long</span> <span class="variable">t1</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">                c = findClass(name);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">                sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">            resolveClass(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="沙箱安全机制"><a href="#沙箱安全机制" class="headerlink" title="沙箱安全机制"></a><a href="https://blog.csdn.net/qq_30336433/article/details/83268945">沙箱安全机制</a></h4><p>👆 参见，Java 中的安全沙箱模型</p><h3 id="Native-和本地方法栈"><a href="#Native-和本地方法栈" class="headerlink" title="Native 和本地方法栈"></a>Native 和本地方法栈</h3><h4 id="native"><a href="#native" class="headerlink" title="native"></a>native</h4><p>你或许有看过这种“奇葩”的写法，比如打开一个 Object 类。看起来很像接口，没有方法体，却又没有报错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Object</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">registerNatives</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        registerNatives();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> Class&lt;?&gt; getClass();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">notify</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//.......</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这，就是本地方法。不过我们也可以自己写一个这样的方法，不过我们自己写的是没有用的。调用它会报错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">helloWorld</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>如果方法带了 native 关健字，就没有方法体，说明 Java 的作用范围达不到了。进入本地方法栈，调用 JNI（本地方法本地接口），从而可以调用 C 、C++ 底层的代码。 </p><p>JNI 作用：扩展 Java 的使用，融合不同的编程语言为 Java 所用 。在 Java 诞生的时候，当时 C 、C++ 横行，那时想要立足就必须要有 C 、C++ 的能力，于是就有了 Native 关键字。</p><h4 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h4><p>它的具体做法是在 Native Method Stack（本地方法栈）中登记 native 方法，在执行引擎执行的时候，加载本地方法库中的方法。</p><h3 id="PC-寄存器"><a href="#PC-寄存器" class="headerlink" title="PC 寄存器"></a>PC 寄存器</h3><p>程序计数器：Program Counter Register</p><p>每个线程都有一个程序计数器，是线程私有的，就是一个指针，指向方法区中的方法字节码（用来存储指向像一条指令的地址，也即将要执行的指令代码），在执行引擎读取下一条指令，是一个非常小的内存空间，几乎可以忽略不计 。</p><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>方法区是被所有线程共享的，所有字段和方法字节码（指令），以及一些特殊方法，如构造函数，接口代码也在此定义。</p><p>也就是说，所有定义的方法的信息都保存在该区域，此区域属于共享区间。</p><p><strong>静态变量（static）、常量（final）、类（Class）信息(构造方法、接口定义)、运行时的常量池</strong>存在方法区中，但是实例变量存在堆内存中，和方法区无关 。</p><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>栈内存，主管程序的运行，栈的生命周期和线程同步。栈遵循着 FILO (First In Last Out) 的原则。</p><p>线程结束，栈内存也就是释放，对于栈来说，不存在垃圾回收问题。</p><p>如果栈满了，就会爆出一个 StackOverflowError 的错误 ，虚拟机被迫停止运行。</p><p><strong>栈帧是什么？</strong></p><p>栈帧是 Java 虚拟机中栈的组成元素，栈帧由三部分组成：<strong>局部变量区、操作数栈、帧数据区</strong>。局部变量区和操作数栈的大小要视对应的方法而定，他们是按字长计算的。但调用一个方法时，它从类型信息中得到此方法局部变量区和操作数栈大小，并据此分配栈内存，然后压入 Java 栈。</p><p>局部变量区：存放了基本数据类型、对象引用和 returnAddress 类型（指向一条字节码指令的地址）。</p><p>操作数栈：Java 没有寄存器，所有参数传递都是使用操作数栈。</p><p>帧数据区：除了局部变量区和操作数栈外，Java 栈帧还需要一些数据来支持常量池解析、正常方法返回以及异常派发机制。这些数据都保存在 Java 栈帧的帧数据区中。当 JVM 执行到需要常量池数据的指令时，它都会通过帧数据区中指向常量池的指针来访问它。</p><p>除了处理常量池解析外，帧里的数据还要处理 Java 方法的正常结束和异常终止。如果是通过 return 正常结束，则当前栈帧从 Java 栈中弹出，恢复发起调用的方法的栈。如果方法又返回值，JVM 会把返回值压入到发起调用方法的操作数栈。</p><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>一个 JVM 只有一个堆内存，堆内存可以人为的去分配。类加载器读取了类文件后，将对象实例（对象实例中包含成员方法、成员变量）、常量保存到堆中 。</p><p>堆内存中还需要细分为三个区域。</p><ul><li><p>新生区</p><ul><li>Eden Space（伊甸园）<ul><li>所有的对象都是从“伊甸园”创建出来的。</li></ul></li><li>幸存区 0 区</li><li>幸存区 1 区</li></ul></li><li><p>老年区</p></li><li><p>永久区：该区域常驻内存。用来存放 JDK 自身携带的 Class 对象。Interface 元数据，存储 Java 运行时的一些环境或类信息，永久区域不存在垃圾回收。</p><p>永久区可能造成的内存溢出：加载很多第三方的 jar 包。</p><p>在不同版本的 jdk ，各种命名都不一样。</p><ul><li>jdk 1.6 之前，叫永久代，常量池是在方法区中。</li><li>jdk 1.7 永久代开始退化，常量池在堆中。</li><li>jdk 1.8 之后：无永久代，常量池在元空间中。</li></ul></li></ul><h4 id="垃圾回收规则（GC）"><a href="#垃圾回收规则（GC）" class="headerlink" title="垃圾回收规则（GC）"></a>垃圾回收规则（GC）</h4><p>所有的对象都是从新生区的“伊甸园”中创建出来的，假设“伊甸园”、“幸存区 0 区”、“幸存区 1 区” 和 “老年区”分别都只能保存 10 个对象。如果伊甸园区的对象满了，就会触发垃圾回收（轻GC）。</p><p>如果 Java 栈中有引用堆中的对象，那么就不会被清除 ，并且进入幸存者区（可能是 0 区，也可能是 1 区）；如果对象未被引用，则会被垃圾回收器（轻GC）给回收掉，此时这些在幸存者区的对象在左右横跳。</p><p><img src="/journal/jvm-getting-start/a42e7d020c5069a4850fa8d25010ac6a.jpg" alt="img" loading="lazy"></p><p>如果新生区满了，即这里面的三个区都满了，则又会触发一次垃圾回收，通过垃圾回收器（重GC）将在新生区存活的对象放到老年区中。</p><p><img src="/journal/jvm-getting-start/heap.png" alt="img" loading="lazy"></p><p>如果新生区和老年区都满了，那么就会报严重的内存溢出错误。</p><h4 id="内存溢出的原因"><a href="#内存溢出的原因" class="headerlink" title="内存溢出的原因"></a>内存溢出的原因</h4><p>造成溢出的原因是因为新生区和老年区都满了，则会报错严重的内存溢出错误。</p><p>下面有一个实验来测试堆内存溢出的错误 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;asdfghkfofksodffdsfdsfdsfsdfdf&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            str += str.concat(<span class="string">&quot;asdfghkfofksodffdsfdsfdsfsdfdf&quot;</span>).concat(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">888888888</span>) + <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行几秒钟 ，很快就爆出了内存溢出的错误。爆出的错误的原因是堆内存溢出的错误。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: Java heap space</span><br><span class="line">at java.util.Arrays.copyOf(Arrays.java:3332)</span><br><span class="line">at java.lang.String.concat(String.java:2032)</span><br><span class="line">at Hello.main(Hello.java:8)</span><br></pre></td></tr></table></figure><p>如果我们将堆内存大小调整到 10M，看看是怎么报错的，在运行之前加入这个参数 <code>-Xmx10m -Xms10m -XX:+PrintGCDetails</code> ，在运行的结果后面，有标注堆内存的三个区，其中 PSYoungGen 是新生区、ParOldGen 是老年区、Metaspace 叫元空间 。</p><blockquote><p>运行时的参数解释</p><ul><li>-Xms 设置 jvm 初始化对内存分配大小 ，默认是最大分配内存的 1/64</li><li>-Xmx 设置 jvm 最大分配的内存大小，默认是物理内存的 1/4</li><li>-XX:+PrintGCDetails 该参数是打印 GC 的垃圾回收器回收时的内存状态。</li><li>-XX:+HeapDumpOnOutOfMemoryError 将“内存溢出错误”的状态转储到文件中。当然，HeapDumpOn 后面可以导出其它的错误。</li></ul></blockquote><details>    <summary>点击查看运行结果</summary><pre>[GC (Allocation Failure) [PSYoungGen: 2048K->496K(2560K)] 2048K->724K(9728K), 0.0340698 secs] [Times: user=0.00 sys=0.00, real=0.06 secs] [GC (Allocation Failure) [PSYoungGen: 2441K->512K(2560K)] 2670K->1040K(9728K), 0.0120401 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] [GC (Allocation Failure) [PSYoungGen: 2482K->512K(2560K)] 3010K->1591K(9728K), 0.0015323 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] [Full GC (Ergonomics) [PSYoungGen: 2206K->0K(2560K)] [ParOldGen: 6594K->3920K(7168K)] 8801K->3920K(9728K), [Metaspace: 3053K->3053K(1056768K)], 0.0076374 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] [GC (Allocation Failure) [PSYoungGen: 20K->32K(2560K)] 6146K->6158K(9728K), 0.0006039 secs] [Times: user=0.03 sys=0.00, real=0.00 secs] [GC (Allocation Failure) [PSYoungGen: 32K->32K(2560K)] 6158K->6158K(9728K), 0.0005377 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] [Full GC (Allocation Failure) [PSYoungGen: 32K->0K(2560K)] [ParOldGen: 6126K->3919K(7168K)] 6158K->3919K(9728K), [Metaspace: 3053K->3053K(1056768K)], 0.0061232 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] [GC (Allocation Failure) [PSYoungGen: 40K->32K(1536K)] 6166K->6157K(8704K), 0.0015948 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] [GC (Allocation Failure) [PSYoungGen: 32K->32K(2048K)] 6157K->6157K(9216K), 0.0005505 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] [Full GC (Allocation Failure) [PSYoungGen: 32K->0K(2048K)] [ParOldGen: 6125K->2816K(7168K)] 6157K->2816K(9216K), [Metaspace: 3053K->3053K(1056768K)], 0.0071274 secs] [Times: user=0.03 sys=0.00, real=0.01 secs] [GC (Allocation Failure) [PSYoungGen: 20K->0K(2048K)] 5043K->5022K(9216K), 0.0004772 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] [GC (Allocation Failure) [PSYoungGen: 0K->0K(2048K)] 5022K->5022K(9216K), 0.0004349 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] [Full GC (Allocation Failure) [PSYoungGen: 0K->0K(2048K)] [ParOldGen: 5022K->5022K(7168K)] 5022K->5022K(9216K), [Metaspace: 3053K->3053K(1056768K)], 0.0028990 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] [GC (Allocation Failure) [PSYoungGen: 0K->0K(2048K)] 5022K->5022K(9216K), 0.0004763 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] [Full GC (Allocation Failure) [PSYoungGen: 0K->0K(2048K)] [ParOldGen: 5022K->5005K(7168K)] 5022K->5005K(9216K), [Metaspace: 3053K->3053K(1056768K)], 0.0087491 secs] [Times: user=0.03 sys=0.00, real=0.01 secs] Heap PSYoungGen      total 2048K, used 40K [0x00000000ffd00000, 0x0000000100000000, 0x0000000100000000)  eden space 1024K, 3% used [0x00000000ffd00000,0x00000000ffd0a2f8,0x00000000ffe00000)  from space 1024K, 0% used [0x00000000fff00000,0x00000000fff00000,0x0000000100000000)  to   space 1024K, 0% used [0x00000000ffe00000,0x00000000ffe00000,0x00000000fff00000) ParOldGen       total 7168K, used 5034K [0x00000000ff600000, 0x00000000ffd00000, 0x00000000ffd00000)  object space 7168K, 70% used [0x00000000ff600000,0x00000000ffaea8f8,0x00000000ffd00000) Metaspace       used 3257K, capacity 4496K, committed 4864K, reserved 1056768K  class space    used 353K, capacity 388K, committed 512K, reserved 1048576KException in thread "main" java.lang.OutOfMemoryError: Java heap space    at java.util.Arrays.copyOf(Arrays.java:3332)    at java.lang.String.concat(String.java:2032)    at Hello.main(Hello.java:8)</pre></details><h4 id="如何解决内存溢出的问题"><a href="#如何解决内存溢出的问题" class="headerlink" title="如何解决内存溢出的问题"></a>如何解决内存溢出的问题</h4><ul><li>尝试扩大堆内存大小</li><li>如果扩充堆内存大小还是会有内存错误，可以使用内存快照分析工具对内存溢出产生的原因进行分析。比如 JProfiler 、MAT 等等，使用内存分析工具可以知道我们内存溢出的根本原因，也就是说，是第几行的代码导致内存溢出。</li></ul><h4 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h4><p>在 Java 中，垃圾回收机制有 4 种 ，分别是“复制法”、“标记压缩法”、“标记清除法”、“引用计数法”。</p><h5 id="复制法"><a href="#复制法" class="headerlink" title="复制法"></a>复制法</h5><p>复制算法的核心就是，将原有的内存空间一分为二，每次只用其中的一块，在垃圾回收时，将正在使用的对象复制到另外一个内存空间中，然后将该内存空间清空，交换两个内存的角色，完成垃圾回收。</p><ol><li>每次 GC 都会将 Eden 区存活的对象移到幸存区中，—旦 Eden 区被 GC 后，Eden 区存活的都在幸存区，即 Eden 区是空的。</li><li>然后在幸存区，这些存活的对象在 from 区（可能是幸存 0 区是，也有可能是幸存 1 区，不过这已经不重要了），如果 to 区是空的，幸存的对象就会到 to 区，然后就这样一直循环 15 次 。</li><li>如果幸存区的对象经历了 15 次的“拷打”，那么这些幸存的对象就保存到老年区。</li></ol><p>由于是将原有的内存一分为二，所以复制法非常适合新生区的对象。</p><p><img src="/journal/jvm-getting-start/e2djsndsin29383" alt="在这里插入图片描述" loading="lazy"></p><p>优缺点：</p><ul><li>优点：在垃圾对象多的情况下，效率较高。清理后，内存无碎片。</li><li>缺点：在垃圾对象少的情况下，不适用，浪费内存。</li></ul><h5 id="标记清除法"><a href="#标记清除法" class="headerlink" title="标记清除法"></a>标记清除法</h5><p>标记清除顾名思义是一种分两阶段对对象进行垃圾回收的算法。</p><p>第一阶段：标记。从根结点出发遍历对象，对访问过的对象打上标记，表示该对象可达。</p><p>第二阶段：清除。对那些没有标记的对象进行回收，这样使得不能利用的空间能够重新被利用。</p><p><img src="/journal/jvm-getting-start/2fb3up3j2ee.png" alt="img" loading="lazy"></p><p>优点：不会损失50%的空间、可解决循环引用的问题</p><p>缺点：效率不高、会产生大量不连续的内存碎片</p><h5 id="标记压缩法"><a href="#标记压缩法" class="headerlink" title="标记压缩法"></a>标记压缩法</h5><p>标记压缩法，就是执行了标记清除之后，再将碎片化的内存空间进行移动，最终变成连续的空间。</p><p><img src="/journal/jvm-getting-start/pem3ncyobou.png" alt="img" loading="lazy"></p><p>优点：不会损失50%的空间、回收后空间连续</p><p>缺点：效率不高</p><p>其中，标记清除法和标记压缩法主要是在老年区中。</p><h5 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h5><blockquote><p>java 虚拟机不采用这种垃圾回收算法，Python 采用的是这种算法</p></blockquote><p>引用计数法，实际上是通过在对象头中分配一个空间来保存该对象被引用的次数。如果该对象被其它对象引用，则它的引用计数加 1，如果删除对该对象的引用，那么它的引用计数就减 1，当该对象的引用计数为 0 时，那么该对象就会被回收。</p><p>比如我创建了一个 String 对象 ，创建完成之后，p 指向我们刚刚创建的对象。此时计数器是 1 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);</span><br></pre></td></tr></table></figure><p>如果我们将 p 指向新创建的对象，此时 <code>new String(&quot;abc&quot;)</code> 的计数器是 0 ，就要被 GC 处理掉。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;bdc&quot;</span>);</span><br></pre></td></tr></table></figure><p>当对象的引用计数为0时，垃圾回收就发生了。这跟前面三种垃圾收集算法不同，前面三种垃圾收集都是在为新对象分配内存空间时由于内存空间不足而触发的，而且垃圾收集是针对整个堆中的所有对象进行的。而引用计数垃圾收集机制不一样，它只是在引用计数变化为0时即刻发生，而且只针对某一个对象以及它所依赖的其它对象。所以，我们一般也称呼引用计数垃圾收集为<strong>直接</strong>的垃圾收集机制，而前面三种都属于<strong>间接</strong>的垃圾收集机制。</p><h4 id="三种垃圾回收算法的比较"><a href="#三种垃圾回收算法的比较" class="headerlink" title="三种垃圾回收算法的比较"></a>三种垃圾回收算法的比较</h4><p>内存效率：复制算法 &gt; 标记清除算法 &gt; 标记压缩算法（时间复杂度）</p><p>内存整齐度：复制算法 = 标记压缩算法 &gt; 标记清除算法</p><p>内存利用率：标记压缩算法 = 标记清除算法 &gt; 复制算法</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li>深入理解Java类加载：<a href="https://www.cnblogs.com/czwbig/p/11127222.html">https://www.cnblogs.com/czwbig/p/11127222.html</a></li><li>沙箱安全机制：<a href="https://blog.csdn.net/qq_30336433/article/details/83268945">https://blog.csdn.net/qq_30336433/article/details/83268945</a></li><li>通俗易懂的双亲委派机制：<a href="https://blog.csdn.net/codeyanbao/article/details/82875064">https://blog.csdn.net/codeyanbao/article/details/82875064</a></li><li>JVM之虚拟机栈详解：<a href="https://juejin.cn/post/6844903983400632327">https://juejin.cn/post/6844903983400632327</a></li><li>JVM垃圾回收之复制算法：<a href="https://blog.csdn.net/yanghenan19870513/article/details/92803409">https://blog.csdn.net/yanghenan19870513/article/details/92803409</a></li><li>垃圾回收算法详解：<a href="https://blog.csdn.net/m0_37860933/article/details/82154989">https://blog.csdn.net/m0_37860933/article/details/82154989</a></li><li>引用计数算法：<a href="https://www.jianshu.com/p/1d5fa7f6035c">https://www.jianshu.com/p/1d5fa7f6035c</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java 部分 </category>
          
          <category> 深入 Java 的地下世界 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初见微服务和Spring Cloud</title>
      <link href="/journal/spring-cloud-totoral/"/>
      <url>/journal/spring-cloud-totoral/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="谈谈微服务"><a href="#谈谈微服务" class="headerlink" title="谈谈微服务"></a>谈谈微服务</h2><p>单体应用和分布式在我之前了解中间件的时候，详情可以<a href="https://www.bestguo.top/journal/what-s-middleware/">点击这里</a>，接下来咱们说说微服务。</p><p>微服务是由 <strong>Martin Fowler</strong> 发现的。</p><p>他说微服务其实是一种架构风格，我们在开发一个应用的时候这个应用应该是由一组小型服务组成，每个小型服务都运行在自己的讲程内；小服务之间 HTTP 的方式进行互联互通。</p><p><img src="/journal/spring-cloud-totoral/sketch.png" alt="单体和分布式" loading="lazy"></p><span id="more"></span><h3 id="微服务架构的常见问题"><a href="#微服务架构的常见问题" class="headerlink" title="微服务架构的常见问题"></a>微服务架构的常见问题</h3><p>—且采用微服务系统架构，就势必会遇到这样几个问题:</p><ul><li>这么多小服务，如何管理他们？<strong>（服务治理注册中心[服务注册发现剔除]）nacos</strong></li><li>这么多小服务，他们之间如何通讯？<strong>（restful rpc dubbo feign）httpclient(“url;参数)，springBoot restTemplate(“url”参数)，feign</strong>。</li><li>这么多小服务，客户端怎么访问他们？<strong>（网关）gateway</strong></li><li>这么多小服务，一旦出现问题了，应该如何自处理？<strong>（容错）</strong></li><li>这么多小服务，一旦出现问题了，应该如何排错？<strong>（链路追踪）</strong></li></ul><p>对于上面的问题，是任何一个微服务设计者都不能绕过去的，因此大部分的微服务产品都针对每一个问题提供了相应的组件来解决它们。</p><p><img src="/journal/spring-cloud-totoral/5d4ce623e4b06e49190c5c0a.png" alt="5d4ce623e4b06e49190c5c0a" loading="lazy"></p><h3 id="Spring-Cloud-是什么"><a href="#Spring-Cloud-是什么" class="headerlink" title="Spring Cloud 是什么"></a>Spring Cloud 是什么</h3><p>分布式系流中的常见模式给了 Spring Cloud 一个清的定位，即“模式”，也就是说 Spring Cloud 是针动分布式系统开发所的通用抽象，是标准模式的实现。这个定义非前抽象，看完之后并不能知道 Spring Cloud具体包合什么内在。再看一下 Spring 官方给出的架构图，就可以对这套模式有更清晰的认识</p><p><img src="/journal/spring-cloud-totoral/diagram-microservices-88e01c7d34c688cb49556435c130d352.svg" alt="diagram-microservices-88e01c7d34c688cb49556435c130d352.svg" loading="lazy"></p><h3 id="常见的微服务架构"><a href="#常见的微服务架构" class="headerlink" title="常见的微服务架构"></a>常见的微服务架构</h3><p>虽然这些组件都没见过，但是还是了解了解吧</p><h4 id="dubbo"><a href="#dubbo" class="headerlink" title="dubbo"></a>dubbo</h4><p>zookeeper +dubbo + SpringMVclSpringBoot</p><ul><li>配套通信方式: rpc</li><li>注册中心: zookeeper / redis</li><li>配置中心: diamond</li></ul><h4 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h4><p>Spring 全家桶 + 轻松嵌入第三方组件（Netflix）</p><ul><li>配套通信方式: http restful</li><li>注册中心：eruka / consul</li><li>配置中心: config</li><li>断路器：hystrix</li><li>网关：zuul</li><li>分布式追踪系统：sleuth + zipkin</li></ul><h2 id="体验：分布式架构的服务调用"><a href="#体验：分布式架构的服务调用" class="headerlink" title="体验：分布式架构的服务调用"></a>体验：分布式架构的服务调用</h2><p>上面提到，服务之间的通信方式有很多种。下面这种调用方式将使用 http 协议进行服务之间的调用。</p><blockquote><p>服务：可以理解成是功能模块。</p></blockquote><p>创建一个父项目，可以使用 Spring Initializer 来构建，也可以使用 maven 来构件。父项目的 maven 依赖如下所示</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>Order<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>stock<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.bestguo.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloudalibaba<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>springcloudalibaba<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- springboot场景启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父项目中，不需要 src 文件夹，将其删除。</p><p>接下来是两个 Module ，一个为 Order ，一个为 Stock ，他们俩的依赖都是一样的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloudalibaba<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.bestguo.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>order<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这两个 Module 中，都分别创建一个配置类，用于注册 RestTemplate 组件，注册的内容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">(RestTemplateBuilder builder)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> builder.build();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后新建控制类，一个是在 order ，另一个是在 stock 。</p><p>order</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;下单成功&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">forObject</span> <span class="operator">=</span> restTemplate.getForObject(<span class="string">&quot;http://localhost:8011/stock/add&quot;</span>, String.class);</span><br><span class="line">        System.out.println(forObject);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World，&quot;</span> + forObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>stock</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/stock&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StockController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;扣减库存&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;扣减库存&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行之后，访问 <code>http://localhost:8012/order/add</code> 之后，控制台输出结果如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">下单成功</span><br><span class="line">扣减库存</span><br></pre></td></tr></table></figure><p>此时发现 stock 服务，调用成功了。</p><p>说实话，我倒是觉得微服务很像前后端分离，是因为提供一个接口，传递什么参数，然后返回什么内容。这里就很像是前后端的分离，现在发现，微服务其实也并不是什么很新鲜的东西。</p><h2 id="上述的问题"><a href="#上述的问题" class="headerlink" title="上述的问题"></a>上述的问题</h2><p>上面有两个服务，order 调用 stock 调用成功了。两个服务还好说，要是有几百个服务，需要在每各服务中需要记录这些 ip 地址将是一件非常麻烦的事情。如果在这几百个服务中，有一个服务的 ip 地址改变了，假设这个服务被 40 个服务调用着，那就需要修改 40 个服务中记录的 ip 地址，这是非常浪费时间的。</p><p><img src="/journal/spring-cloud-totoral/hsmkfyn1415173.jpg" alt="hsmkfyn1415173.jpg" loading="lazy"></p><p>那么，我们需要将这些 ip 地址放到一个集中管理的地方。这样，一个地方发生变化，我们甚至都不需要更改 ip 地址就能直接访问到相对应的服务中了。</p><p>在 Spring Cloud 中 ，有许多衍生的微服务架构，其中 Spring Cloud Alibaba 就是一个非常之优秀的微服务架构，它里面有一个组件叫做 Nacos ，它是啥？</p><p>它是用于解决上述问题的。将每一个服务的访问地址添加 Nacos 中，我们就可以去非常方便的调用服务，当然还能够解决负载均衡，某个服务宕机之后停用这个服务都需要它来监控并操作。它的职责是服务注册与发现。</p><h2 id="待续"><a href="#待续" class="headerlink" title="待续"></a>待续</h2><p>后期在学习“服务注册与发现”之 Nacos 时，将会详细的写一篇日志来作为记录吧。</p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> 分布式与微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
            <tag> 分布式 </tag>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 的多线程</title>
      <link href="/journal/java-multi-thread/"/>
      <url>/journal/java-multi-thread/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><p>进程，绝大部分使用过电脑的人都知道这东西。进程是一个正在运行的应用程序，Windows 上打开任务管理器就可以看到许许多多的进程，有什么系统进程和用户进程。</p><p><img src="/journal/java-multi-thread/image-20210806100924445.png" alt="image-20210806100924445" loading="lazy"></p><p>线程，线程似乎绝大部分使用的过电脑的人都不是很熟悉，也许只在“性能”模块中的“CPU”中看到线程数。线程是进程的一个执行单元，这怎么解释呢？比如著名的 x 狗浏览器（非恰饭），有一个线程是用户加载浏览器的界面的，有一个线程是用于加载页面，有一个线程是用于下载图片的。每一个线程都在做着自己该做的工作，各司其职。</p><p><img src="/journal/java-multi-thread/QQ%E6%88%AA%E5%9B%BE20210625220159.png" loading="lazy"></p><p>进程，好比一家公司。而线程，就好比公司里的员工，为公司创造价值。</p><span id="more"></span><h2 id="线程和进程的关系"><a href="#线程和进程的关系" class="headerlink" title="线程和进程的关系"></a>线程和进程的关系</h2><p>前面提到过，线程是进程的一个执行单元。一个进程中必须要有一个进程，可以有多个进程。</p><p>每一个进程都有一个独立的内存空间，每一个线程都可以使用进程所开辟的内存空间中的内容。</p><p>这就可以比喻成，你可以使用你所在的公司里的 wifi 来上网，使用公司里的空调来享受着带来的凉爽。但是不能使用其它进程中的内存空间。</p><p>比如你是拼夕夕的员工，你想直接去京东蹭 wifi 吗，这能行吗？这显然是不可以的。线程也是如此。</p><h2 id="java-中的线程"><a href="#java-中的线程" class="headerlink" title="java 中的线程"></a>java 中的线程</h2><p>在 java 中，我们平时写的控制台程序，运行时认为只有一个线程，也就是 main 方法所执行的线程。但是并不是，还有一个垃圾回收器的线程，总共有两个线程。垃圾回收器的目的就是将无用的资源释放掉，为 java 虚拟机腾出更多的内存空间，由于这里主要是讨论多线程，关于垃圾回收器，这里不过多赘述。</p><p><strong>那，我们可以自己创建线程吗？</strong></p><p>这不是 FIFA 嘛，写这篇日志的目的就是让我自己能够更加的了解 java 的线程，以及线程中的一些问题。</p><p><strong>提个简单的问题吧</strong></p><p>我最近在学习的时候，看到一个这样的代码，他问，程序在执行时共开启了多少个线程？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Question1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] a)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;main执行--------&quot;</span>);</span><br><span class="line">        method1();</span><br><span class="line">        System.out.println(<span class="string">&quot;main结束--------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;method1执行--------&quot;</span>);</span><br><span class="line">        method2();</span><br><span class="line">        System.out.println(<span class="string">&quot;method1结束--------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;method2执行--------&quot;</span>);</span><br><span class="line">        method3();</span><br><span class="line">        System.out.println(<span class="string">&quot;method2结束--------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;method3执行--------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请不要立即展开，先思考 30 秒钟。</p><details>    <p>怎么样，肯定有人认为这是 4 个线程吧。其实，线程只有 1 个！</p>    <p>因为这很简单，只是方法之间的调用而已呀。</p></details><h3 id="创建一个线程"><a href="#创建一个线程" class="headerlink" title="创建一个线程"></a>创建一个线程</h3><p>线程的创建非常简单的，总共有三种方法。目前我也是刚刚学，所以目前只知道两种创建线程的方式，一个是通过继承 Thread 类来创建线程，一个是通过自己实现 Runnable 接口来创建线程。</p><p>然后再调用 start 方法去创建线程，这样，一个线程就这样成功的开起了。</p><h4 id="继承-Thread-类"><a href="#继承-Thread-类" class="headerlink" title="继承 Thread 类"></a>继承 Thread 类</h4><p>继承 Thread 类的相关代码如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThreadTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">myThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        myThread.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;主线程------&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用继承的方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;子线程------&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="实现-Runnable-接口"><a href="#实现-Runnable-接口" class="headerlink" title="实现 Runnable 接口"></a>实现 Runnable 接口</h4><p>实现 Runnable 接口创建线程的代码如下所示。这里使用到的方式是使用匿名内部类的方式，当然，你可以创建一个类来实现 Runnable 接口的方式，实例化你创建的类，传入到 Thread 类中的构造方法即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnableTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">myThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;子线程------&quot;</span> + i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        myThread.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;主线程------&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p>由于运行结果实在是太长了，我将运行的结果进行折叠了。后续的运行结果也是如此</p><details>    <summary>点击查看运行结果</summary><pre>主线程------0子线程------0子线程------1子线程------2子线程------3子线程------4子线程------5子线程------6子线程------7子线程------8子线程------9子线程------10子线程------11子线程------12子线程------13子线程------14子线程------15子线程------16子线程------17子线程------18子线程------19子线程------20子线程------21子线程------22子线程------23子线程------24子线程------25子线程------26子线程------27子线程------28子线程------29子线程------30子线程------31子线程------32子线程------33子线程------34子线程------35子线程------36子线程------37子线程------38子线程------39子线程------40子线程------41子线程------42子线程------43子线程------44子线程------45子线程------46子线程------47子线程------48子线程------49子线程------50子线程------51子线程------52子线程------53子线程------54子线程------55子线程------56子线程------57子线程------58子线程------59子线程------60子线程------61子线程------62子线程------63子线程------64子线程------65子线程------66子线程------67子线程------68子线程------69子线程------70子线程------71子线程------72子线程------73子线程------74子线程------75子线程------76子线程------77子线程------78子线程------79子线程------80子线程------81主线程------1主线程------2主线程------3子线程------82子线程------83子线程------84子线程------85子线程------86子线程------87子线程------88子线程------89子线程------90子线程------91子线程------92子线程------93子线程------94子线程------95子线程------96子线程------97子线程------98子线程------99主线程------4主线程------5主线程------6主线程------7主线程------8主线程------9主线程------10主线程------11主线程------12主线程------13主线程------14主线程------15主线程------16主线程------17主线程------18主线程------19主线程------20主线程------21主线程------22主线程------23主线程------24主线程------25主线程------26主线程------27主线程------28主线程------29主线程------30主线程------31主线程------32主线程------33主线程------34主线程------35主线程------36主线程------37主线程------38主线程------39主线程------40主线程------41主线程------42主线程------43主线程------44主线程------45主线程------46主线程------47主线程------48主线程------49主线程------50主线程------51主线程------52主线程------53主线程------54主线程------55主线程------56主线程------57主线程------58主线程------59主线程------60主线程------61主线程------62主线程------63主线程------64主线程------65主线程------66主线程------67主线程------68主线程------69主线程------70主线程------71主线程------72主线程------73主线程------74主线程------75主线程------76主线程------77主线程------78主线程------79主线程------80主线程------81主线程------82主线程------83主线程------84主线程------85主线程------86主线程------87主线程------88主线程------89主线程------90主线程------91主线程------92主线程------93主线程------94主线程------95主线程------96主线程------97主线程------98主线程------99</pre></details><h4 id="建议创建线程的方式"><a href="#建议创建线程的方式" class="headerlink" title="建议创建线程的方式"></a>建议创建线程的方式</h4><p>强烈建议使用实现 Runnable 接口的方式，因为在 java 中，继承只能是单一的继承，不能多继承，如果使用继承 Thread 的方式，就会出现这样的问题。而在 java 中，可以这样子写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Example1</span> <span class="keyword">extends</span> <span class="title class_">AbstractModule</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="质疑"><a href="#质疑" class="headerlink" title="质疑"></a>质疑</h3><ol><li>为什么我运行的结果和视频上运行的结果是完全不一样的呀？</li><li>为什么我运行的时候，总是主线程现执行而不是子线程先执行？</li><li>主线程一定是最先运行的吗，子线程就没有先输出的权利吗？</li><li>你看，我的运行结果完了之后，它就是主线程先执行完再执行子线程，这我觉得和单线程没什么区别呀？</li><li>调用 start 方法和调用的 run 的方法好像没什么区别吧？</li><li>……</li></ol><p>以上是我在多线程学习时，我目前所遇到的疑问，可能还有其它的问题。显然，出现 1~4 点这样的疑问的原因绝大多是不了解的线程的生命周期所造成的。当然，第 5 点是自身 java 基础的问题了。</p><p>这也是我大专时期刚学习 java 的时候学习多线程部分所碰到的问题。</p><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><p>先从最简单的第 5 点开始说起吧。</p><p>调用 run 方法和调用 start 方法的都是一样的，都是入栈和弹栈，仅仅只是调用了类中的方法而已。但是仔细思考，run 方法里面的内容是什么？比如上面那两个例子，run 方法是需要自己实现的，实现的里面是一个 for 循环。而 start 方法里面是啥，我把内容放出来如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * This method is not invoked for the main method thread or &quot;system&quot;</span></span><br><span class="line"><span class="comment">      * group threads created/set up by the VM. Any new functionality added</span></span><br><span class="line"><span class="comment">      * to this method in the future may have to also be added to the VM.</span></span><br><span class="line"><span class="comment">      *</span></span><br><span class="line"><span class="comment">      * A zero status value corresponds to state &quot;NEW&quot;.</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="keyword">if</span> (threadStatus != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalThreadStateException</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Notify the group that this thread is about to be started</span></span><br><span class="line"><span class="comment">     * so that it can be added to the group&#x27;s list of threads</span></span><br><span class="line"><span class="comment">     * and the group&#x27;s unstarted count can be decremented. */</span></span><br><span class="line">    group.add(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">started</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        start0();</span><br><span class="line">        started = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!started) &#123;</span><br><span class="line">                group.threadStartFailed(<span class="built_in">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;</span><br><span class="line">            <span class="comment">/* do nothing. If start0 threw a Throwable then</span></span><br><span class="line"><span class="comment">                  it will be passed up the call stack */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先不看这里面复杂的内容，但是没有看到 start 方法里有在调用 run 方法。这就意味着，start 方法和 run 方法是两个不同的东西。创建出来的线程，这个 run 方法其实就相当于主线程中的 main 方法一样的。</p><p>也就是说 start 方法就是创建线程用的。</p><p>以上的四个问题，就单独用一个内容来说。</p><h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><p>线程主要有 5 种状态，分别是 “创建”、“就绪”、“运行”、“阻塞” 和 “死亡” 这 5 种状态。可以用这张图来描述一下。</p><blockquote><p>什么是时间片？如果你学过痛苦的操作系统，你就知道。</p><p>时间片即 CPU 分配给各个程序的时间，每个线程被分配一个时间段，称作它的时间片，即该线程允许运行的时间。</p></blockquote><p><img src="/journal/java-multi-thread/image-20210806154504981.png" alt="image-20210806154504981" loading="lazy"></p><p>在 java 中，通过创建出来的 Thread 对象，要想真正的创建出线程，则必须调用其 start 方法。调用它的 start 方法，此时线程创建完成。</p><p>创建的线程能够直接运行吗？当然不能，要先进入就绪状态，等待 CPU 的调度才能够执行。假如这个程序中共有 2 个线程，当第一个程序的时间片到了，他就需要进入就绪状态，等待 CPU 的调度。但是第二个线程一定会运行状态么？显然这是不一定的，有可能线程 1 会继续执行，也有可能线程 2 会继续执行。这就有了上面的示例所输出的结果，即主线程执行到 0 ，子线程就突然从 0 一次性执行到 99，也就有了每次输出都是不同的结果的原因了。</p><p>由于 CPU 的切换的频率非常之快。这就看起来像是，宏观上是并行（同时运行），微观上是串行（一个一个运行）。</p><p>那阻塞状态什么时候会出现呐？比如，线程 2 中突然遇到了键盘输入的操作，需要等待用户输入完成才能执行的下一步操作，在输入完成之前，处于运行状态的线程 2 就进入了阻塞状态，此时线程 1 受到 CPU 的调度继续执行着。用户输入完成之后，线程 2 只好进入就绪的状态了，等待 CPU 的调度了。</p><p>那死亡状态又是怎么一回事？在 java 中，死亡状态就是线程中的 run 方法，或者主线程的 main 方法中的代码运行结束了。线程就处于死亡状态了。</p><p>但是，主线程运行结束了，子线程就提前挂了吗？这是绝对不可能的。</p><p>其实，主线程和子线程并不是“父子”关系，而是“兄弟”关系。</p><h2 id="java-多线程的一些简单操作"><a href="#java-多线程的一些简单操作" class="headerlink" title="java 多线程的一些简单操作"></a>java 多线程的一些简单操作</h2><p>比如，获取、修改线程的名字，获取当前线程的对象，让当前线程休眠（进入阻塞状态），唤醒正在休眠的线程，强行正在运行的线程，合理的关闭正在运行的线程。</p><h3 id="获取、修改线程的名字"><a href="#获取、修改线程的名字" class="headerlink" title="获取、修改线程的名字"></a>获取、修改线程的名字</h3><p>使用 setName 方法来修改线程的名字，使用 getName 方法来获取线程的名字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>()&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// do something......</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 设置线程名字</span></span><br><span class="line">t1.setName(<span class="string">&quot;小赫赫&quot;</span>);</span><br><span class="line">System.out.println(t1.getName());</span><br></pre></td></tr></table></figure><h3 id="获取当前线程的对象"><a href="#获取当前线程的对象" class="headerlink" title="获取当前线程的对象"></a>获取当前线程的对象</h3><p>获取当前线程对象的方式也很简单，使用 currentThread 方法来调用当前的线程对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Thread</span> <span class="variable">currentThread</span> <span class="operator">=</span> Thread.currentThread();</span><br></pre></td></tr></table></figure><p>如果是在主线程下，得到的是主线程的对象。如果是自己创建的线程，就获取自己创建线程的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>()&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 新线程对象</span></span><br><span class="line">    <span class="type">Thread</span> <span class="variable">mainThread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        <span class="comment">// do something......</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 主线程对象</span></span><br><span class="line"><span class="type">Thread</span> <span class="variable">mainThread</span> <span class="operator">=</span> Thread.currentThread();</span><br></pre></td></tr></table></figure><h3 id="线程休眠与唤醒"><a href="#线程休眠与唤醒" class="headerlink" title="线程休眠与唤醒"></a>线程休眠与唤醒</h3><p>使用 sleep 方法来休眠一个线程。单位是毫秒。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>唤醒一个线程，唤醒一个线程是需要调用线程对象的 interrupt 方法，通过 java 异常机制来唤醒线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>()&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// do something......</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 唤醒 t1 线程</span></span><br><span class="line">t1.interrupt();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="终止一个线程"><a href="#终止一个线程" class="headerlink" title="终止一个线程"></a>终止一个线程</h3><p>使用 stop 方法来终止强行终止一个线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// do something......</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">t1.stop();</span><br></pre></td></tr></table></figure><p>这样做其实是非常不安全的，因为这样很容易造成数据的丢失，那我们如何正常的关闭一个线程呢？</p><p>当然是可以的。</p><p>这个目前只能够通过代码的方式来终止，而不是使用线程类中的方法。</p><p>一个例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line">    <span class="comment">// 线程停止的状态</span></span><br><span class="line">    isEnd = <span class="literal">false</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(isEnd) &#123;</span><br><span class="line">            <span class="comment">// do something......</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// stop to do another......</span></span><br><span class="line">        <span class="comment">// 如果是数据库的连接，则可以做关闭数据库连接的操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 停止线程</span></span><br><span class="line">t1.isEnd = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h3 id="关于线程休眠的疑问"><a href="#关于线程休眠的疑问" class="headerlink" title="关于线程休眠的疑问"></a>关于线程休眠的疑问</h3><p>这里有一段代码，我调用 t 线程的 sleep 方法。那么是 t 线程会不会休眠，还是主线程会不会休眠？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Question2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread3</span>();</span><br><span class="line">        t.setName(<span class="string">&quot;t&quot;</span>);</span><br><span class="line">        t.start();</span><br><span class="line">        <span class="comment">//调用 t 线程的 sleep 方法</span></span><br><span class="line">        t.sleep(<span class="number">1000</span> * <span class="number">5</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    system.out.println(<span class="string">&quot;he11o world!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread3</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread() . getName() + <span class="string">&quot;---&gt;&quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请不要立即展开，先思考 30 秒</p><details>    <p>正确答案是，主线程休眠！</p>    <p>怎么样，有和我一样被误认为是 t 线程休眠的吗，哈哈哈哈哈哈哈哈。</p>    <p>因为 sleep 方法它是一个静态的方法，静态方法和静态成员变量都是随着类的加载而加载呀。所以 <code>t.sleep()</code> 和 <code>Thread.sleep()</code> 是一样的效果，只要写在哪个线程里面，就是在哪个线程中休眠。</p></details><h2 id="java-多线程的一些调度"><a href="#java-多线程的一些调度" class="headerlink" title="java 多线程的一些调度"></a>java 多线程的一些调度</h2><h3 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h3><p>在 java 的多线程中，可以给线程设置优先级。设置线程的优先级需要获取当前的线程对象，才能够设置线程的优先级。首先，在 Thread 类中，共有三个常量。它们分别是最低优先级，正常优先级和最高优先级。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * The minimum priority that a thread can have.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">MIN_PRIORITY</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * The default priority that is assigned to a thread.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">NORM_PRIORITY</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * The maximum priority that a thread can have.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">MAX_PRIORITY</span> <span class="operator">=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>当然，线程的优先级也可以通过数字（1-10）的方式来设置。</p><p>以下是设置优先级的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Thread.currentThread().setPriority(Thread.MAX_PRIORITY);</span><br><span class="line">Thread.currentThread().setPriority(<span class="number">8</span>);</span><br><span class="line">Thread.currentThread().setPriority(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>设置优先级的目的在于让该线程处于运行态的时间会更久一些。</p><h3 id="线程让位"><a href="#线程让位" class="headerlink" title="线程让位"></a>线程让位</h3><p>就是当前的线程的运行时间片，让给其它线程。在 java 中，使用静态 yield 方法来将线程进行让位</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thread.<span class="keyword">yield</span>();</span><br></pre></td></tr></table></figure><p>以下是一个例子，每运行到 10 的时候，就让位一次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnableTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程&quot;</span> + thread.getName() + <span class="string">&quot;------&quot;</span> + i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.setName(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.setPriority(<span class="number">7</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">10</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                Thread.<span class="keyword">yield</span>(); <span class="comment">// 每10次让给 t1 线程</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;------&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details>    <summary>运行结果如下，请展开</summary><pre>线程main------1线程main------2线程main------3线程main------4线程main------5线程main------6线程main------7线程main------8线程main------9线程t1------1线程t1------2线程t1------3线程t1------4线程t1------5线程t1------6线程t1------7线程t1------8线程t1------9线程t1------10线程t1------11线程t1------12线程t1------13线程t1------14线程t1------15线程t1------16线程t1------17线程t1------18线程t1------19线程t1------20线程t1------21线程t1------22线程t1------23线程t1------24线程t1------25线程t1------26线程t1------27线程t1------28线程t1------29线程t1------30线程t1------31线程t1------32线程t1------33线程t1------34线程t1------35线程t1------36线程t1------37线程t1------38线程t1------39线程t1------40线程t1------41线程t1------42线程t1------43线程t1------44线程t1------45线程t1------46线程t1------47线程t1------48线程t1------49线程t1------50线程t1------51线程t1------52线程t1------53线程t1------54线程t1------55线程t1------56线程t1------57线程t1------58线程t1------59线程t1------60线程t1------61线程t1------62线程t1------63线程t1------64线程t1------65线程t1------66线程t1------67线程t1------68线程t1------69线程t1------70线程t1------71线程t1------72线程t1------73线程t1------74线程t1------75线程t1------76线程t1------77线程t1------78线程t1------79线程t1------80线程t1------81线程t1------82线程t1------83线程t1------84线程t1------85线程t1------86线程t1------87线程t1------88线程t1------89线程t1------90线程t1------91线程t1------92线程t1------93线程t1------94线程t1------95线程t1------96线程t1------97线程t1------98线程t1------99线程t1------100线程main------10线程main------11线程main------12线程main------13线程main------14线程main------15线程main------16线程main------17线程main------18线程main------19线程main------20线程main------21线程main------22线程main------23线程main------24线程main------25线程main------26线程main------27线程main------28线程main------29线程main------30线程main------31线程main------32线程main------33线程main------34线程main------35线程main------36线程main------37线程main------38线程main------39线程main------40线程main------41线程main------42线程main------43线程main------44线程main------45线程main------46线程main------47线程main------48线程main------49线程main------50线程main------51线程main------52线程main------53线程main------54线程main------55线程main------56线程main------57线程main------58线程main------59线程main------60线程main------61线程main------62线程main------63线程main------64线程main------65线程main------66线程main------67线程main------68线程main------69线程main------70线程main------71线程main------72线程main------73线程main------74线程main------75线程main------76线程main------77线程main------78线程main------79线程main------80线程main------81线程main------82线程main------83线程main------84线程main------85线程main------86线程main------87线程main------88线程main------89线程main------90线程main------91线程main------92线程main------93线程main------94线程main------95线程main------96线程main------97线程main------98线程main------99线程main------100</pre></details><p>运行结果发现，当输出到 9 时（其实已经是 10 了，只是 10 是在让步之后才会打印） 。主线程就让出给其它线程 ，由于这里是 t1 就开始执行 。</p><p>由于 t1 已经死亡了，此时主线程在</p><h3 id="线程合并"><a href="#线程合并" class="headerlink" title="线程合并"></a>线程合并</h3><p>线程的合并，使用 join 方法对线程进行合并 。</p><p>示例如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnableTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程&quot;</span> + thread.getName() + <span class="string">&quot;------&quot;</span> + i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.setName(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;------&quot;</span> + i);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                t1.join();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details>    <summary>运行结果如下，请展开（执行结果太长，省略了部分）</summary><pre>线程main------1线程t1------1线程t1------2线程t1------3线程t1------4线程t1------5线程t1------6线程t1------7线程t1------8线程t1------9线程t1------10线程t1------11线程t1------12线程t1------13线程t1------14线程t1------15线程t1------16线程t1------17线程t1------18线程t1------19线程t1------20线程t1------21线程t1------22线程t1------23线程t1------24线程t1------25线程t1------26线程t1------27线程t1------28线程t1------29线程t1------30线程t1------31线程t1------32线程t1------33线程t1------34线程t1------35线程t1------36线程t1------37线程t1------38线程t1------39线程t1------40线程t1------41线程t1------42线程t1------43线程t1------44线程t1------45线程t1------46线程t1------47线程t1------48线程t1------49线程t1------50线程t1------51线程t1------52线程t1------53线程t1------54线程t1------55线程t1------56线程t1------57线程t1------58线程t1------59线程t1------60线程t1------61线程t1------62线程t1------63线程t1------64线程t1------65线程t1------66线程t1------67线程t1------68线程t1------69线程t1------70线程t1------71线程t1------72线程t1------73线程t1------74线程t1------75线程t1------76线程t1------77线程t1------78线程t1------79线程t1------80线程t1------81线程t1------82线程t1------83线程t1------84线程t1------85线程t1------86线程t1------87线程t1------88线程t1------89线程t1------90线程t1------91线程t1------92线程t1------93线程t1------94线程t1------95线程t1------96线程t1------97线程t1------98线程t1------99线程t1------100线程main------2线程main------3线程main------4线程main------5线程main------6线程main------7线程main------8线程main------9线程main------10线程main------11线程main------12线程main------13线程main------14线程main------15线程main------16线程main------17线程main------18线程main------19线程main------20线程main------21线程main------22线程main------23线程main------24线程main------25线程main------26线程main------27线程main------28线程main------29线程main------30线程main------31线程main------32线程main------33线程main------34线程main------35线程main------36线程main------37线程main------38线程main------39线程main------40线程main------41线程main------42线程main------43线程main------44线程main------45线程main------46线程main------47线程main------48线程main------49线程main------50线程main------51线程main------52线程main------53线程main------54线程main------55线程main------56线程main------57线程main------58.......线程main------9997线程main------9998线程main------9999线程main------10000</pre></details><p>运行的效果和让步一样？其实不是。和让步的区别大着呢，线程合并是 t1 线程合并到当前线程中，此时当前线程受阻（暂停执行），只能等到 t1 线程结束之后，主线程才会继续执行。</p><h2 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h2><p>线程安全，在多线程中是一个非常重要的问题。那什么时候会出现线程安全的问题呢？</p><p>举个例子吧。</p><p>假如我有一个账户，名字叫 xiaohehe ，账户里面这里面有 8000 元 ，我俩是在同一家银行不同的位置的 ATM 机。有一次，我去银行里取 4000 元 ，我是一个线程 ，然后我<del>女朋友（目前还没有啦）</del>这个时候也去取 4000 元 ，女朋友也是一个线程，然后我俩这时候钱，取钱的时候会出现以下情况。</p><p><strong>1、刚好取完</strong></p><p>我：取完 4000，显示的余额剩 4000</p><p>数据取完之后，余额更新成功。</p><p>女朋友：取完 4000，余额也更新成功，余额为 0 。</p><p><strong>2、同一时刻取钱</strong></p><p>我：取完 8000，余额剩 4000。</p><p>取完之后，由于网络很不好，导致余额还未更新，还是 8000，此时女朋友此时也取了 4000 元。</p><p>女朋友：取完 8000，余额剩 4000。</p><p>有没有发现，下面这种情况是不是多了 4000 元 。由于取钱还剩余 4000 元 。这样就出现了线程安全的问题。我们可以通过代码示例来验证这一想法。</p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><p>这是账户类，账户类中有一个取款的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> balance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Account</span><span class="params">(<span class="type">double</span> balance, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.balance = balance;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Account</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getBalance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBalance</span><span class="params">(<span class="type">double</span> balance)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">withdraw</span><span class="params">(<span class="type">double</span> balance)</span> &#123;</span><br><span class="line">        <span class="comment">// 取款</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">before</span> <span class="operator">=</span> getBalance();</span><br><span class="line">        <span class="comment">// 付钱</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">after</span> <span class="operator">=</span> before - balance;</span><br><span class="line">        <span class="comment">// 模拟网络延迟</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 更新</span></span><br><span class="line">        setBalance(after);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Account&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;balance=&quot;</span> + balance +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是用户取款的动作 Runnable ，通过它来创建线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Account account;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserRunnable</span><span class="params">(Account account)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.account = account;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">4000</span>;</span><br><span class="line">        account.withdraw(a);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户：&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;，取了：&quot;</span> + a + <span class="string">&quot;，剩下：&quot;</span> + account.getBalance());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadSecurityTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 账户</span></span><br><span class="line">        <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Account</span>(<span class="number">8000</span>, <span class="string">&quot;xiaohehe&quot;</span>);</span><br><span class="line">        <span class="comment">// 我自己</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">UserRunnable</span>(account));</span><br><span class="line">        t1.setName(<span class="string">&quot;me&quot;</span>);</span><br><span class="line">        <span class="comment">// 我女朋友</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">UserRunnable</span>(account));</span><br><span class="line">        t2.setName(<span class="string">&quot;女盆友&quot;</span>);</span><br><span class="line">        <span class="comment">// 全部开启</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行的结果如下，不管是如何运行，运行的结果都是如此。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用户：me，取了：4000.0，剩下：4000.0</span><br><span class="line">用户：女盆友，取了：4000.0，剩下：4000.0</span><br></pre></td></tr></table></figure><h3 id="存在安全问题的三个条件"><a href="#存在安全问题的三个条件" class="headerlink" title="存在安全问题的三个条件"></a>存在安全问题的三个条件</h3><ol><li>多线程并发</li><li>有共享的数据</li><li>且共享的数据具有修改的行为</li></ol><p><strong>上面的例子也正好符合这三个条件，首先账户是共享的，肯定是多线程并发的，然后取款就是修改数据的操作</strong></p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>将线程进行排队，说的专业一点就是线程同步了。使用 synchronized 同步代码块，代码的示例如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">    <span class="comment">// 需要执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同步代码块中有一个小括号，那这个 obj 就是共享的对象了。如果要解决上面的线程问题，那么可以这样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">withdraw</span><span class="params">(<span class="type">double</span> balance)</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">        <span class="comment">// 取款</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">before</span> <span class="operator">=</span> getBalance();</span><br><span class="line">        <span class="comment">// 付钱</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">after</span> <span class="operator">=</span> before - balance;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 更新</span></span><br><span class="line">        setBalance(after);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>this，就是当前实例对象了，也就是 Account ，它是被我和“女盆友”共享的，可修改的，且处于并发的环境中。</p><h3 id="哪种变量不会出现线程安全问题"><a href="#哪种变量不会出现线程安全问题" class="headerlink" title="哪种变量不会出现线程安全问题"></a>哪种变量不会出现线程安全问题</h3><p>在 java 中，变量有三种，一个是局部变量、一个是实例变量、一个是静态变量。只有局部变量不会出现线程安全的问题。因为局部变量是保存在栈中的。</p><p>还有一个，就是常量。因为常量是不可修改的。</p><h3 id="同步关键字写在方法上"><a href="#同步关键字写在方法上" class="headerlink" title="同步关键字写在方法上"></a>同步关键字写在方法上</h3><p>如果要共享的对象就是当前的对象（this），并且要执行的代码是整个方法体，则可以在方法上使用同步关键字，比如上述的例子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">withdraw</span><span class="params">(<span class="type">double</span> balance)</span> &#123;</span><br><span class="line">    <span class="comment">// 取款</span></span><br><span class="line">    <span class="type">double</span> <span class="variable">before</span> <span class="operator">=</span> getBalance();</span><br><span class="line">    <span class="comment">// 付钱</span></span><br><span class="line">    <span class="type">double</span> <span class="variable">after</span> <span class="operator">=</span> before - balance;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 更新</span></span><br><span class="line">    setBalance(after);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后执行的效果也是一样的，这里就不重复展示结果了。</p><p>优点：</p><ol><li>节省代码</li></ol><p>缺点：</p><ol><li>不灵活，只能锁定当前对象（this）</li><li>在某些情况下，可能会无故扩大同步的范围，导致程序的执行效率降低。</li></ol><h3 id="java-有哪些类是线程安全的"><a href="#java-有哪些类是线程安全的" class="headerlink" title="java 有哪些类是线程安全的"></a>java 有哪些类是线程安全的</h3><p>举例：StringBuffer、Vector、Hashtable</p><p>线程不安全的：ArrayList、HashMap、HashSet、StringBuilder</p><h3 id="为什么线程同步之后效率会降低"><a href="#为什么线程同步之后效率会降低" class="headerlink" title="为什么线程同步之后效率会降低"></a>为什么线程同步之后效率会降低</h3><p>当某一个线程执行到同步代码块或者进入到同步函数的时候，它会放弃当前的运行状态，进入锁池去寻找锁，且锁池里面只有一把。就比如上面的例子，当我去取款的时候，我相当于在“锁池”中拿到了 “一把锁” 。</p><p>拿到“锁”之后，此时女盆友再取款，它也要放弃当前的运行状态，进入“锁池”里面去寻找锁。此时，女盆友就只能一直在“锁池”里找锁，要等到我取款完成之后，“锁”就自动回到锁池当中。然后女盆友找到锁了，就可以继续去取款了。</p><p>其中，等待的过程就可以理解成是一种阻塞状态，所以效率就低了。</p><p>也就是说，线程进入锁池找共享对象的对象锁的时候，会释放之前占有的CPU时间片，有可能找到了，有可能没找到，没找到则在锁池中等待，如果找到了会进入就绪状态继续抢夺 CPU 时间片。</p><p>如果进程中只有一个线程也是如此，同样也要进入同步代码块去锁池中拿锁。</p><h3 id="在静态方法上使用同步关键字"><a href="#在静态方法上使用同步关键字" class="headerlink" title="在静态方法上使用同步关键字"></a>在静态方法上使用同步关键字</h3><p>在静态方法上使用同步关键字，表示找类锁。类锁永远只有 1 把。就算创建了 100 个对象，那类锁也只有一把。</p><p>使用类锁来保证静态变量的安全。</p><p><strong>4 个有关同步关键字的面试题</strong></p><p>有如下代码 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSome</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;doSome begin&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep( millis: <span class="number">1080</span> * <span class="number">10</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;doSome over&quot;</span>) ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doOther</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;doOther begin&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;doOther over&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个线程类。如果是 t1 线程，那么就执行 <code>doSome</code> 方法，否则就执行 <code>doOther</code> 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> MyClass mc;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyThread</span><span class="params">(MyClass mc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mc = mc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(Thread.currentThread().getName().equals(<span class="string">&quot;t1&quot;</span>))&#123;</span><br><span class="line">            mc.doSome();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Thread.currentThread().getName().equals(<span class="string">&quot;t2&quot;</span>))&#123;</span><br><span class="line">            mc.doOther();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主线程中做的事情</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MyClass</span> <span class="variable">mc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>(mc);</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>(mc);</span><br><span class="line"></span><br><span class="line">t1.setName(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">t2.setName(<span class="string">&quot;t2&quot;</span>);</span><br><span class="line"></span><br><span class="line">t1.start();</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);<span class="comment">//这个睡眠的作用是:为了保证t1线程先执行。</span></span><br><span class="line">t2.start();</span><br></pre></td></tr></table></figure><p>问 1：如果在 <code>doSome</code> 方法添加了同步关键字，<code>doOther</code> 方法没有添加，那么 <code>doOther</code> 方法需要等待 <code>doSome</code> 方法结束吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">doSome</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 省略代码 ，因为上面有......</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doOther</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 省略代码 ，因为上面有......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details>    <summary>思考 30s 之后再展开答案</summary>    <p>不需要</p>    <p>因为调用 t2 方法不是同步函数，不需要拿锁</p></details><p>问 2：如果在<code>doSome</code>、<code>doOther</code>方法都添加了同步关键字，那么 <code>doOther</code> 方法需要等待 <code>doSome</code> 方法结束吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">doSome</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 省略代码 ，因为上面有......</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">doOther</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 省略代码 ，因为上面有......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details>    <summary>思考 30s 之后再展开答案</summary>    <p>需要</p>    <p>因为 t2 方法需要进入同步代码块，且将 synchronized 关键字写在实例方法上就是拿到当前对象的锁，当前对象的锁是<b style="color: red;">只有一把的！</b>，所以需要等待 doSome 方法执行结束</p></details><p>问 3：将主线程的代码改成如下形式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MyClass</span> <span class="variable">mc1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line"><span class="type">MyClass</span> <span class="variable">mc2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>(mc1);</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>(mc2);</span><br><span class="line"></span><br><span class="line">t1.setName(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">t2.setName(<span class="string">&quot;t2&quot;</span>);</span><br><span class="line"></span><br><span class="line">t1.start();</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);<span class="comment">//这个睡眠的作用是:为了保证t1线程先执行。</span></span><br><span class="line">t2.start();</span><br></pre></td></tr></table></figure><p><code>MyClass</code> 类中的方法和第二问是一样的，那么 <code>doOther</code> 方法需要等待 <code>doSome</code> 方法结束吗？</p><details>    <summary>思考 30s 之后再展开答案</summary>    <p>不需要</p>    <p>虽然都进入了 synchronized 关键字，但是，mc1 和 mc2 是两个对象，不共享的，所以这两个线程所拿到的锁是<b style="color: red;">两把不一样的！</b>，所以不需要等待 doSome 方法执行结束</p></details><p>问 4：给<code>doSome</code>、<code>doOther</code>方法都添加了静态关键字，主线程中和第三问一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doSome</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 省略代码 ，因为上面有......</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doOther</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 省略代码 ，因为上面有......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么 <code>doOther</code> 方法需要等待 <code>doSome</code> 方法结束吗？</p><details>    <summary>思考 30s 之后再展开答案</summary>    <p>需要</p>    <p>虽然都进入了 synchronized 关键字，且 mc1 和 mc2 是两个对象，不共享的，但这个方法是静态的，调用的是静态方法。所以锁的性质变了，变成了<b style="color: red;">类锁</b>，所以需要等待 doSome 方法执行结束</p></details><h2 id="线程死锁"><a href="#线程死锁" class="headerlink" title="线程死锁"></a>线程死锁</h2><p>线程死锁在以下情况会发生，主要是在同步代码块嵌套的情况有极大的可能会死锁。代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThreadLockTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>(), o2 = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThreadLock1</span>(o1, o2);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThreadLock2</span>(o1, o2);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;t2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThreadLock1</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object o1, o2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyThreadLock1</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.o1 = o1;</span><br><span class="line">        <span class="built_in">this</span>.o2 = o2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">        <span class="keyword">synchronized</span> (o1) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程：&quot;</span> + name + <span class="string">&quot;，运行中&quot;</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (o2) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;线程：&quot;</span> + name + <span class="string">&quot;，运行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThreadLock2</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object o1, o2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyThreadLock2</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.o1 = o1;</span><br><span class="line">        <span class="built_in">this</span>.o2 = o2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">        <span class="keyword">synchronized</span> (o2) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程：&quot;</span> + name + <span class="string">&quot;，运行中&quot;</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (o1) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;线程：&quot;</span> + name + <span class="string">&quot;，运行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下，程序永远不会停止。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">线程：t2，运行中</span><br><span class="line">线程：t1，运行中</span><br></pre></td></tr></table></figure><p>因为程序已经处于死锁状态，处于死锁的原因是 o1 和 o2 是共享的，且线程 t1 拿到 o1 锁之后，t2 拿到 o2 锁 。谁也不愿意释放锁 ，所以就造成了死锁。</p><h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><p>守护线程有一个特点，就是主线程已经结束，创建的线程不管是否完成就也会结束。这里写一个死循环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DaemonThreadTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DaemonThread</span> <span class="variable">daemonThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DaemonThread</span>();</span><br><span class="line">        daemonThread.setDaemon(<span class="literal">true</span>);</span><br><span class="line">        daemonThread.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DaemonThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;循环了 &quot;</span> + (++count) + <span class="string">&quot; 次&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果就不展示了，无论如何都会结束的。</p><h2 id="第三种创建线程的方式"><a href="#第三种创建线程的方式" class="headerlink" title="第三种创建线程的方式"></a>第三种创建线程的方式</h2><p>创建第三种线程的方式使用的是 FutureTask 类，然后需要实现 Callable 接口。这种方式创建线程只有在 jdk 1.8 及其以上的版本才能够实现。</p><p>不仅如此，Callable 接口需要实现的 call 方法可是有返回值的。这样一来，我们就可以调用另一个线程中的返回值。</p><p>代码示例如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FutureTaskTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        FutureTask&lt;Integer&gt; task = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Callable</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;task 开始执行，等待10秒&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;task 结束执行，计算1~100的和&quot;</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">                    sum += i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> sum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 创建一个线程</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(task);</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="comment">// 获取线程中运行的结果，当线程中的任务未结束时，它就一直等待。</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> task.get();</span><br><span class="line">        System.out.println(<span class="string">&quot;得到的结果：&quot;</span> + integer);</span><br><span class="line">        System.out.println(<span class="string">&quot;程序运行到底了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行的结果和在线程中使用 <code>join</code>方法类似。</p><h2 id="wait-和-notify"><a href="#wait-和-notify" class="headerlink" title="wait 和 notify"></a>wait 和 notify</h2><p>wait 和 notify 方法不是通过线程对象的方法，是 java 中任何一个 java 对象都有的方法，因为 Object 类中就有 wait 和 notify 方法。那么，这两个方法的含义又是什么呢？</p><h3 id="wait"><a href="#wait" class="headerlink" title="wait"></a>wait</h3><p>表示 o 对象活动的线程进入等待状态，无限期等待。直到被唤醒为止。也就是说这个进程中有个对象，调用其 wait 方法。他就一直等待着。比如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">u.wait();</span><br></pre></td></tr></table></figure><h3 id="notify"><a href="#notify" class="headerlink" title="notify"></a>notify</h3><p>唤醒正在 o 对象上等待的线程。还有一个 <code>notifyAll</code> 方法，表示的是唤醒 o 对象上处于等待的所有线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">u.notify();</span><br></pre></td></tr></table></figure><h3 id="使用情况"><a href="#使用情况" class="headerlink" title="使用情况"></a>使用情况</h3><p>在使用的时候，必须要结合 synchronized 同步代码块来使用才能生效，否则就会报出以下异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.IllegalMonitorStateException</span><br></pre></td></tr></table></figure><h2 id="生产者和消费者"><a href="#生产者和消费者" class="headerlink" title="生产者和消费者"></a>生产者和消费者</h2><p>生产者消费者是一种多线程的模型，虽然在学习目前还没遇到过真正的使用场景。不过简单的例子还是知道的。</p><h3 id="生产者线程类"><a href="#生产者线程类" class="headerlink" title="生产者线程类"></a>生产者线程类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者，生产者只生产一个</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Producer2</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] arr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Producer2</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.arr = arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (arr) &#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[<span class="number">0</span>] % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        arr.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    arr[<span class="number">0</span>]++;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---&gt;&quot;</span> + arr[<span class="number">0</span>]);</span><br><span class="line">                    arr.notify();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消费者线程类"><a href="#消费者线程类" class="headerlink" title="消费者线程类"></a>消费者线程类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Consumer2</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] arr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Consumer2</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.arr = arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (arr) &#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[<span class="number">0</span>] % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        arr.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    arr[<span class="number">0</span>]++;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---&gt;&quot;</span> + arr[<span class="number">0</span>]);</span><br><span class="line">                    arr.notify();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="主线程测试"><a href="#主线程测试" class="headerlink" title="主线程测试"></a>主线程测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChangeTestOut</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Producer2</span>(arr));</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Consumer2</span>(arr));</span><br><span class="line"></span><br><span class="line">        thread1.setName(<span class="string">&quot;生产者&quot;</span>);</span><br><span class="line">        thread2.setName(<span class="string">&quot;消费者&quot;</span>);</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行的结果是交替进行的。</p><h2 id="volatile-关键字"><a href="#volatile-关键字" class="headerlink" title="volatile 关键字"></a>volatile 关键字</h2><p>volatile 作用于属性，能够保证线程之间共享数据的可见性。如何保证可见性，首先要了解 JMM（Java 内存模型），Java 内存模型如下图所示。</p><p><img src="/journal/java-multi-thread/3twyk3y17w.png" alt="JMM" loading="lazy"></p><p>其中：</p><ul><li>Java 所有变量都存储在主内存中。</li><li>每个线程都有自己独立的工作内存，里面存该线程的使用到的变量副本。（该副本就是主内存中该变量的一份拷贝）</li></ul><p>也就是说，每一个线程在操作数据的时候只能操作自己的工作线程，不能在主内存中读写，线程 1 无法访问线程 2  的工作内存。</p><p>如果要让线程 2 修改变量，让其它的线程也知道，则必须先更新主内存。主内存的数据发生变更就会自动刷新到其它的线程中。这个过程就叫做线程间可见性。</p><p>下面是一个例子，包含 main 线程和 thread-1 线程，就是当 main 线程中将 flag 设置为 true，thread-1 线程就会终止运行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VolatileDemo</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">while</span> (!flag) &#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;Flag has been set to true&quot;</span>);</span><br><span class="line">    &#125;).start();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    flag = <span class="literal">true</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;Flag has been set to true&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">VolatileDemo</span> <span class="variable">demo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VolatileDemo</span>();</span><br><span class="line">    demo.start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们使用了 volatile 关键字来修饰 flag 变量，这样可以保证在多线程环境下该变量的可见性，即当一个线程修改了 flag 的值后，其他线程可以立即看到这个变化。</p><p>在 start 方法中，我们启动了一个新的线程，在这个线程中不断地循环，直到 flag 的值被设置为 true。在主线程中，我们等待了一秒钟后将 flag 的值设置为 true。</p><p>由于 flag 变量被修饰为 volatile，因此在主线程中修改 flag 的值后，新线程可以立即看到这个变化，从而退出循环并输出提示信息。</p><p>当去掉 volatile 关键字时，main 线程虽然将 flag 设置成了 true，但是它仅仅修改了自己的工作内存，没更新主内存，因此 thread-1 会无限循环下去。</p><p>volatile 可以保证可见性，但是无法保证原子性。</p><h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><p>ThreadLocal 又叫线程间的局部变量，它的目的主要在于保证不同线程之间的数据不共享，在线程 A 修改 ThreadLocal 中的数据后，线程 B 中的内容不会受到线程 A 的修改而影响。</p><p>ThreadLocal 是用哈希表实现的，每个线程Thread维护一个 ThreadLocalMap 属性，里面就以 Map 的形式存储了多个 ThreadLocal 对象。当在线程中调用 ThreadLocal 操作方法时，都会通过当前Thread线程对象拿到线程里的 ThreadLocalMap，再通过 ThreadLocal 对象从 ThreadLocalMap 中锁定数据实体（ThreadLocalMap.Entry）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="comment">// 创建 ThreadLocal 对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;String&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 在主线程中设置 ThreadLocal 的值</span></span><br><span class="line">        threadLocal.set(<span class="string">&quot;Hello, ThreadLocal!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建新线程</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// 在新线程中获取 ThreadLocal 的值</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> threadLocal.get();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; ---- &quot;</span> + value); <span class="comment">// 输出 &quot;null&quot;，因为新线程中没有设置 ThreadLocal 的值</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动新线程</span></span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> threadLocal.get();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; ---- &quot;</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">main ---- Hello, ThreadLocal!</span><br><span class="line">Thread-0 ---- null</span><br></pre></td></tr></table></figure><h2 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h2><p>volatile 无法保证原子性，synchronized 和 Lock 虽可以保证原子操作（一次性操作完，不能被其它线程所影响），但是效率太低。这时可以使用 Java 内置的 atomic 包下的原子类。</p><p>在很多时候，我们需要的仅仅是一个简单的、高效的、线程安全的递增或者递减方案，这个方案一般需要满足以下要求：</p><ul><li>简单：操作简单，底层实现简单</li><li>高效：占用资源少，操作速度快</li><li>安全：在高并发和多线程环境下，保证数据的正确性</li></ul><p>例如以下例子，多个线程池对临界变量累加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line">    <span class="comment">// 创建临界变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">increase</span><span class="params">()</span> &#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test3</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test3</span>();</span><br><span class="line">        <span class="comment">// 创建线程池，线程数为5</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">// 循环提交任务</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            executorService.submit(() -&gt; &#123;</span><br><span class="line">                <span class="comment">// 对临界变量进行累加操作</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">200</span>; j++) &#123;</span><br><span class="line">                    t3.increase();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭线程池</span></span><br><span class="line">        executorService.shutdown();</span><br><span class="line">        <span class="comment">// 等待所有任务执行完毕</span></span><br><span class="line">        <span class="keyword">while</span> (!executorService.isTerminated()) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 输出结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;累加结果：&quot;</span> + t3.getCount());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次运行之后，累加的结果都不一样。这是因为 count 作为临界资源，累加时无法保证原子性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">累加结果：925</span><br><span class="line">累加结果：937</span><br><span class="line">累加结果：1000</span><br><span class="line">累加结果：984</span><br><span class="line">累加结果：937</span><br></pre></td></tr></table></figure><p>保持累加可以使用 AtomicInteger 类保证原子性，修改后的代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line">    <span class="comment">// 创建临界变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">AtomicInteger</span> <span class="variable">count</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">increase</span><span class="params">()</span> &#123;</span><br><span class="line">        count.incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test3</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test3</span>();</span><br><span class="line">        <span class="comment">// 创建线程池，线程数为5</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">// 循环提交任务</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            executorService.submit(() -&gt; &#123;</span><br><span class="line">                <span class="comment">// 对临界变量进行累加操作</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">200</span>; j++) &#123;</span><br><span class="line">                    t3.increase();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭线程池</span></span><br><span class="line">        executorService.shutdown();</span><br><span class="line">        <span class="comment">// 等待所有任务执行完毕</span></span><br><span class="line">        <span class="keyword">while</span> (!executorService.isTerminated()) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 输出结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;累加结果：&quot;</span> + t3.getCount());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>incrementAndGet 类似于 i++，运行结果如下。发现每次的运行结果都是 1000。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">累加结果：1000</span><br><span class="line">累加结果：1000</span><br><span class="line">累加结果：1000</span><br><span class="line">累加结果：1000</span><br><span class="line">累加结果：1000</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>view width 和 view height</title>
      <link href="/journal/view-width-and-view-height/"/>
      <url>/journal/view-width-and-view-height/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="这俩是啥"><a href="#这俩是啥" class="headerlink" title="这俩是啥"></a>这俩是啥</h2><p>它们俩叫做视口宽和视口高，是基于设备的宽和高来定义的一种长度单位，叫做视口单位。单位符号为 vw 、vh 。</p><h2 id="视口又是啥"><a href="#视口又是啥" class="headerlink" title="视口又是啥"></a>视口又是啥</h2><p>在 PC 端，指的是浏览器的可视区域；不过在移动端，它涉及 3 个视口：Layout Viewport（布局视口），Visual Viewport（视觉视口），Ideal Viewport（理想视口）。</p><p>视口单位中的时候，在 PC 端指的是浏览器的可视区域；移动端指的是 3 个视口中的第一个，也就是 Layout Viewport（布局视口）。</p><span id="more"></span><p><img src="/journal/view-width-and-view-height/1210235-20170918162531150-539160393.jpg" alt="可视区域" loading="lazy"></p><p>PC 端可以理解成是浏览器除了地址输入那一栏和收藏夹那一栏。而手机端可以理解成整个屏幕分辨率的宽和高</p><h2 id="两者和-px-之间的关系"><a href="#两者和-px-之间的关系" class="headerlink" title="两者和 px 之间的关系"></a>两者和 px 之间的关系</h2><p>他们俩之间的关系也很好理解，100 vw 就是视口的宽，100 vh 就是视口的高。</p><p><img src="/journal/view-width-and-view-height/1210235-20170918162831821-1344168854.jpg" loading="lazy"></p><p>假如我有一台 iphone 6 的设备，分辨率是 375 × 667 （单位是 px）。在当前手机分辨率下如果是 1vw 的话，也就是视口的 1% ，即屏幕分辨率的 1% 。所以 1vw = 375 × 1% = 3.75px，1vh = 6.67px 。不同手机的屏幕分辨率的 1vw 和 1vh 都是不一样的。但是这不重要，只要学会如何正确的计算即可。</p><p>如果我想在 iphone 6 下的屏幕分辨率下设置一个 6px 的 margin-top 所对应的 vw 和 vh，该如何计算？</p><ol><li>首先计算出当前的 6px 占视口宽的百分比。</li><li>100vw 是视口的宽度乘以所得到的百分比，得到的就是对应的 vw。</li></ol><p>运算结果为：</p><ul><li>100 vw × (6 ÷ 375) = 100 vw × 0.016 = 1.6 vw</li><li>100 vh × (6 ÷ 667)  = 100 vh × 0.0089955022 = 0.89955022 vh</li></ul><h2 id="和-有什么区别"><a href="#和-有什么区别" class="headerlink" title="和 % 有什么区别"></a>和 % 有什么区别</h2><p>既然说到 1vw 就是视口宽的 1% ，1vh 就是视口高的 1%，那我岂不是用百分比去代替不就好了，干嘛还要 vw 和 vh ，这会不会很多余或者没必要呀。</p><p>格局小了，格局小了。</p><p>他们俩还是有区别的，使用百分比去调整可是基于父元素已有的宽度进行适配的。而 vw 和 vh 针对的是浏览器视口（移动端就是屏幕分辨率）尺寸来的。</p><p>这里使用 bilibili 的移动端进行对比，我对这两个样式做出了如下临时修改。将 width 设置成 46.004266666667vw 和将 width 设置成 46.004266666667% 的效果，发现效果是有差距的。</p><p><img src="/journal/view-width-and-view-height/image-20210728230950638.png" alt="image-20210728230950638" loading="lazy"></p><p>左边的红框是使用视口单位，右边的红框是使用百分比单位。首先很容易看出来，左边大，右边小，两者还是有区别的，百分比是基于父容器的，父容器的宽是没有视口那么大。所以才会显得小，而左边是以视口为参照，所以才会大一些。</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识 WebSocket</title>
      <link href="/journal/websocket-tutoral/"/>
      <url>/journal/websocket-tutoral/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="什么是-WebSocket"><a href="#什么是-WebSocket" class="headerlink" title="什么是 WebSocket"></a>什么是 WebSocket</h2><p>WebSocket 是 HTML5 开始提供的一个在 TCP 连接上进行的一个全双工通讯的协议。WebSocket 通信协议于 2011 年被 IETF 定为标准 RFC 6455，并由 RFC7936 补充规范。WebSocket API 也被 W3C 定为标准。</p><p>WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p><p><img src="/journal/websocket-tutoral/eating.jpg" alt="eating.jpg" loading="lazy"></p><p>比起 ajax 的轮询，更加节省了许多资源。</p><span id="more"></span><h2 id="如何通信"><a href="#如何通信" class="headerlink" title="如何通信"></a>如何通信</h2><p>要直接建立 WebSocket 肯定是不行的！它首先使用 http 协议来进行握手，连接成功之后就直接使用 WebSocket 协议进行连接了。</p><p>连接的过程如下所示</p><p><img src="/journal/websocket-tutoral/109cfd4c35de32462512724d306d04.jpg" alt="109cfd4c35de32462512724d306d04.jpg" loading="lazy"></p><p>由上图 WebSocket 分为两部分，握手和数据传输。</p><p>客户端握手时携带着类似的如下信息</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET ws://localhost/chat HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Key: dGh1IHNhbXBSzSBub25jzQ==</span><br><span class="line">Sec-WebSocket-Extensions: permessage-deflate</span><br><span class="line">Sec-WebSocket-version: 13</span><br></pre></td></tr></table></figure><p>服务端握手时携带着类似的如下信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 101 switching Protocols</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=</span><br><span class="line">Sec-Websocket-Extensions : permessage-def1ate</span><br></pre></td></tr></table></figure><p>字段说明</p><table><thead><tr><th>头名称</th><th>说明</th></tr></thead><tbody><tr><td>Connection: Upgrade</td><td>标识该 HTTP 请求是一个协议升级请求</td></tr><tr><td>Upgrade: websocket</td><td>协议升级 WebSocket 协议</td></tr><tr><td>Sec-WebSocket-Key:</td><td>客户端采用 base64 编码的 24 位随机字符序列，服务器接受客户端 HTTP 协议升级的证明。要求服务端响应一个对应加密的 Sec-Websocket-Accept 头信息作为应答</td></tr><tr><td>Sec-WebSocket-Extensions:</td><td>协议扩张类型</td></tr><tr><td>Sec-WebSocket-version: 13</td><td>客户端支持 WebSocket 的版本</td></tr></tbody></table><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="客户端（WebSocket）实现"><a href="#客户端（WebSocket）实现" class="headerlink" title="客户端（WebSocket）实现"></a>客户端（WebSocket）实现</h3><p>实现 WebSockets 的 web 浏览器将通过 WebSocket 对象公开所有必需的客户端功能（主要指支持 Html5 的浏览器)。</p><p>创建对象的代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(url);</span><br></pre></td></tr></table></figure><h4 id="WebSocket-事件触发"><a href="#WebSocket-事件触发" class="headerlink" title="WebSocket 事件触发"></a>WebSocket 事件触发</h4><p>它的对象中有如下事件。</p><table><thead><tr><th>事件</th><th>事件处理程序</th><th>描述</th></tr></thead><tbody><tr><td>open</td><td>ws.onopen</td><td>连接时建立触发</td></tr><tr><td>message</td><td>ws.onmessage</td><td>客户端接收服务端数据时触发</td></tr><tr><td>error</td><td>ws.onerror</td><td>通信发生错误时触发</td></tr><tr><td>close</td><td>ws.close</td><td>连接关闭时触发</td></tr></tbody></table><h4 id="WebSocket-方法"><a href="#WebSocket-方法" class="headerlink" title="WebSocket 方法"></a>WebSocket 方法</h4><p>它的对象中有如下事件。</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>send()</td><td>使用连接发送数据</td></tr></tbody></table><h3 id="服务端实现"><a href="#服务端实现" class="headerlink" title="服务端实现"></a>服务端实现</h3><p>服务端实现有很多种，有 Java、Python、Go 等等多种后端实现方式。这里使用的是 Java 的实现方式，Tomcat 是用 Java 进行编写的。在 Tomcat 7.0.5 开始，就开始支持 WebSocket ，并且实现了 Java  WebSocket 的规范(JSR356)。</p><p>Java WebSocket 应用由一系列的 WebSocketEndpoint 组成。Endpoint 是一个 java 对象，代表 WebSocket 链接的一端，对于服务端，我们可以视为处理具体 WebSocket 消息的接口，就像 Servlet 之与 http 请求一样。</p><p>我们可以通过两种方式定义 Endpoint：</p><ul><li>编程式：继承自 <code>javax.websocket.Endpoint</code> 并实现其方法。</li><li>注解式：即定义一个 POJO（Plain Ordinary Java Object，普通 Java 对象），并添加 @ServerEndpoint 相关注解。</li></ul><p>EndPoint 对象是在 WebSocket 握手时创建，并在客户端与服务端的链接过程中有效，在 Endpoint 接口中定义了与其生命周期相关的方法，确保在各个阶段调用实例的相关方法，其生命周期的相关方法如下。</p><table><thead><tr><th>方法</th><th>描述</th><th>注解</th></tr></thead><tbody><tr><td>onClose</td><td>当会话关闭时调用。</td><td>@OnClose</td></tr><tr><td>onOpen</td><td>当开启一个新的会话时调用，该方法是客户端与服务端握手成功之后调用的方法。</td><td>@OnOpen</td></tr><tr><td>onError</td><td>当连接的过程中出现异常时调用。</td><td>@OnError</td></tr></tbody></table><h4 id="如何接收来自客户端的数据"><a href="#如何接收来自客户端的数据" class="headerlink" title="如何接收来自客户端的数据"></a>如何接收来自客户端的数据</h4><p>通过为 Session 添加 MessageHandler 消息处理器来接收消息，当采用注解方式定义 Endpoint 时，我们还可以通过 @OnMessage 注解指定接收消息的方法。</p><h4 id="如何主动推送数据给客户端"><a href="#如何主动推送数据给客户端" class="headerlink" title="如何主动推送数据给客户端"></a>如何主动推送数据给客户端</h4><p>发送消息则由 RemoteEndpoint 完成，其实例由 Session 维护。</p><p>Session.getBasicRemote 获取同步消息发送的实例，然后调用其 sendXxx() 方法就可以发送消息。</p><p>通过 Session.getAsyncRemote 获取异步消息发送实例。</p><h2 id="小试一下"><a href="#小试一下" class="headerlink" title="小试一下"></a>小试一下</h2><p>接下来，利用 Spring Boot 做一个简单的 WebSocket 的程序。就是实时展示服务器的时间，每隔 500 毫秒发送时间。不过，如果你是 Spring Boot 的项目，先引入如下三个依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这个是 springboot 的 websocket 的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 导入模板引擎的 starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>导入完成之后，先编写前端页面的代码。</p><h3 id="前端部分"><a href="#前端部分" class="headerlink" title="前端部分"></a>前端部分</h3><p>前端界面的 html 代码是非常简单的。其中给 p 标签对设置了一个 id ，这个 id 是用于显示消息的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>websocket例子<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>使用websocket实时展示服务端的时间<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;realTime&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;ws.close()&quot;</span>&gt;</span>断开连接<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// websocket 的相关代码</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后通过 JavaScript 创建一个 WebSocket 对象，创建对象非常简单。 其中需要携带一个请求路径，此时的请求的协议是 <code>ws</code> 而不是 <code>http</code> 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;ws://localhost:8080/showTime&quot;</span>);</span><br></pre></td></tr></table></figure><p>然后这个对象中有监听事件嘛，调用相关的监听方法即可。本示例中设置了四个监听事件，分别为 <code>onopen</code> 、<code>onmessage</code> 、<code>onerror</code> 、<code>onclose</code> 四个监听事件，目前这里也就用到了 3 个。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是建立连接之后触发的事件</span></span><br><span class="line">ws.<span class="property">onopen</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;realTime&quot;</span>).<span class="property">innerText</span> = <span class="string">&quot;连接成功，正在获取时间......&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 收到服务端发送过来的消息所触发的事件</span></span><br><span class="line">ws.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="comment">// console.log(e.data);</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;realTime&quot;</span>).<span class="property">innerText</span> = <span class="string">&quot;现在的时间是：&quot;</span> + e.<span class="property">data</span>; <span class="comment">// 将时间填充到 p 标签对中</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 服务端出现异常时建立的事件</span></span><br><span class="line">ws.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 关闭连接时所触发的事件</span></span><br><span class="line">ws.<span class="property">onclose</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;realTime&quot;</span>).<span class="property">innerText</span> = <span class="string">&quot;已经和服务器断开连接&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，前端部分的代码已经完成了。接下来写后端的代码。</p><h3 id="后端部分"><a href="#后端部分" class="headerlink" title="后端部分"></a>后端部分</h3><p>先新建一个控制类，用于访问我们写的 index.html 页面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后新建一个 EndPoint 类，用于接收来自客户端发过来的数据。我们通过 ServerEndpoint 注解类来标记它，该请求是基于 WebSocket 协议，发送过来的消息都由它来接收。由于这是 Spring Boot 的项目，所以需要标记 Component 注解将它注册到容器中。</p><p>这里设置了一个定时任务，使用 Java 自带的 Timer 定时器类，每隔 500ms 将格式化的时间发送给浏览器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ServerEndpoint(&quot;/showTime&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShowTimeEndPoint</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个定时任务</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Timer</span> <span class="variable">timer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Timer</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接建立时被调用</span></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onOpen</span><span class="params">(Session session, EndpointConfig config)</span> &#123;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>);</span><br><span class="line">        timer.schedule(<span class="keyword">new</span> <span class="title class_">TimerTask</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">dateTime</span> <span class="operator">=</span> sdf.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">                    session.getBasicRemote().sendText(dateTime);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">3000</span>, <span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收到客户端发送的数据时被调用</span></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(String message, Session session)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接关闭时调用该方法</span></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClose</span><span class="params">(Session session)</span> &#123;</span><br><span class="line">        timer.cancel(); <span class="comment">// 关闭计时器</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这样子还是不够，需要注册一个 <code>ServerEndpointExporter</code> 类到容器中，这样做的目的就在于，让它去自动识别那些带 ServerEndpoint 注解的组件，使其真正的生效起来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebsocketConfig</span> &#123;</span><br><span class="line">    <span class="comment">// 注册这个组件的目的是，让它去自动识别那些带 ServerEndpoint 注解的组件</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServerEndpointExporter <span class="title function_">serverEndpointExporter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServerEndpointExporter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，后端部分完成了。</p><h3 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h3><p>运行 Spring Boot 程序，访问 <a href="http://localhost:8080/">http://localhost:8080/</a> 页面，运行的结果如下。</p><p><img src="/journal/websocket-tutoral/lj2dk-2ov9w.gif" alt="lj2dk-2ov9w.gif" loading="lazy"></p><p>用户在刷新页面的时候，创建 WebSocket 对象的时候就已经触发了 onopen 方法，表示我已经连接了。之后有一个三秒的等待，也就是后端的定时器部分。三秒之后，后端就开始发送消息到浏览器，每隔 500 ms 发送一次消息。</p><p>就有实时显示的效果了。</p><p>最后点击断开连接是调用了 close 方法，这样就和服务器断开了连接，时间也就不再显示出来了。</p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> WebSocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    
    
    <entry>
      <title>SpringBoot 错误处理机制</title>
      <link href="/journal/error-handing/"/>
      <url>/journal/error-handing/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="默认规则"><a href="#默认规则" class="headerlink" title="默认规则"></a>默认规则</h2><p>Spring Boot 提供了一个默认的 <code>/error</code> 路径来处理所有错误的映射。但是，同样的错误在不同的客户端下显示的效果是完全不一样的。</p><p>比如，在做前后端分离的应用程序时，使用 Postman、OkHttp 等这类工具。通过它来发送一个不存在的路径时，它返回的错误信息是 JSON 格式的。</p><p><img src="/journal/error-handing/image-20210710104356541.png" alt="image-20210710104356541" loading="lazy"></p><span id="more"></span><p>如果用的是浏览器来访问一个不正确的页面，那么它是这样的。它将会返回一个</p><p><img src="/journal/error-handing/image-20210710104540951.png" alt="image-20210710104540951" loading="lazy"></p><h2 id="自定义错误页"><a href="#自定义错误页" class="headerlink" title="自定义错误页"></a>自定义错误页</h2><p>自定义错误页非常的简单，将错误页放到项目路径 <code>/resources/templates/error</code> 或者放到 <code>/resources/public/error</code> 这个文件夹下即可。</p><p>就拿之前的模拟的后台系统来说吧，有一个 404 错误页和 500 的错误页，我们将其放进来，放到 <code>templates/error</code> 这个目录下吧。放完之后，如下所示。且文件名必须是与错误码对应的 html 文件，如果想用这个 html 文件代表一类错误码，比如 5xx.html（5 开头的代表着服务器端的错误）</p><p><img src="/journal/error-handing/image-20210710204038982.png" alt="image-20210710204038982" loading="lazy"></p><blockquote><p>注意，放到 <code>templates/error</code> 错误页时，由于 templates 是加载模板引擎，放入 html 文件时，需要在 html 标签对中声明一下模板引擎 <code>xmlns:th=&quot;http://www.thymeleaf.org&quot;</code></p></blockquote><h3 id="测试-404-页面"><a href="#测试-404-页面" class="headerlink" title="测试 404 页面"></a>测试 404 页面</h3><p>我们访问一个路径不存在的页面，运行效果如下。</p><p><img src="/journal/error-handing/image-20210710204450972.png" alt="image-20210710204450972" loading="lazy"></p><h3 id="测试-500-页面"><a href="#测试-500-页面" class="headerlink" title="测试 500 页面"></a>测试 500 页面</h3><p>我们在登录页面故意引发一个算数异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&#123;&quot;/login&quot;, &quot;/&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">login</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">2</span> / <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我在运行的时候，运行在 Tomcat 中出现的错误页面，居然是在打成 war 包时出现的错误页面。能够在 Spring Boot 中做出现这样的页面也真的是蛮幸运的。</p><p><img src="/journal/error-handing/image-20210710205338581.png" alt="image-20210710205338581" loading="lazy"></p><p>这总要找找原因吧，这个问题后面猜测估计是拦截器写的有问题。以下是我原来的拦截器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginStatusConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;/css/**&quot;</span>, <span class="string">&quot;/fonts/**&quot;</span>, <span class="string">&quot;/images/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/js/**&quot;</span>, <span class="string">&quot;/login&quot;</span>, <span class="string">&quot;/login_do&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我把拦截器的写法改成这样，也就是排除了将根目录下请求路径（不包括子路径），也就是 <code>/*</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginStatusConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/*&quot;</span>, <span class="string">&quot;/css/**&quot;</span>, <span class="string">&quot;/fonts/**&quot;</span>, <span class="string">&quot;/images/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/js/**&quot;</span>, <span class="string">&quot;/login&quot;</span>, <span class="string">&quot;/login_do&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们重新运行一下，看到下面的效果就知道了。</p><p><img src="/journal/error-handing/image-20210710210219440.png" alt="image-20210710210219440" loading="lazy"></p><h2 id="异常处理的原理"><a href="#异常处理的原理" class="headerlink" title="异常处理的原理"></a>异常处理的原理</h2><p>异常处理中，有一个自动配置类，叫做 <code>ErrorMvcAutoConfiguration</code> ，它帮助我们配置好了异常处理的规则。同时有一些属性是从 <code>ServerProperties</code> , <code>WebMvcProperties </code> 和 <code>ResourceProperties</code> 中获取来的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties(&#123; ServerProperties.class, ResourceProperties.class, WebMvcProperties.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ErrorMvcAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> ServerProperties serverProperties;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">ErrorMvcAutoConfiguration</span><span class="params">(ServerProperties serverProperties)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.serverProperties = serverProperties;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h3><p>在该自动配置类中，注册了如下组件：</p><ul><li>DefaultErrorAttributes</li><li>BasicErrorController</li></ul><h4 id="BasicErrorController"><a href="#BasicErrorController" class="headerlink" title="BasicErrorController"></a>BasicErrorController</h4><p>先来谈谈 <code>BasicErrorController</code> 这个类，Controller 作为控制层的类，当然就是作为请求处理的类了。以下是它的部分源码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasicErrorController</span> <span class="keyword">extends</span> <span class="title class_">AbstractErrorController</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ErrorProperties errorProperties;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>server.error.path</code> 可以在配置文件中手动配置错误的映射路径，如果这个没有去配置，那么它会去找<code>error.path</code> 这个配置项是否已经配置，如果还是没有，则使用默认的错误处理请求路径 <code>/error</code>，这个错误处理请求路径在页面中的 whitelabel 中可以看到。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This application has no explicit mapping for /error, so you are seeing this as a fallback.</span><br></pre></td></tr></table></figure><p>然后，该类中还有这两个地方标注了 <code>RequestMapping</code> 注解，一个利用是浏览器是访问错误路径时所返回的内容，另外一个就是使用 Postman 等这种工具访问错误页时，返回的是 JSON 格式的错误信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这个方法是浏览器访问错误页时，返回 html 的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(produces = MediaType.TEXT_HTML_VALUE)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">errorHtml</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="type">HttpStatus</span> <span class="variable">status</span> <span class="operator">=</span> getStatus(request);</span><br><span class="line">    Map&lt;String, Object&gt; model = Collections</span><br><span class="line">        .unmodifiableMap(getErrorAttributes(request, getErrorAttributeOptions(request, MediaType.TEXT_HTML)));</span><br><span class="line">    response.setStatus(status.value());</span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> resolveErrorView(request, response, status, model);</span><br><span class="line">    <span class="keyword">return</span> (modelAndView != <span class="literal">null</span>) ? modelAndView : <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;error&quot;</span>, model);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这个方法是用 Postman 等请求工具试，通过 JSON 的格式返回错误信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">error</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="type">HttpStatus</span> <span class="variable">status</span> <span class="operator">=</span> getStatus(request);</span><br><span class="line">    <span class="keyword">if</span> (status == HttpStatus.NO_CONTENT) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(status);</span><br><span class="line">    &#125;</span><br><span class="line">    Map&lt;String, Object&gt; body = getErrorAttributes(request, getErrorAttributeOptions(request, MediaType.ALL));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(body, status);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认的错误页是在自动配置类中，有一个 StaticView 的内部类，这个内部类中里面有默认的错误页。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Simple &#123;<span class="doctag">@link</span> View&#125; implementation that writes a default HTML error page.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">StaticView</span> <span class="keyword">implements</span> <span class="title class_">View</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">MediaType</span> <span class="variable">TEXT_HTML_UTF8</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MediaType</span>(<span class="string">&quot;text&quot;</span>, <span class="string">&quot;html&quot;</span>, StandardCharsets.UTF_8);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Log</span> <span class="variable">logger</span> <span class="operator">=</span> LogFactory.getLog(StaticView.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">render</span><span class="params">(Map&lt;String, ?&gt; model, HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">        <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (response.isCommitted()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> getMessage(model);</span><br><span class="line">            logger.error(message);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        response.setContentType(TEXT_HTML_UTF8.toString());</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">timestamp</span> <span class="operator">=</span> model.get(<span class="string">&quot;timestamp&quot;</span>); <span class="comment">// 拿到时间戳</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">message</span> <span class="operator">=</span> model.get(<span class="string">&quot;message&quot;</span>); <span class="comment">// 拿到错误信息</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">trace</span> <span class="operator">=</span> model.get(<span class="string">&quot;trace&quot;</span>); <span class="comment">// 拿到堆栈信息</span></span><br><span class="line">        <span class="keyword">if</span> (response.getContentType() == <span class="literal">null</span>) &#123;</span><br><span class="line">            response.setContentType(getContentType());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 错误页的 html 字符串拼接部分</span></span><br><span class="line">        builder.append(<span class="string">&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Whitelabel Error Page&lt;/h1&gt;&quot;</span>).append(</span><br><span class="line">            <span class="string">&quot;&lt;p&gt;This application has no explicit mapping for /error, so you are seeing this as a fallback.&lt;/p&gt;&quot;</span>)</span><br><span class="line">            .append(<span class="string">&quot;&lt;div id=&#x27;created&#x27;&gt;&quot;</span>).append(timestamp).append(<span class="string">&quot;&lt;/div&gt;&quot;</span>)</span><br><span class="line">            .append(<span class="string">&quot;&lt;div&gt;There was an unexpected error (type=&quot;</span>).append(htmlEscape(model.get(<span class="string">&quot;error&quot;</span>)))</span><br><span class="line">            .append(<span class="string">&quot;, status=&quot;</span>).append(htmlEscape(model.get(<span class="string">&quot;status&quot;</span>))).append(<span class="string">&quot;).&lt;/div&gt;&quot;</span>);</span><br><span class="line">        <span class="comment">// 如果有错误信息，则展示出来</span></span><br><span class="line">        <span class="keyword">if</span> (message != <span class="literal">null</span>) &#123;</span><br><span class="line">            builder.append(<span class="string">&quot;&lt;div&gt;&quot;</span>).append(htmlEscape(message)).append(<span class="string">&quot;&lt;/div&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果错误中包含着堆栈的信息，则将堆栈信息展示出来</span></span><br><span class="line">        <span class="keyword">if</span> (trace != <span class="literal">null</span>) &#123;</span><br><span class="line">            builder.append(<span class="string">&quot;&lt;div style=&#x27;white-space:pre-wrap;&#x27;&gt;&quot;</span>).append(htmlEscape(trace)).append(<span class="string">&quot;&lt;/div&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        builder.append(<span class="string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line">        response.getWriter().append(builder.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">htmlEscape</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (input != <span class="literal">null</span>) ? HtmlUtils.htmlEscape(input.toString()) : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getMessage</span><span class="params">(Map&lt;String, ?&gt; model)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">path</span> <span class="operator">=</span> model.get(<span class="string">&quot;path&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Cannot render error page for request [&quot;</span> + path + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (model.get(<span class="string">&quot;message&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">            message += <span class="string">&quot; and exception [&quot;</span> + model.get(<span class="string">&quot;message&quot;</span>) + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        message += <span class="string">&quot; as the response has already been committed.&quot;</span>;</span><br><span class="line">        message += <span class="string">&quot; As a result, the response may have the wrong status code.&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getContentType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;text/html&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="DefaultErrorAttributes"><a href="#DefaultErrorAttributes" class="headerlink" title="DefaultErrorAttributes"></a>DefaultErrorAttributes</h4><p>就是使用 Postman 这个工具类的时候，返回的错误信息是 JSON 格式的。错误信息都放在 <code>DefaultErrorAttributes</code> 这个类中。</p><p>这里面有个 getErrorAttributes 的属性，里面就放着于 JSON 中对应的一些属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">getErrorAttributes</span><span class="params">(WebRequest webRequest, ErrorAttributeOptions options)</span> &#123;</span><br><span class="line">    Map&lt;String, Object&gt; errorAttributes = getErrorAttributes(webRequest, options.isIncluded(Include.STACK_TRACE));</span><br><span class="line">    <span class="keyword">if</span> (Boolean.TRUE.equals(<span class="built_in">this</span>.includeException)) &#123;</span><br><span class="line">        options = options.including(Include.EXCEPTION);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!options.isIncluded(Include.EXCEPTION)) &#123;</span><br><span class="line">        errorAttributes.remove(<span class="string">&quot;exception&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!options.isIncluded(Include.STACK_TRACE)) &#123;</span><br><span class="line">        errorAttributes.remove(<span class="string">&quot;trace&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!options.isIncluded(Include.MESSAGE) &amp;&amp; errorAttributes.get(<span class="string">&quot;message&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">        errorAttributes.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!options.isIncluded(Include.BINDING_ERRORS)) &#123;</span><br><span class="line">        errorAttributes.remove(<span class="string">&quot;errors&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> errorAttributes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>堆栈信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addStackTrace</span><span class="params">(Map&lt;String, Object&gt; errorAttributes, Throwable error)</span> &#123;</span><br><span class="line">    <span class="type">StringWriter</span> <span class="variable">stackTrace</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringWriter</span>();</span><br><span class="line">    error.printStackTrace(<span class="keyword">new</span> <span class="title class_">PrintWriter</span>(stackTrace));</span><br><span class="line">    stackTrace.flush();</span><br><span class="line">    errorAttributes.put(<span class="string">&quot;trace&quot;</span>, stackTrace.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是直接访问 <code>/error</code> 这个错误页，那么它便会返回 999 状态码。对应的源码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addStatus</span><span class="params">(Map&lt;String, Object&gt; errorAttributes, RequestAttributes requestAttributes)</span> &#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">status</span> <span class="operator">=</span> getAttribute(requestAttributes, RequestDispatcher.ERROR_STATUS_CODE);</span><br><span class="line">    <span class="keyword">if</span> (status == <span class="literal">null</span>) &#123;</span><br><span class="line">        errorAttributes.put(<span class="string">&quot;status&quot;</span>, <span class="number">999</span>); <span class="comment">// 999 状态码</span></span><br><span class="line">        errorAttributes.put(<span class="string">&quot;error&quot;</span>, <span class="string">&quot;None&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    errorAttributes.put(<span class="string">&quot;status&quot;</span>, status);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        errorAttributes.put(<span class="string">&quot;error&quot;</span>, HttpStatus.valueOf(status).getReasonPhrase());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        <span class="comment">// Unable to obtain a reason</span></span><br><span class="line">        errorAttributes.put(<span class="string">&quot;error&quot;</span>, <span class="string">&quot;Http Status &quot;</span> + status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> SpringBoot 开发学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Thymeleaf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POST 请求不支持的问题</title>
      <link href="/journal/request-method-POST-not-supported-resolved/"/>
      <url>/journal/request-method-POST-not-supported-resolved/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h2><p>昨天，在初次使用 Thymeleaf 这个模版引擎，做登录的时候。如果登录成功，就不会有下面这个错误，如果是登录失败或者啥都没输入都会报错。</p><p>控制台给出的警告信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2021-07-08 19:02:27.692  WARN 13800 --- [p-nio-80-exec-1] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method <span class="string">&#x27;POST&#x27;</span> not supported]</span><br></pre></td></tr></table></figure><p>点击登录的时候，发送请求时爆出了一堆信息，错误码为 405 。</p><p><img src="/journal/request-method-POST-not-supported-resolved/QQ%E6%88%AA%E5%9B%BE20210708190750.png" loading="lazy"></p><p>刚开始自以为是的认为是 Thymeleaf 的问题，甚至还天真的认为是 SpringBoot 整合的 web 模块有 bug ，认为这个 bug 是没有处理 POST 请求。后面发现其实都不是，是我的问题😂😂。 </p><span id="more"></span><h2 id="造成的原因"><a href="#造成的原因" class="headerlink" title="造成的原因"></a>造成的原因</h2><p>登录处理的逻辑如下：</p><p>用户在提交表单信息之后，就通过这个方法来对请求进行处理。处理的逻辑很简单，如果用户名和密码都对啦，则进入主页，否则就请求转发到登录页面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/login_do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">loginDo</span><span class="params">(User user, HttpSession session, Model model)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;xiaohehe&quot;</span>.equals(user.getUsername()) &amp;&amp; <span class="string">&quot;123456&quot;</span>.equals(user.getPassword())) &#123;</span><br><span class="line">        session.setAttribute(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/index.html&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;用户名或密码不对&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>登录界面的请求如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&#123;&quot;/login&quot;, &quot;/&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">login</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我犯了一个非常低级的错误。就是请求转发时，请求的类型没有对应上。登录验证的时候发现登录操作用的是 POST 请求，而我转发的目标请求是只接收 GET 请求，结果导致请求类型不一致，导致了 405 错误。这才是最根本的原因。</p><h2 id="解决的办法"><a href="#解决的办法" class="headerlink" title="解决的办法"></a>解决的办法</h2><p>使用重定向是一种办法。重定向就是发送了一个新的请求，原来的请求结束了。虽然不报错，但是这样确没有提示我说“用户名或密码不对”。所以登录失败之后，就直接将这个页面返回给浏览器端就好了。</p><p>正确的写法是这样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/login_do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">loginDo</span><span class="params">(User user, HttpSession session, Model model)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;xiaohehe&quot;</span>.equals(user.getUsername()) &amp;&amp; <span class="string">&quot;123456&quot;</span>.equals(user.getPassword())) &#123;</span><br><span class="line">        session.setAttribute(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/index.html&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;用户名或密码不对&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看来是我想太多，想当然。</p>]]></content>
      
      
      <categories>
          
          <category> 编程常见问题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Thymeleaf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yaml 的用法和自定义绑定配置类的提示</title>
      <link href="/journal/yaml-properties/"/>
      <url>/journal/yaml-properties/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="什么是-yaml"><a href="#什么是-yaml" class="headerlink" title="什么是 yaml"></a>什么是 yaml</h2><p>YAML 是 “YAML Ain’t Markup Language” （YAML不是一种标记语言）的递归缩写。在开发的这种语言时，YAML的意思其实是 “Yet Another Markup Language”（仍是一种标记语言）。</p><h2 id="yaml-基本语法"><a href="#yaml-基本语法" class="headerlink" title="yaml 基本语法"></a>yaml 基本语法</h2><ul><li><p>key: value; kv 之间有空格大小写敏感</p></li><li><p>使用缩进表示层级关系</p></li><li><p>缩进不允许使用 tab，只允许空格</p></li><li><p>缩进的空格数不重要，只要相同层级的元素左对齐即可</p></li><li><p>‘#‘ 表示注释</p></li><li><p>”与” 表示字符串内容会被转义/不转义</p></li></ul><span id="more"></span><h2 id="yaml-数据类型"><a href="#yaml-数据类型" class="headerlink" title="yaml 数据类型"></a>yaml 数据类型</h2><h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><p>单个的，不可再分的值。date、boolean、string、number、null 。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">k:</span> <span class="string">v</span></span><br></pre></td></tr></table></figure><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>键值对集合。map、hash、set、object</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 行内写法</span></span><br><span class="line"><span class="attr">k:</span> &#123;<span class="attr">k1:</span> <span class="string">v1</span>, <span class="attr">k2:</span> <span class="string">v2</span>, <span class="attr">k3:</span> <span class="string">v3</span>&#125;</span><br><span class="line"><span class="comment"># 或者这样子</span></span><br><span class="line"><span class="attr">k:</span> </span><br><span class="line">  <span class="attr">k1:</span> <span class="string">v1</span></span><br><span class="line">  <span class="attr">k2:</span> <span class="string">v2</span></span><br><span class="line">  <span class="attr">k3:</span> <span class="string">v3</span></span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>一组按次序排列的值。array、list、queue</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 行内写法</span></span><br><span class="line"><span class="attr">k:</span> [<span class="string">v1</span>, <span class="string">v2</span>, <span class="string">v3</span>]</span><br><span class="line"><span class="comment"># 或者这样子</span></span><br><span class="line"><span class="attr">k:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="string">v1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">v2</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">v3</span></span><br></pre></td></tr></table></figure><h2 id="读取-yaml-的配置文件"><a href="#读取-yaml-的配置文件" class="headerlink" title="读取 yaml 的配置文件"></a>读取 yaml 的配置文件</h2><p>和之前读取 properties 配置文件一样，通过 ConfigurationProperties 注解来将配置文件中的配置项加载到配置类中。</p><h3 id="两个配置类"><a href="#两个配置类" class="headerlink" title="两个配置类"></a>两个配置类</h3><p>以下有两个 java 代码，分别是用户类和宠物类。这是用户类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Pet pet;</span><br><span class="line">    <span class="keyword">private</span> String[] interests;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; animal;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; score;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Double&gt; salarys;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, List&lt;Pet&gt;&gt; allPets;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是宠物类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double weight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对应的-yaml-写法"><a href="#对应的-yaml-写法" class="headerlink" title="对应的 yaml 写法"></a>对应的 yaml 写法</h3><p>参照上面的基本语法和数据类型，大致就能够写出来对应的 yaml 配置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">userName:</span> <span class="string">小赫赫</span></span><br><span class="line">  <span class="attr">boss:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">2019</span><span class="string">/01/01</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">23</span></span><br><span class="line">  <span class="attr">pet:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">柯基</span></span><br><span class="line">    <span class="attr">weight:</span> <span class="number">30.12</span></span><br><span class="line">  <span class="attr">interests:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">bilibili</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">acgn</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">running</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">coding</span></span><br><span class="line">  <span class="attr">animal:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">pig</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">chicken</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">duck</span></span><br><span class="line">  <span class="attr">score:</span></span><br><span class="line">    <span class="attr">java:</span> <span class="number">100</span></span><br><span class="line">    <span class="attr">webui:</span> <span class="number">99</span></span><br><span class="line">    <span class="attr">math:</span> <span class="number">95</span></span><br><span class="line">  <span class="attr">salarys:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">1000.0</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">999.98</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">999.99</span></span><br><span class="line">  <span class="attr">allPets:</span></span><br><span class="line">    <span class="attr">cat:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tomcat</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">30</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">xixi</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">10</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">heihei</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">dog:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tomdog</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">30</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">xiaoqiang</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">40</span></span><br></pre></td></tr></table></figure><h3 id="遇到的疑问"><a href="#遇到的疑问" class="headerlink" title="遇到的疑问"></a>遇到的疑问</h3><p>Q1：为什么 interests 、animal 、salarys 这三个写法都是一样的呢？</p><p>interests 对应 java 配置类中的属性 interests ，其类型是 String 数组类型。而 animal 类型对应的是 List 集合类型。这两者其实没什么区别，因为 List 集合底层很有可能是数组（也有可能是以链表的形式），所以我认为是没什么区别的。</p><p>而 salary 就有区别了，它是集合类型，集合中的元素是不能重复的。所以我们可以测试测试。</p><p>我在 animal 中再添加一个 dog</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">animal:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pig</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">chicken</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">duck</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">dog</span></span><br></pre></td></tr></table></figure><p>我在 salarys 中再添加一个相同的薪资</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">salarys:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">1000.0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">999.98</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">999.99</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">999.99</span></span><br></pre></td></tr></table></figure><p>得到的结果如下。可以看出，虽然写法一样，但是展示的效果还是取决于配置类中的数据类型是怎样的。</p><p><img src="/journal/yaml-properties/image-20210706115100847.png" alt="image-20210706115100847" loading="lazy"></p><p>比如 Map 集合是用 kv 来表示的，其实实体类也是可以用 kv 来表示的。</p><p>Q2：为什么用 2019-01-01 会转换异常？</p><p>在我测试的时候，需要在实体类上配置 @DateTimeFormat 注解，要我们自己来将日期来格式化。它默认的格式为 <code>yyyy/MM/dd HH:mm:ss</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Date birth;</span><br></pre></td></tr></table></figure><p>Q3：我听说 yaml 中的字符串类型，字符串两端可以不加单引号或者双引号，也可以加，那我觉得没啥区别呀。是不是没什么用呀？</p><p>我觉得有用，而且是非常有用。单引号和双引号的区别可以决定将转义字符将其转义，比如，我们可以测试一下，这里有一个 yaml 的配置文件，比如我们将字符串将其用单引号包裹起来会是怎么样的。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">userName:</span> <span class="string">&#x27;小赫赫\n大潮吧&#x27;</span></span><br></pre></td></tr></table></figure><p>在控制台输出的运行结果如下，可知，使用单引号之后，字符串转义字符的转义功能失效了，直接将 <code>\n</code> 当成字符串打印了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">小赫赫\n大潮吧</span><br></pre></td></tr></table></figure><p>如果我将单引号换成双引号，那么它将出现什么样的情况呢？</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">userName:</span> <span class="string">&quot;小赫赫\n大潮吧&quot;</span></span><br></pre></td></tr></table></figure><p>在控制台输出的运行结果如下，可知，使用双引号之后，字符串的转义字符的功能是正常的了，所以就换行了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">小赫赫</span><br><span class="line">大潮吧</span><br></pre></td></tr></table></figure><p>那我不加呢？不加就和使用单引号一样。</p><h2 id="自定义配置类的提示"><a href="#自定义配置类的提示" class="headerlink" title="自定义配置类的提示"></a>自定义配置类的提示</h2><p>如果要让我们的自定义的配置类生效，那么非常简单，只需要引入下面的依赖就好了。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后，将项目进行重新运行一下，可以看到这里有我们自定义的配置类的提示。但是请看 <code>person.user-name</code> 这个属性，之前我们写的时候是 <code>person.userName</code> 是这样的。其实提示上的写法也是可以的。因为 yaml 会将大写的字字母给变成为 <code>-小写字母</code> 的形式。</p><p><img src="/journal/yaml-properties/QQ%E6%88%AA%E5%9B%BE20210706150613.jpg" loading="lazy"></p><p>除此之外，这个配置类的提示的依赖，似乎在运行的时候起不到任何所用，只在开发的使用才有用。所以可以这样将这个依赖在打包时排除。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sprng-boot-configuration- processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然，不排除也是可以的。只不过会占用几百 k 的空间大小而已。</p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> SpringBoot 开发学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> yaml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 网络请求问题</title>
      <link href="/journal/Android-network-problem/"/>
      <url>/journal/Android-network-problem/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在使用 OkHttp 的封装工具类 OkHttpUtils 向 Tomcat 发送请求的时候，出现了一个错误。错误描述如下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CLEARTEXT communication not supported: [ConnectionSpec(cipherSuites=[TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, TLS_DHE_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, TLS_DHE_RSA_WITH_AES_128_CBC_SHA, ......]</span><br></pre></td></tr></table></figure><p>造成的原因是因为从 Android P（9.x）之后的版本不能够再进行明文的传输数据。http 就是一种明文传输的协议，需要对请求进行加密，比如使用 https 这种协议。说白了为了安全起见</p><p>而我在发送请求的时候正好也是明文传输的。</p><span id="more"></span><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="修改项目的配置"><a href="#修改项目的配置" class="headerlink" title="修改项目的配置"></a>修改项目的配置</h3><p>新建一个 xml 文件，在 resources 文件夹下新建一个名字为 xml 的文件夹 ，新建一个文件名为 network_security_config.xml 内容如下。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">network-security-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base-config</span> <span class="attr">cleartextTrafficPermitted</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">network-security-config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后再 AndroidManifest.xml 文件中，在 application 标签对中添加 android:networkSecurityConfig 和 android:usesCleartextTraffic ，参照下面的方式进行配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">&quot;@mipmap/ic_launcher&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:roundIcon</span>=<span class="string">&quot;@mipmap/ic_launcher_round&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:networkSecurityConfig</span>=<span class="string">&quot;@xml/network_security_config&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:usesCleartextTraffic</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">&quot;@style/Theme.CarRent&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 省略的内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后重新编译（Build）一下这个项目，就可以了。</p><h3 id="设置安全链接"><a href="#设置安全链接" class="headerlink" title="设置安全链接"></a>设置安全链接</h3><p>也就是将 Tomcat 设置成 https 的协议。这个要是在本地开发的话我觉得倒是没必要，甚至为了一个 https 去弄还麻烦很多。</p><p>如果是 Tomcat 需要部署到生产环境，则为了数据传输安全，请使用 https 这种安全加密的协议。</p>]]></content>
      
      
      <categories>
          
          <category> 编程常见问题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 之 web 场景</title>
      <link href="/journal/springboot-web-study/"/>
      <url>/journal/springboot-web-study/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>SpringBoot 的 web 场景，其实就是 Spring MVC，使用方式和 Spring MVC 的用法是一模一样的。但是被整合到 SpringBoot 中，有些新的用法还是需要去学习学习的。</p><h2 id="路径访问"><a href="#路径访问" class="headerlink" title="路径访问"></a>路径访问</h2><p>在学习了 SpringBoot 中的静态资源访问。其中，默认就给了我们 4 个设置静态资源的目录，他们分别是 <code>static</code>、<code>public</code>、<code>resources</code>、<code>META-INF/resources</code>。不过，在使用 Spring Initializer 来构建我们的 Spring Boot 项目时，默认就有一个 static 目录用户放置静态资源文件夹。</p><span id="more"></span><blockquote><p>什么时静态资源，所谓的静态资源就是图片、视频、音频、css 文件、js 文件等等。</p></blockquote><p>当我们在这 4 个文件中放置四张不同的图片。访问这些图片看看能不能访问得到。</p><p><img src="/journal/springboot-web-study/QQ%E6%88%AA%E5%9B%BE20210629200856.png" loading="lazy"></p><blockquote><p>在访问路径的时候，以下 4 访问路径的方式是错误的：</p><p><a href="http://localhost:8080/static/FIL767.png">http://localhost:8080/static/FIL767.png</a></p><p><a href="http://localhost:8080/public/FIL767.png">http://localhost:8080/public/FIL767.png</a></p><p><a href="http://localhost:8080/resources/FIL767.png">http://localhost:8080/resources/FIL767.png</a></p><p><a href="http://localhost:8080/META-INF/resources/FIL767.png">http://localhost:8080/META-INF/resources/FIL767.png</a></p><p>正确的访问方式：<a href="http://localhost:8080/FIL767.png">http://localhost:8080/FIL767.png</a></p><p>为什么不要访问前缀就可访问？这个问题，后面会有提到。</p></blockquote><p>访问图片 FIL767.png</p><p><img src="/journal/springboot-web-study/QQ%E6%88%AA%E5%9B%BE20210629201020.png" loading="lazy"></p><p>访问图片 FIL770.png</p><p><img src="/journal/springboot-web-study/QQ%E6%88%AA%E5%9B%BE20210629201113.png" loading="lazy"></p><p>访问图片 FIL2893.png</p><p><img src="/journal/springboot-web-study/QQ%E6%88%AA%E5%9B%BE20210629201227.png" loading="lazy"></p><p>访问图片 FIL2893.png</p><p><img src="/journal/springboot-web-study/QQ%E6%88%AA%E5%9B%BE20210629202137.png" loading="lazy"></p><p>这四张图片都可以正常访问的到。</p><h3 id="路径访问的先后问题"><a href="#路径访问的先后问题" class="headerlink" title="路径访问的先后问题"></a>路径访问的先后问题</h3><p>如果我在 Controller 中写一个和第一张图片（FIL767.png）一模一样的路径，那么它又该怎么处理呢？是直接报错，还是直接访问静态资源文件或者是 Controller 中的路径？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/FIL767.png&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;这不是图片，你被骗了！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问之后，效果如下。发现访问的不是图片，而是一个页面。</p><p><img src="/journal/springboot-web-study/QQ%E6%88%AA%E5%9B%BE20210629203228.png" loading="lazy"></p><p>由此得知，当 web 模块中出现两个同一个目录的时候，它会先去寻找 Controller 中的有没有这个路径。如果有这个路径，web 模块收到并且返回给用户的浏览器端，如果 Controller 中没有这个路径，那么便会去静态资源管理器中寻找静态资源中有没有这个路径。如果有，将静态资源中的内容返回到浏览器界面。如果静态资源找不到，那么就返回一个 404 错误页面。提示资源不存在。</p><h3 id="修改静态资源访问路径"><a href="#修改静态资源访问路径" class="headerlink" title="修改静态资源访问路径"></a>修改静态资源访问路径</h3><p>接下来，我们来探讨。为什么这 4 种访问方式是有问题的？</p><blockquote><p><a href="http://localhost:8080/static/FIL767.png">http://localhost:8080/static/FIL767.png</a></p><p><a href="http://localhost:8080/public/FIL767.png">http://localhost:8080/public/FIL767.png</a></p><p><a href="http://localhost:8080/resources/FIL767.png">http://localhost:8080/resources/FIL767.png</a></p><p><a href="http://localhost:8080/META-INF/resources/FIL767.png">http://localhost:8080/META-INF/resources/FIL767.png</a></p></blockquote><p>其实在 SpringBoot 中，有一个配置参数，叫做 <code>spring.mvc.static-path-pattern</code> ，它是用于设置静态资源访问路径的访问前缀。默认是没有访问前缀，即访问静态资源文件时，访问的方式是直接从根目录下访问的，上面的访问例子就是这样的。</p><p>我们将 <code>spring.mvc.static-path-pattern</code> 的值为 <code>/res/**</code> ，将其配置成以下方式。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.mvc.static-path-pattern</span>=<span class="string">/res/**</span></span><br></pre></td></tr></table></figure><p>其中 <code>/*</code> 的意思是访问当前目录下的所有静态资源文件，不包含子文件夹。<code>/**</code> 除了访问当前静态资源文件夹下的所有文件，还会访问子文件夹，孙文件夹下所有的静态资源文件。</p><p>修改完成之后，此时访问的时候路径就是这样子的 <a href="http://localhost:8080/res/demo.png">http://localhost:8080/res/demo.png</a> 。比如我们访问 FIL767.png，即访问路径为 <a href="http://localhost:8080/res/FIL767.png">http://localhost:8080/res/FIL767.png</a> 。</p><p><img src="/journal/springboot-web-study/QQ%E6%88%AA%E5%9B%BE20210704154622.png" alt="QQ截图20210704154622.png" loading="lazy"></p><p>看，修改文件夹之后就可以使用 res 前缀去访问静态资源文件。</p><h4 id="这样做的目的"><a href="#这样做的目的" class="headerlink" title="这样做的目的"></a>这样做的目的</h4><p>我觉的这样做的目的是为了将静态资源和其它的请求进行区分开来，还有就是 Spring MVC 有一个拦截器嘛，在配置拦截器的时候，不去拦截静态资源的访问路径即可。</p><h3 id="修改静态资源文件夹"><a href="#修改静态资源文件夹" class="headerlink" title="修改静态资源文件夹"></a>修改静态资源文件夹</h3><p>在最先，我们提到 SpringBoot 集成的 Spring MVC 是默认有 4 个静态资源文件夹。同时，在源码中我们也能够发现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResourceProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>, <span class="string">&quot;classpath:/resources/&quot;</span>, <span class="string">&quot;classpath:/static/&quot;</span>, <span class="string">&quot;classpath:/public/&quot;</span>&#125;;</span><br><span class="line">    <span class="comment">// 其他部分被省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要修改静态资源文件夹，那么需要添加这个配置项 <code>spring.resources.static-locations</code> ，也就是用它来配置静态资源文件夹项。</p><h4 id="危险的骚操作"><a href="#危险的骚操作" class="headerlink" title="危险的骚操作"></a>危险的骚操作</h4><p>这一项可以配置多个，比如我们配置成为当前类路径下，看看能否将 application.properties 配置文件给下载下来。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.resources.static-locations</span>=<span class="string">classpath:/</span></span><br></pre></td></tr></table></figure><p>提示要下载，看来是配置生效了。</p><p><img src="/journal/springboot-web-study/QQ%E6%88%AA%E5%9B%BE20210704160527.png" alt="QQ截图20210704160527.png" loading="lazy"></p><p>打开之后可以查看到 springboot 的配置文件</p><p><img src="/journal/springboot-web-study/QQ%E6%88%AA%E5%9B%BE20210704160637.png" alt="QQ截图20210704160637.png" loading="lazy"></p><p>配置成为类路径的根目录这是一个非常危险的配置操作，因为这样会非常容易将配置文件和编译后的 class 文件暴露到 web 环境中，这样有些坏人<del>（我不是坏人）</del>将 class 文件反编译成 java 文件。最后将源代码造成泄漏导致得不偿失。</p><p>非常不建议配置成 <code>classpath:/</code> ，<del>当然，除非你很勇。</del></p><h4 id="稳妥的配置方式"><a href="#稳妥的配置方式" class="headerlink" title="稳妥的配置方式"></a>稳妥的配置方式</h4><p>比如我们将配置文件配置到当前类路径下的 xiaohehe 文件夹下，那么配置的方式如下。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.resources.static-locations</span>=<span class="string">classpath:/xiaohehe/</span></span><br></pre></td></tr></table></figure><p>此时配置完成，其它的静态资源文件夹就无效了。因为它只认 xiaohehe 这个文件夹作为静态资源，我们现在可以测试测试。</p><p>将这两张图片放置到 xiaohehe 这个文件夹下。</p><p><img src="/journal/springboot-web-study/QQ%E6%88%AA%E5%9B%BE20210704163148.png" loading="lazy"></p><p>访问 FIL770.png</p><p><img src="/journal/springboot-web-study/QQ%E6%88%AA%E5%9B%BE20210704163451.png" loading="lazy"></p><p>访问 FIL2893.png</p><p><img src="/journal/springboot-web-study/QQ%E6%88%AA%E5%9B%BE20210704163522.png" loading="lazy"></p><p>如果我们访问 FIL2895.png 那么肯定找不到，因为它只找 xiaohehe 这个静态资源文件夹。</p><p><img src="/journal/springboot-web-study/QQ%E6%88%AA%E5%9B%BE20210704163714.png" loading="lazy"></p><h4 id="多个静态文件夹的目的"><a href="#多个静态文件夹的目的" class="headerlink" title="多个静态文件夹的目的"></a>多个静态文件夹的目的</h4><p>我想这是因为多人协作的时候吧，这样各放各的文件夹，不会过分的繁琐吧。</p><h2 id="favicon-图标"><a href="#favicon-图标" class="headerlink" title="favicon 图标"></a>favicon 图标</h2><p>favicon 是每个浏览器的中的选项卡（标签）都会显示一张小图标。这个小图标就是 favicon 。在 SpringBoot 中，只要将 favicon.ico 放置到静态资源目录下就会自动显示了。</p><p>不过我在测试的过程中，由于静态资源的路径是有访问前缀的，所以导致放入了 favicon.ico 还是出不来。将 <code>spring.mvc.static-path-pattern</code> 这个静态资源配置项给注释掉即可。还有一种情况就是 favicon.ico 死活都显示不出来，我想说的是，没必要太纠结这个，因为这个不是很重要。</p><p>访问一下试试看。左上角有个小图标已经出现了。</p><p><img src="/journal/springboot-web-study/QQ%E6%88%AA%E5%9B%BE20210704170731.png" loading="lazy"></p><h2 id="其它未使用过的注解"><a href="#其它未使用过的注解" class="headerlink" title="其它未使用过的注解"></a>其它未使用过的注解</h2><p>以前我在使用 Spring MVC 开发 web 程序，我用的最频繁的 mvc 注解有这么 5 个。</p><ul><li><p>@RequestMapping</p></li><li><p>@ResponseBody</p></li><li><p>@RequestParam</p><ul><li>获取请求参数</li><li>同样也可以通过 Map 获取的全部的参数</li></ul></li><li><p>@PathVariable</p><ul><li><p>在路径变量中，它也是一个键值对，所以我们可以将其保存到 Map 中，但是 Map 的键值对泛型都必须为 String 类型的。</p></li><li><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/name/&#123;name&#125;/age/&#123;age&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">getCar</span><span class="params">(<span class="meta">@PathVariable</span> Map&lt;String, String&gt; map)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;name:&quot;</span> + map.get(<span class="string">&quot;name&quot;</span>) + <span class="string">&quot;,age=&quot;</span> + map.get(<span class="string">&quot;age&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行结果：<code>name:xhaohehe,age=18</code></p></li><li><p>如果使用实体类来映射也可以吗？不能，会有一个警告，并且会 500 错误：</p><p><code>Resolved [org.springframework.web.bind.MissingPathVariableException: Missing URI template variable &#39;entity&#39; for method parameter of type Entity]</code></p></li></ul></li><li><p>@RestController（这个注解在学习 SpringBoot 的时才开始用的）</p></li></ul><h3 id="一看就眼熟的那种"><a href="#一看就眼熟的那种" class="headerlink" title="一看就眼熟的那种"></a>一看就眼熟的那种</h3><p>除了这些，今天还有了解到一下注解。并了解其中的含义，测试了它们的用法。</p><ul><li><p>@RequestHeader</p><ul><li><p>获取请求头的信息</p></li><li><p>使用方法，比如我们想获取浏览器标识和主机地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/getHeaderTest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getHeaders</span><span class="params">(<span class="meta">@RequestHeader(&quot;User-Agent&quot;)</span> String userAgent,</span></span><br><span class="line"><span class="params">                         <span class="meta">@RequestHeader(&quot;Host&quot;)</span> String host)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;user-agent:\n&quot;</span> + userAgent + <span class="string">&quot;\nHost:&quot;</span> + host);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user-agent:</span><br><span class="line">Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; WOW64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">80.0</span><span class="number">.3987</span><span class="number">.87</span> Safari/<span class="number">537.36</span> SE <span class="number">2.</span>X MetaSr <span class="number">1.0</span></span><br><span class="line">Host:localhost:<span class="number">8087</span></span><br></pre></td></tr></table></figure></li><li><p>同样的，如果要获取全部的请求头。也可以使用 Map 来接收全部的请求头。</p></li></ul></li><li><p>@RequestAttribute</p><ul><li><p>获取 request 域中的的值</p></li><li><p>使用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestAttrController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/goto&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">goTo</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        request.setAttribute(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;旺财&quot;</span>);</span><br><span class="line">        request.setAttribute(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;12&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/success&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">success</span><span class="params">(<span class="meta">@RequestAttribute(&quot;name&quot;)</span> String name,</span></span><br><span class="line"><span class="params">                          <span class="meta">@RequestAttribute(&quot;age&quot;)</span> String age)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name:&quot;</span> + name + <span class="string">&quot;,age=&quot;</span> + age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行结果：<code>name:旺财,age=12</code></p></li><li><p>它不能向其它的一样使用 Map 来接收全部的 request 请求域中的全部参数</p></li></ul></li><li><p>@RequestBody</p><ul><li><p>获取请求体，只有请求体存在于 POST 请求中，GET 请求中没有请求体。</p></li><li><p>使用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/testBody&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCookieTest</span><span class="params">(<span class="meta">@RequestBody</span> String content)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;content：&quot;</span> + content);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>运行结果</p><p><code>content：name=xiaohehe&amp;age=18&amp;gender=%E7%94%B7</code></p></li></ul></li><li><p>@CookieValue</p><ul><li><p>用于获取浏览器中的 Cookie </p></li><li><p>使用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/getCookieTest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getCookieTest</span><span class="params">(<span class="meta">@CookieValue(&quot;name&quot;)</span> String name,</span></span><br><span class="line"><span class="params">                            <span class="meta">@CookieValue(&quot;age&quot;)</span> String age)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;name:&quot;</span> + name + <span class="string">&quot;,age:&quot;</span> + age);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name:xiaoqiang,age:40</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="MatrixVariable-注解和-UrlPathHelper"><a href="#MatrixVariable-注解和-UrlPathHelper" class="headerlink" title="MatrixVariable 注解和 UrlPathHelper"></a>MatrixVariable 注解和 UrlPathHelper</h3><p>MatrixVariable 也叫矩阵变量，矩阵变量的语法格式如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/user1;name=xiaohehe;age=20/user2;name=bestguo;age=18</span><br></pre></td></tr></table></figure><p>看起来有一点懵逼的感觉，但是这个也不是很难，我们可以通过“变量代换”的方式来帮助我们来理解这个路径。假设 <code>user1;name=xiaohehe;age=20</code> 为 a，<code>user2;name=bestguo;age=18</code> 为 b，所以上面的路径就变成了这副模样。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/a/b</span><br></pre></td></tr></table></figure><p>看，其实它的真实面目还是一个路径。然而，有没有发现。我觉得其实它的本质还是 PathVariable （路径变量），矩阵变量是路径变量的一个变种。</p><p>那么，矩阵变量就是 a 和 b 里面的 user1 和 user2 了（有点强行解释的感觉），因为 user1 和 user2 后面其实并没有等于一个值。即 <code>user1;name=xiaohehe;age=20</code> 和 <code>user2;name=bestguo;age=18</code></p><h4 id="获取矩阵变量中的内容"><a href="#获取矩阵变量中的内容" class="headerlink" title="获取矩阵变量中的内容"></a>获取矩阵变量中的内容</h4><blockquote><p>注意，由于 SpringBoot 默认是将矩阵变量给禁用掉了，所以需要将其开起来。配置的方式需要通过配置 Bean 的方式来自定义配置。不管它，先复制它再说。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> WebMvcConfigurer <span class="title function_">webMvcConfigurer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WebMvcConfigurer</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configurePathMatch</span><span class="params">(PathMatchConfigurer configurer1)</span> &#123;</span><br><span class="line">                <span class="type">UrlPathHelper</span> <span class="variable">helper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlPathHelper</span>();</span><br><span class="line">                <span class="comment">// 禁用分号取消</span></span><br><span class="line">                helper.setRemoveSemicolonContent(<span class="literal">false</span>);</span><br><span class="line">                configurer1.setUrlPathHelper(helper);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>如果我们要获取以下路径中的内容要怎么获取呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8087/matrixVariableTest/user1;name=xiaohehe;age=20/user2;name=bestguo;age=18</span><br></pre></td></tr></table></figure><p>我们试试这种看看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/matrixVariableTest/&#123;user1&#125;/&#123;user2&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">matrixVariableTest</span><span class="params">(<span class="meta">@MatrixVariable(&quot;name&quot;)</span> String name,</span></span><br><span class="line"><span class="params">                                 <span class="meta">@MatrixVariable(&quot;age&quot;)</span> String age)</span> &#123;</span><br><span class="line">    System.out.println(name + <span class="string">&quot;---------&quot;</span> + age);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试了一下，发现有一个警告。页面显示的是 400 错误。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Resolved [org.springframework.web.bind.ServletRequestBindingException: Found more than one match for URI path parameter &#x27;name&#x27; for parameter type [java.lang.String]. Use &#x27;pathVar&#x27; attribute to disambiguate.]</span><br></pre></td></tr></table></figure><p>这个错误的原因是因为 user1 这个矩阵变量中有 name 和 age ，user2 这个矩阵变量中也有 name 和 age ，由于出现了重复的，而 MatrixVariable 去识别的时候发现有两个相同的，所以就有问题了。</p><p>不过在这个警告中有一个建议，那就是在这个注解中加入一条 pathVar 属性，用来区分它们，所以我们可以将上面的代码改写成如下的方式。这次我们从 user1 这个矩阵变量中拿取 name 和 age 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/matrixVariableTest/&#123;user1&#125;/&#123;user2&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">matrixVariableTest</span><span class="params">(<span class="meta">@MatrixVariable(value = &quot;name&quot;, pathVar = &quot;user1&quot;)</span> String name,</span></span><br><span class="line"><span class="params">                                 <span class="meta">@MatrixVariable(value = &quot;age&quot;, pathVar = &quot;user1&quot;)</span> String age)</span> &#123;</span><br><span class="line">    System.out.println(name + <span class="string">&quot;---------&quot;</span> + age);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果有了，页面返回了一个 ok 给我们</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xiaohehe---------20</span><br></pre></td></tr></table></figure><p>那我想两个都拿取该怎么办？那就都拿呗</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/matrixVariableTest/&#123;user1&#125;/&#123;user2&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">matrixVariableTest</span><span class="params">(<span class="meta">@MatrixVariable(value = &quot;name&quot;, pathVar = &quot;user1&quot;)</span> String name,</span></span><br><span class="line"><span class="params">                                 <span class="meta">@MatrixVariable(value = &quot;age&quot;, pathVar = &quot;user1&quot;)</span> String age,</span></span><br><span class="line"><span class="params">                                 <span class="meta">@MatrixVariable(value = &quot;name&quot;, pathVar = &quot;user2&quot;)</span> String name2,</span></span><br><span class="line"><span class="params">                                 <span class="meta">@MatrixVariable(value = &quot;age&quot;, pathVar = &quot;user2&quot;)</span> String age2)</span> &#123;</span><br><span class="line">    System.out.println(name + <span class="string">&quot;---------&quot;</span> + age);</span><br><span class="line">    System.out.println(name2 + <span class="string">&quot;---------&quot;</span> + age2);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xiaohehe---------20</span><br><span class="line">bestguo---------18</span><br></pre></td></tr></table></figure><h4 id="万能的-Map"><a href="#万能的-Map" class="headerlink" title="万能的 Map"></a>万能的 Map</h4><p>矩阵变量中的各个属性和值都可以将其保存至 Map 集合中，但是它的泛型必须为 String, String 类型的。</p><p>如果是这种的方式话，不添加 pathVar ，那么它得到的默认就是第一个 user1 里面的内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/matrixVariableTest/&#123;user1&#125;/&#123;user2&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">matrixVariableTest</span><span class="params">(<span class="meta">@MatrixVariable</span> Map&lt;String, String&gt; user)</span> &#123;</span><br><span class="line">    <span class="comment">// 打印map</span></span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行结果：&#123;name=xiaohehe, age=20&#125;</span></span><br></pre></td></tr></table></figure><p>所以，要获取 user2 中的话，就还需要添加一个 pathVar 参数才能获取到。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/matrixVariableTest/&#123;user1&#125;/&#123;user2&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">matrixVariableTest</span><span class="params">(<span class="meta">@MatrixVariable(pathVar = &quot;user1&quot;)</span> Map&lt;String, String&gt; user1,</span></span><br><span class="line"><span class="params">                                 <span class="meta">@MatrixVariable(pathVar = &quot;user2&quot;)</span> Map&lt;String, String&gt; user2)</span> &#123;</span><br><span class="line">    <span class="comment">// 打印map</span></span><br><span class="line">    System.out.println(user1);</span><br><span class="line">    System.out.println(user2);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行结果如下 </span></span><br><span class="line"><span class="comment">// &#123;name=xiaohehe, age=20&#125;</span></span><br><span class="line"><span class="comment">// &#123;name=bestguo, age=18&#125;</span></span><br></pre></td></tr></table></figure><h4 id="UrlPathHelper-是啥"><a href="#UrlPathHelper-是啥" class="headerlink" title="UrlPathHelper 是啥"></a>UrlPathHelper 是啥</h4><p>这个类是用于解析路径中的信息，比如发送 get 请求中所带的 “?” 后面的参数，以及路径变量和矩阵变量这种写法，全都是由它来解析的。</p><p>矩阵变量默认为禁用的原因，是因为 UrlPathHelper 在解析路径的时候，如果遇到 “;” 那么将 “;” 后面的内容全部给忽略掉了。</p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> SpringBoot 开发学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot开发小技巧</title>
      <link href="/journal/springboot-best-coding/"/>
      <url>/journal/springboot-best-coding/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>SpringBoot 虽然很多配置项都是自动配置的，但是有时候某些配置项需要手动配置。以及通过一些模块来简化 SpringBoot 的开发，提升开发的效率。</p><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js"></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><span id="more"></span>        <div id="aplayer-hKsgavps" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-hKsgavps"),            narrow: false,            autoplay: true,            showlrc: false,            music: {              title: "跑跑卡丁车等待音乐",              author: "跑跑卡丁车官方BGM",              url: "wKgDZlXK1_LQ1kISAAKUa7tW3Rg221.mp3",              pic: "/journal/springboot-best-coding/109951163649852887.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ul><li>引入场景依赖<ul><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter">https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter</a></li></ul></li><li>查看自动配管了哪些(选做)<ul><li>自己分析，引入场景对应的自动配置一般都生效了</li><li>配置文件中 debug = true 开启自动配置报告。Negative (不生效) / Positive (生效)</li></ul></li><li>是否需要修改<ul><li>参照文档修改配置项<br><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#common-application-properties">https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#common-application-properties</a></li><li>自己分析。xxxxProperties绑定了配置文件的哪些。自定义加入或者替换组件<br>@Bean、@Component……</li><li>自定义器 XXXXXCustomizer; </li><li>…..</li></ul></li></ul><h2 id="开发小工具"><a href="#开发小工具" class="headerlink" title="开发小工具"></a>开发小工具</h2><p>非常实用的一些开发小工具</p><h3 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h3><p>简化 JavaBean 的开发，可以不用写重复的构造方法，getter 和 setter 以及 toString 方法。能写出这样的代码真的是天才👍👍。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>安装 idea 的 Lombok 插件。不过我这个版本它自己预装了，没有的话还是要去装一个。</p><p><img src="/journal/springboot-best-coding/QQ%E6%88%AA%E5%9B%BE20210628104113.png" alt="QQ截图20210628104113" loading="lazy"></p><p>相关的注解</p><ul><li>Data 注解：用于生成 JavaBean 中的 setter 、getter 和 toString 方法。</li><li>AllArgsConstructor 注解：用于生成 JavaBean 中的带全部参数的构造方法</li><li>NoArgsConstructor 注解：用于生成 JavaBean 中的带无参数的构造方法</li><li>ToString 注解：用于生成 toString 方法，在 Data 注解中已经包含过</li><li>Slf4j 注解：用于输出日志。</li></ul><h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><p>给 Car 类，自动生成 getter 和 setter 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给 Pet 类生成一个不带参数的构造方法、带全部参数的构造方法和 toString 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span> <span class="comment">// 有参数的构造方法</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span> <span class="comment">// 无参数的构造方法</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在控制层中输出日志</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/springboot2&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;请求进来了~&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, SpringBoot2!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dev-tools"><a href="#dev-tools" class="headerlink" title="dev tools"></a>dev tools</h3><p>dev tools 可以在不点击 idea 的项目重启按钮的情况些，通过项目构建（ctrl + f9）的方式来对项目进行更新。不过这种项目更新实质上是重启 SpringBoot 项目。</p><p>相关的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其实这不算是热更新部署，它仅仅是对项目进行重启而已。甚至在有些电脑，即使加载了 dev tools 重启也无济于事。</p><h3 id="Spring-Initializer"><a href="#Spring-Initializer" class="headerlink" title="Spring Initializer"></a>Spring Initializer</h3><p>它是一个 SpringBoot 的项目初始化向导，通过可视化界面，选择需要引入的场景即可成功的构建成为一个 SpringBoot 项目</p><p><img src="/journal/springboot-best-coding/QQ%E6%88%AA%E5%9B%BE20210628133709.png" alt="QQ截图20210628133709.png" loading="lazy"></p><p>设置项目名和包名</p><p><img src="/journal/springboot-best-coding/QQ%E6%88%AA%E5%9B%BE20210628133648.png" alt="QQ截图20210628133648.png" loading="lazy"></p><p>选择需要导入的场景</p><p><img src="/journal/springboot-best-coding/QQ%E6%88%AA%E5%9B%BE20210628133837.png" alt="QQ截图20210628133837.png" loading="lazy"></p><p>点击 Finish ，开始构建项目。即可构建成为一个 SpringBoot 项目。</p><p><img src="/journal/springboot-best-coding/QQ%E6%88%AA%E5%9B%BE20210628134128.png" alt="QQ截图20210628134128.png" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> SpringBoot 开发学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot注解的学习</title>
      <link href="/journal/springboot-annotations-ususally/"/>
      <url>/journal/springboot-annotations-ususally/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天学习了 SpringBoot 中的一些注解，不过有些注解是 Spring 中的，它们分别是 @Configuration、@Import、@Bean、@Conditional、@ImportResource、@ConfigurationProperties、@EnableConfigurationProperties 注解。</p><p>学完这些注解之后，突然有一个想法。就是之前在 SpringBoot 的 Web 模块的时候，SpringBoot 好像还是需要我们来自己编写拦截器，这就感到费时间，有点不符合 SpringBoot 的少量配置的特点。暑假想自己尝试写一个基于 Spring MVC 的拦截器的第三方库。</p><p><img src="/journal/springboot-annotations-ususally/7af40ad162d9f2d314edf006abec8a136227cc5f.gif" alt="7af40ad162d9f2d314edf006abec8a136227cc5f" loading="lazy"></p><p>我觉得这个还是等到把雷神的 SpringBoot 给弄完，能在暑假之内做出来是最好的了。</p><span id="more"></span><h2 id="Configuration-注解"><a href="#Configuration-注解" class="headerlink" title="Configuration 注解"></a>Configuration 注解</h2><p>Configutation 注解，标记在某一个类上，这个类就成为了一个配置类了。标记的效果等同于在 Spring 的 xml 配置文件一样。</p><blockquote><p>有一个名词叫”注册“，注册的意思就是创建一个对象，像是 new Random(); 这种写法。</p></blockquote><p>既然和 xml 的配置文件一样注册对象，那它向容器中注册对象的方式是这样的。也就是说，需要先声明一个方法，需要在方法上面标记一个 Bean 注解，Bean 注解就是在 Spring 的 ioc 容器（后续简称容器）中添加对象，默认是以方法名作为对象id，返回类型就是对象的类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean(&quot;zhangsan&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">user01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">zhangsan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">return</span> zhangsan;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">user02</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">lisi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;lisi&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">return</span> lisi;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Pet <span class="title function_">pet01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Pet</span>(<span class="string">&quot;tomcat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Pet <span class="title function_">pet02</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Pet</span>(<span class="string">&quot;tomcat222&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，我们可以自己在 Bean 注解中指定id，比如 <code>@Bean(&quot;zhangsan&quot;)</code>，指定名字完之后，那么这个对象的 id 就不再是 user01 ，而是 zhangsan 。</p><h3 id="如何得到容器中的对象"><a href="#如何得到容器中的对象" class="headerlink" title="如何得到容器中的对象"></a>如何得到容器中的对象</h3><p>获取容器的对象也非常简单，和以前使用 ApplicationContext 对象一样，也是利用 getBean 来获取的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Spring IOC容器</span></span><br><span class="line"><span class="type">ConfigurableApplicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(SpringBootApplication.class, args);</span><br><span class="line"><span class="comment">// 获取 user02</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user02</span> <span class="operator">=</span> (User) run.getBean(<span class="string">&quot;user02&quot;</span>);</span><br><span class="line">System.out.println(user02);</span><br><span class="line"><span class="comment">// 获取 zhangsan</span></span><br><span class="line"><span class="type">User</span> <span class="variable">zhangsan</span> <span class="operator">=</span> run.getBean(<span class="string">&quot;zhangsan&quot;</span>, User.class);</span><br><span class="line">System.out.println(zhangsan);</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User&#123;brand=&#x27;lisi&#x27;, age=10&#125;</span><br><span class="line">User&#123;brand=&#x27;zhangsan&#x27;, age=10&#125;</span><br></pre></td></tr></table></figure><h4 id="单实例"><a href="#单实例" class="headerlink" title="单实例"></a>单实例</h4><p>如果我们多次获取容器中的对象，那么我们获取到的对象是否为同一个呢？通过以下代码进行验证。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 两个实例是不是一样的？</span></span><br><span class="line"><span class="type">Pet</span> <span class="variable">pet1</span> <span class="operator">=</span> (Pet) run.getBean(<span class="string">&quot;pet01&quot;</span>);</span><br><span class="line"><span class="type">Pet</span> <span class="variable">pet2</span> <span class="operator">=</span> (Pet) run.getBean(<span class="string">&quot;pet01&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;pet1==pet2 ? &quot;</span> + (pet1 == pet2));</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pet1==pet2 ? <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>运行结果为 true ，意味着所得到的对象实例是单实例的。</p><h4 id="配置类本身也是对象"><a href="#配置类本身也是对象" class="headerlink" title="配置类本身也是对象"></a>配置类本身也是对象</h4><p>我们创建的配置类其实本身也是一个对象。我们也可以将它给调用出来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MyConfig</span> <span class="variable">bean</span> <span class="operator">=</span> run.getBean(MyConfig.class);</span><br><span class="line">System.out.println(bean);</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top.bestguo.config.MyConfig$$EnhancerBySpringCGLIB$$137f765f@62315f22</span><br></pre></td></tr></table></figure><p>不过，我们得到的配置类是一个加强版的类。一看到 CGLIB 就知道，这是一个被代理过的对象，里面的对象也是由 CGLIB 进行代理的。那它代理了什么呢？</p><p>其实，在 SpringBoot 2.3 之后的版本，由于 SpringBoot 2.3 是基于 Spring 5.2+ 的，Configuration 注解多了一个叫做 proxyBeanMethod 的属性，是因为它可以设置 true 和 false ，如果设置成了 true 就是这个对象是被代理的，设置成 false 就是未被代理的。</p><p>那，代理的意义何在呢？🧐🧐</p><h3 id="proxyBeanMethod"><a href="#proxyBeanMethod" class="headerlink" title="proxyBeanMethod"></a>proxyBeanMethod</h3><p>该注解中的属性，默认值为 true 。</p><p>上面部分提到过这个属性设置成 true 和 false ，配置类分别就是被代理和未被代理的。上面也有提到，配置类也是一个对象，配置类对象里面不是有很多方法吗？那我们调用一下这里面的方法试试看。</p><p>如果我多次调用这个配置类对象中的方法，直接获取 ioc 容器中注册的对象，还是仅仅只是单纯的方法调用，每次的调用返回的对象都是不同的呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MyConfig</span> <span class="variable">bean</span> <span class="operator">=</span> run.getBean(MyConfig.class);</span><br><span class="line"><span class="type">User</span> <span class="variable">user01</span> <span class="operator">=</span> bean.user01();</span><br><span class="line"><span class="type">User</span> <span class="variable">user011</span> <span class="operator">=</span> bean.user01();</span><br><span class="line">System.out.println(<span class="string">&quot;从配置容器中调用的方法，是一样的吗？&quot;</span> + (user01 == user011));</span><br></pre></td></tr></table></figure><p>运行结果如下，发现得到的方法是同一个对象。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">从配置容器中调用的方法，是一样的吗？true</span><br></pre></td></tr></table></figure><p>那我们把 proxyBeanMethod 值改成 false 会怎么样呢？运行结果如下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">top.bestguo.config.MyConfig@5bdaf2ce</span><br><span class="line">从配置容器中调用的方法，是一样的吗？false</span><br></pre></td></tr></table></figure><p>很显然，MyConfig 这个配置类不再被代理了，并且这两次的调用都是 false。那我们直接通过 getBean 的方式看看得到的两个对象是否为同一个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">zhangsan</span> <span class="operator">=</span> run.getBean(<span class="string">&quot;zhangsan&quot;</span>, User.class);</span><br><span class="line"><span class="type">User</span> <span class="variable">zhangsan2</span> <span class="operator">=</span> run.getBean(<span class="string">&quot;zhangsan&quot;</span>, User.class);</span><br><span class="line">System.out.println(<span class="string">&quot;是不是同一个？&quot;</span> + (zhangsan == zhangsan2));</span><br></pre></td></tr></table></figure><p>运行结果如下，发现这是同一个对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">是不是同一个？<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>所以，proxyBeanMethod 对象的用途，如果设置成 true ，那么在调用 MyConfig 配置类中的方法时，就会先去拿到这个 Bean 的 id，来确认这个对象是不是存在于容器中，如果存在与容器中，调用配置类中的方法时就直接去拿容器中的对象。</p><p>如果是 false ，它就不会通过 id 去确认容器中是否存在该对象，相当于是直接调用 MyConfig 中的方法而已，并且这个方法返回的对象并不是从容器中直接获取的，而是单纯的在方法中 new 一个对象出来。每一次 new 出来的对象都是不同的。</p><h4 id="使用场景-–-组件依赖"><a href="#使用场景-–-组件依赖" class="headerlink" title="使用场景 – 组件依赖"></a>使用场景 – 组件依赖</h4><blockquote><p>组件的意思就是容器中所实例化的对象。</p></blockquote><p>一位名叫 zhangsan 的主人，它刚刚养了一只狗，这只狗狗的名字叫 ”tomcat“。刚没养几天，主人就要回老家三个月有事情，它只好将这只狗狗放到了宠物临时收养的机构进行收养。等主人回到家，回到宠物临时收养机构领取自己的宠物狗狗。</p><p><img src="/journal/springboot-annotations-ususally/dfjdifjdsi.jpg" alt="7af40ad162d9f2d314edf006abec8a136227cc5f" loading="lazy"></p><p>回到家之后，它去领养。宠物临时收养机构管理人员可能将该主人的狗狗信息丢了，只记得狗狗的名字；或者也有可能什么都记得，管理人员这种行为可将其类比成 proxyBeanMethod 值为 false 和proxyBeanMethod 值为 true 的两种情况。</p><p>以下是主人来领取宠物的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;zhangsan&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">user01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">zhangsan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        zhangsan.setPet(pet01());</span><br><span class="line">        <span class="keyword">return</span> zhangsan;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Pet <span class="title function_">pet01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Pet</span>(<span class="string">&quot;tomcat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 proxyBeanMethod 值为 false 时，也就是狗狗信息丢了，只记得狗狗的名字。我们来验证验证工作人员是否找对了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件依赖示例</span></span><br><span class="line"><span class="type">User</span> <span class="variable">zhangsan</span> <span class="operator">=</span> run.getBean(<span class="string">&quot;zhangsan&quot;</span>, User.class);</span><br><span class="line"><span class="comment">// 判断用户的宠物是容器中的宠物吗</span></span><br><span class="line"><span class="type">Pet</span> <span class="variable">pet1</span> <span class="operator">=</span> (Pet) run.getBean(<span class="string">&quot;pet01&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;用户zhangsan的宠物是它的吗？&quot;</span> + (zhangsan.getPet() == pet1));</span><br></pre></td></tr></table></figure><p>那么执行的结果如下，值为 false。很遗憾，工作人员的失职行为已经是非常严重的了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户zhangsan的宠物是它的吗？false</span><br></pre></td></tr></table></figure><p>如果 proxyBeanMethod 值为 true 时，也就是狗狗信息还在。那么执行的结果如下。很好，工作人员做的不错。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户zhangsan的宠物是它的吗？true</span><br></pre></td></tr></table></figure><h4 id="例子总结"><a href="#例子总结" class="headerlink" title="例子总结"></a>例子总结</h4><p>proxyBeanMethod 为 true 或者为 false 时，对应的模式如下。</p><ul><li>Full(proxyBeanMethods = true) – 如果组件之间有依赖，有依赖的就设置为 true</li><li>Lite(proxyBeanMethods = false) – 如果只是单纯的创建组件到容器中，且组件之间并没有依赖。那么就设置成为 false</li></ul><h2 id="Import-注解"><a href="#Import-注解" class="headerlink" title="Import 注解"></a>Import 注解</h2><p>直接通过该注解，将对象实例化之后保存到容器中。能标记的地方非常之多，比如 SpringBoot 的主程序类、配置类、被 Service、Repository、Controller 标记的地方都可以将其标记。</p><p>存在的意义就是，有些对象是封装在一个外部的 jar 包中的。封装在 jar 包中的源代码是无法直接更改的，也就是说没办法直接标记这些 Component 等等上面提及到的那些注解。所以可以通过这个注解来将对象保存到容器中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;User.class, DBHelper.class&#125;)</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line">    <span class="comment">// coding......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 User 类型的组件</span></span><br><span class="line">String[] strings = run.getBeanNamesForType(User.class);</span><br><span class="line"><span class="keyword">for</span> (String string : strings) &#123;</span><br><span class="line">    System.out.println(string);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(run.getBean(DBHelper.class));</span><br></pre></td></tr></table></figure><p>运行结果如下，其中 DBHelper 本身就是来自于外部的 jar 包。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">top.bestguo.bean.User</span><br><span class="line">zhangsan</span><br><span class="line">user02</span><br><span class="line">ch.qos.logback.classic.db.DBHelper@6e4ea0bd</span><br></pre></td></tr></table></figure><h2 id="Conditional-注解"><a href="#Conditional-注解" class="headerlink" title="Conditional 注解"></a>Conditional 注解</h2><p>该注解也称之为条件注解，该注解的意图就是在特定的场合下，将某一些组件给保存到容器中。其中，它的衍生注解有很多种。如下图所示。</p><p><img src="/journal/springboot-annotations-ususally/QQ%E6%88%AA%E5%9B%BE20210626230931.png" alt="QQ截图20210626230931" loading="lazy"></p><h3 id="ConditionalOnBean-注解"><a href="#ConditionalOnBean-注解" class="headerlink" title="ConditionalOnBean 注解"></a>ConditionalOnBean 注解</h3><p>在学习的时候学习到了 ConditionalOnBean 这个注解，它的意思是当容器中存在某个组件时，那么就将这个对象给实例化保存到容器中，否则就不进行任何的操作。</p><p>它被标记到配置类中方法上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConditionalOnBean(name = &quot;pet01&quot;)</span> <span class="comment">// 当容器中有 pet01 的时候，那么就注册 zhangsan 组件。</span></span><br><span class="line">    <span class="meta">@Bean(&quot;zhangsan&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">user01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">zhangsan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        zhangsan.setPet(pet01());</span><br><span class="line">        <span class="keyword">return</span> zhangsan;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">user02</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">lisi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;lisi&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">return</span> lisi;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Pet <span class="title function_">pet01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Pet</span>(<span class="string">&quot;tomcat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Pet <span class="title function_">pet02</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Pet</span>(<span class="string">&quot;tomcat222&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">pet01</span> <span class="operator">=</span> run.containsBean(<span class="string">&quot;pet01&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;容器中有 pet01 组件吗？&quot;</span> + pet01);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">pet02</span> <span class="operator">=</span> run.containsBean(<span class="string">&quot;pet02&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;容器中有 pet02 组件吗？&quot;</span> + pet02);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">zhangsan</span> <span class="operator">=</span> run.containsBean(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;容器中有 zhangsan 组件吗？&quot;</span> + zhangsan);</span><br></pre></td></tr></table></figure><p>测试结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">容器中有 pet01 组件吗？true</span><br><span class="line">容器中有 pet02 组件吗？true</span><br><span class="line">容器中有 zhangsan 组件吗？false</span><br></pre></td></tr></table></figure><p>测试结果很奇怪，并没有按照我想象中的那样子，也就是 pet01 组件创建它就会创建。后面经过 bilibili 的弹幕中才知道，组件在进行注册的过程中似乎和顺序相关。所以改改顺序看看，将 user01 放到最后。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">user02</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">lisi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;lisi&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">return</span> lisi;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Pet <span class="title function_">pet01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Pet</span>(<span class="string">&quot;tomcat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Pet <span class="title function_">pet02</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Pet</span>(<span class="string">&quot;tomcat222&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ConditionalOnBean(name = &quot;pet01&quot;)</span> <span class="comment">// 当容器中有 pet01 的时候，那么就注册 zhangsan 组件。</span></span><br><span class="line">    <span class="meta">@Bean(&quot;zhangsan&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">user01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">zhangsan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        zhangsan.setPet(pet01());</span><br><span class="line">        <span class="keyword">return</span> zhangsan;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下，发现这才是我预想的结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">容器中有 pet01 组件吗？true</span><br><span class="line">容器中有 pet02 组件吗？true</span><br><span class="line">容器中有 zhangsan 组件吗？true</span><br></pre></td></tr></table></figure><p>目前只学习到这个注解，后面在学习到其它的条件注解再来这里记录记录。</p><h2 id="ImportResource-注解"><a href="#ImportResource-注解" class="headerlink" title="ImportResource 注解"></a>ImportResource 注解</h2><p>这个注解的用途是加载一个 Spring 的 xml 配置文件，将 xml 文件中配置好的对象放入到容器中。</p><p>主程序类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &quot;top.bestguo&quot;)</span></span><br><span class="line"><span class="meta">@ImportResource(&quot;classpath:bean.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringBootApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Spring IOC容器</span></span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(SpringBootApplication.class, args);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">haha</span> <span class="operator">=</span> run.containsBean(<span class="string">&quot;haha&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;容器中有 haha 组件吗？&quot;</span> + haha);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">hehe</span> <span class="operator">=</span> run.containsBean(<span class="string">&quot;hehe&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;容器中有 hehe 组件吗？&quot;</span> + hehe);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xml 配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;top.bestguo.bean.Pet&quot;</span> <span class="attr">id</span>=<span class="string">&quot;haha&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;haha&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;top.bestguo.bean.Pet&quot;</span> <span class="attr">id</span>=<span class="string">&quot;hehe&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hehe&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行结果如下，发现已经导入成功。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">容器中有 haha 组件吗？true</span><br><span class="line">容器中有 hehe 组件吗？true</span><br></pre></td></tr></table></figure><h2 id="ConfigurationProperties-注解"><a href="#ConfigurationProperties-注解" class="headerlink" title="ConfigurationProperties 注解"></a>ConfigurationProperties 注解</h2><p>在某个类上标记，且设置完 prefix 前缀之后，可以在 application.properties 配置文件的属性值注入到实例化组件中。</p><p>汽车类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// coding......</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>application.properties 配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mycar.brand</span>=<span class="string">BMW</span></span><br><span class="line"><span class="attr">mycar.price</span>=<span class="string">8000</span></span><br></pre></td></tr></table></figure><p>当然，配置完成之后需要在主程序类上标记一个 EnableConfigurationProperties 注解，然后传入 ”类名.class“ 即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImportResource(&quot;classpath:bean.xml&quot;)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(Car.class)</span> <span class="comment">// 传入”类名.class“ </span></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &quot;top.bestguo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringBootApplication</span> &#123;</span><br><span class="line">    <span class="comment">// coding......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 Web 模块访问，看看能否正常得到。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/car&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Car <span class="title function_">car</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> car;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下，配置文件中的值已经成功注入进来了。</p><p><img src="/journal/springboot-annotations-ususally/QQ%E6%88%AA%E5%9B%BE20210626235311.png" alt="QQ截图20210626235311" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> SpringBoot 开发学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小站迁移工作小记</title>
      <link href="/journal/website-migrate/"/>
      <url>/journal/website-migrate/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天自己的阿里云的轻量级云服务器即将到期，准备去续费，发现续费的时候没有学生优惠了。一个月的话就要个几百元，对于我来说这毫无疑问是一种非常大的支出，非常得不偿失。所以，今天做了一个非常重要的决定，就是将自己的小站托管到国外的网站托管服务上。</p><p>GitHub Pages 虽然是一个很好的选择，不过，它绝大多数时候是抽风的状态。所以我选择 Vercel 来将自己的个人站点进行托管，加上自己的站点经过了 CDN 的加速，访问速度应该不会受到太大的影响。</p><p>先赶紧给它办完，后期的小学期的事情又会多起来。😇😇</p><p><img src="/journal/website-migrate/thumb-1920-913081.png" alt="website-migrate" loading="lazy"></p><span id="more"></span><p>会计一定能过的 🤗</p><p>会计一定能过的 🤗</p><p>会计一定能过的 🤗</p><p>会计一定能过的 🤗</p><h2 id="迁移到-Vercel"><a href="#迁移到-Vercel" class="headerlink" title="迁移到 Vercel"></a>迁移到 Vercel</h2><blockquote><p>Vercel 需要用你的 GitHub 账号，GitLab 账号来进行绑定。这样就可以正常的将仓库中的代码直接自动部署到 Vercel 上面了</p></blockquote><h3 id="选择模板"><a href="#选择模板" class="headerlink" title="选择模板"></a>选择模板</h3><p>登录到 Vercel ，创建一个项目并且选择一个模板。我的小站是由 Hexo 来进行构建的，所以就选择 Hexo 就好了。</p><p><img src="/journal/website-migrate/1243431.png" alt="website-migrate" loading="lazy"></p><p>选择个人账户，下一步。</p><p><img src="/journal/website-migrate/12121344.png" alt="website-migrate" loading="lazy"></p><p>输入 GitHub 的仓库名并设置为私有。毕竟那些源文件还是不想让别人看到。嘿嘿。</p><p><img src="/journal/website-migrate/X%5BY%5D(%5D)8E%7B4LMLGG8~M5@8X.png" alt="website-migrate" loading="lazy"></p><p>然后点击部署，对啦。项目名可以修改的</p><p><img src="/journal/website-migrate/QQ%E6%88%AA%E5%9B%BE20210625001851.png" alt="QQ截图20210625001851" loading="lazy"></p><p>等待部署完。</p><p><img src="/journal/website-migrate/QQ%E6%88%AA%E5%9B%BE20210625002221.png" alt="QQ截图20210625001851" loading="lazy"></p><p>部署完成之后，就可以访问我们的 Demo 界面了。</p><p><img src="/journal/website-migrate/QQ%E6%88%AA%E5%9B%BE20210625002537.png" alt="QQ截图20210625001851" loading="lazy"></p><h3 id="克隆仓库"><a href="#克隆仓库" class="headerlink" title="克隆仓库"></a>克隆仓库</h3><p>先将 GitHub 上的自动生成的给克隆下来，使用 <code>git clone https://github.com/xxxxxxx</code> 将仓库上的代码下载下来。</p><p>由于自己之前有一个 gitee 的公钥，所以还要再添加一个。添加 SSH 公钥可以看看这里 – <a href="https://www.bestguo.top/2021/04/19/How-do-you-configure-ssh-in-your-pc/">如何管理你的多个 SSH key</a></p><p>添加完成之后就可以正常的克隆下来了。然后我又重新试了提交，也是能正常的使用，不过很奇怪的是我在执行 <code>ssh -T BestGuo2020@github.com</code> 说连接被拒绝，好奇怪 🤔🤔</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T BestGuo2020@github.com</span><br><span class="line">BestGuo2020@github.com: Permission denied (publickey).</span><br></pre></td></tr></table></figure><p>不过这没关系，能够提交就好了。</p><h3 id="修改一些东西"><a href="#修改一些东西" class="headerlink" title="修改一些东西"></a>修改一些东西</h3><p>由于克隆下来的，如果将我原有的日志全部复制到那个我 clone 下来的项目中，有点浪费时间。所以直接将 clone 下来的项目，复制几个文件或者文件夹即可。</p><p><img src="/journal/website-migrate/QQ%E6%88%AA%E5%9B%BE20210625094335.png" alt="QQ截图20210625094335.png" loading="lazy"></p><p>当然， _config.yml 这个配置文件需要打开，将我原来项目中的 _config.yml 这个配置文件进行一个对照还是需要修改的。主要还是在部署的地方，我们就按照从仓库中拉取下来的部署去配置即可。</p><p>下面是我原来的配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@xxxxxxxxxx:/home/git/xiaohehe_site</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>现在要改成这样</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span></span><br></pre></td></tr></table></figure><p>嗯🤔，还要将 .git 的文件夹、.gitignore 和 .vercelignore 给复制到我的原项目中。</p><h3 id="部署阶段"><a href="#部署阶段" class="headerlink" title="部署阶段"></a>部署阶段</h3><p>最后可以开始提交代码到远程仓库了。不过我在提交到远程仓库的时候会出现一个问题。下面是控制台输出的警告。这个警告是我的 git 项目中还有一个 git 项目，所以就出现了这个警告。</p><p>因为 Hexo 的第三方主题也是一个 git 项目。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">hint: You&#x27;ve added another git repository inside your current repository.</span><br><span class="line">hint: Clones of the outer repository will not contain the contents of</span><br><span class="line">hint: the embedded repository and will not know how to obtain it.</span><br><span class="line">hint: If you meant to add a submodule, use:</span><br><span class="line">hint: </span><br><span class="line">hint:   git submodule add &lt;url&gt; themes/yun</span><br><span class="line">hint: </span><br><span class="line">hint: If you added this path by mistake, you can remove it from the</span><br><span class="line">hint: index with:</span><br><span class="line">hint: </span><br><span class="line">hint:   git rm --cached themes/yun</span><br><span class="line">hint: </span><br><span class="line">hint: See &quot;git help submodule&quot; for more information.</span><br></pre></td></tr></table></figure><p>所以需要做的是，先清空暂存区中的 themes/yun ，然后将 yun 这个文件夹给添加进来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> --cached themes/yun</span><br><span class="line">git add themes/yun/</span><br></pre></td></tr></table></figure><p>解决办法参照于 <a href="https://cloud.tencent.com/developer/article/1583762">git仓库包含子仓库时，add报错的解决办法</a></p><p>然后我们提交试试看，看看能不能正确的部署成功。</p><p><img src="/journal/website-migrate/QQ%E6%88%AA%E5%9B%BE20210625102537.png" alt="QQ截图20210625102537.png" loading="lazy"></p><p>看起来是部署成功了，但是很多日志中的图片都没有全部展示出来。然后再 Vercel 的日志（部分内容）中发现这些图片的链接被指向了一个未知的地方。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">11:15:23.350  update link as:--&gt;/.top//2007786.jpg</span><br><span class="line">11:15:23.352  update link as:--&gt;/.top//QQ%E6%88%AA%E5%9B%BE20210419200043.jpg</span><br><span class="line">11:15:23.352  update link as:--&gt;/.top//QQ%E6%88%AA%E5%9B%BE20210419201526.jpg</span><br><span class="line">11:15:23.353  update link as:--&gt;/.top//QQ%E6%88%AA%E5%9B%BE20210419201708.jpg</span><br><span class="line">11:15:23.353  update link as:--&gt;/.top//QQ%E6%88%AA%E5%9B%BE20210419203658.jpg</span><br><span class="line">11:15:23.353  update link as:--&gt;/.top//QQ%E6%88%AA%E5%9B%BE20210419203715.jpg</span><br><span class="line">11:15:23.353  update link as:--&gt;/.top//QQ%E6%88%AA%E5%9B%BE20210419205135.jpg</span><br><span class="line">11:15:23.353  update link as:--&gt;/.top//QQ%E6%88%AA%E5%9B%BE20210419205204.jpg</span><br></pre></td></tr></table></figure><p>后面这个问题被我困扰了半天，头都秃了😭😭😭，然后后面据我所知，这个问题是 hexo-asset-tag 这个插件有问题，这个插件在两年前就已经提出。具体请看这个 GitHub 上的 <a href="https://github.com/xcodebuild/hexo-asset-image/issues/47">issue</a></p><p>但是、但是，我还发现别人已经把修改好的版本上传到 GitHub 并且能够使用 npm 来安装。太对了哥，哥太对，哈哈哈哈哈哈哈，我还以为没救了。所以，在 package.json 中的 dependencies 的 hexo-asset-image 的依赖改成如下所示。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;@bwqdxxg/hexo-asset-image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.1.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;hexo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;hexo-deployer-git&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;hexo-generator-archive&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;hexo-generator-category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;hexo-generator-index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;hexo-generator-tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;hexo-render-pug&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.1.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;hexo-renderer-ejs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;hexo-renderer-marked&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;hexo-renderer-stylus&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;hexo-server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;hexo-tag-aplayer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.0.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;hexo-theme-landscape&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.0.3&quot;</span></span><br><span class="line"> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>改完之后，然后我们重新上传到 GitHub 上让他自动部署看看图片能否正常显示。看，图片可以正常的显示了。</p><p><img src="/journal/website-migrate/QQ%E6%88%AA%E5%9B%BE20210625163004.png" loading="lazy"></p><p>然后我们再看看 Vercel 的日志输出情况（部分内容），发现图片的指向已经正常了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">16:28:21.331  update link as:--&gt;/2021/04/19/How-do-you-configure-ssh-in-your-pc/2007786.jpg</span><br><span class="line">16:28:21.334  update link as:--&gt;/2021/04/19/How-do-you-configure-ssh-in-your-pc/QQ%E6%88%AA%E5%9B%BE20210419200043.jpg</span><br><span class="line">16:28:21.334  update link as:--&gt;/2021/04/19/How-do-you-configure-ssh-in-your-pc/QQ%E6%88%AA%E5%9B%BE20210419201526.jpg</span><br><span class="line">16:28:21.334  update link as:--&gt;/2021/04/19/How-do-you-configure-ssh-in-your-pc/QQ%E6%88%AA%E5%9B%BE20210419201708.jpg</span><br><span class="line">16:28:21.334  update link as:--&gt;/2021/04/19/How-do-you-configure-ssh-in-your-pc/QQ%E6%88%AA%E5%9B%BE20210419203658.jpg</span><br><span class="line">16:28:21.334  update link as:--&gt;/2021/04/19/How-do-you-configure-ssh-in-your-pc/QQ%E6%88%AA%E5%9B%BE20210419203715.jpg</span><br><span class="line">16:28:21.334  update link as:--&gt;/2021/04/19/How-do-you-configure-ssh-in-your-pc/QQ%E6%88%AA%E5%9B%BE20210419205135.jpg</span><br><span class="line">16:28:21.335  update link as:--&gt;/2021/04/19/How-do-you-configure-ssh-in-your-pc/QQ%E6%88%AA%E5%9B%BE20210419205204.jpg</span><br></pre></td></tr></table></figure><p>此时，小站已经成功迁移到代码仓库中。</p><h2 id="提升访问速度"><a href="#提升访问速度" class="headerlink" title="提升访问速度"></a>提升访问速度</h2><p>说到给自己的网站加速，就可以使用 CDN 来进行加速。如果使用国内的 CDN 的话，那么需要将你要加速的网站进行 ICP 备案才能使用国内的 CDN 服务。</p><p>我自己的小站是有经过 ICP 备案并且使用某拍云进行加速。这也对境内的用户也非常好的，访问速度也会非常的快。</p><h3 id="回源出现问题"><a href="#回源出现问题" class="headerlink" title="回源出现问题"></a>回源出现问题</h3><p>不过我今晚又试了试，发现又拍云在回源到 Vercel 的时候，回源不了。绝了呀😢😢</p><p>看来只好先 Vercel 作为自己的备用站点，只好用 GitHub Page 配合 CDN 来作为主站点了。</p><h3 id="部署到-GitHub-Page"><a href="#部署到-GitHub-Page" class="headerlink" title="部署到 GitHub Page"></a>部署到 GitHub Page</h3><p>以后，GitHub Page 就将是我的主站了。</p><p>GitHub Pages 需要将代码仓库公开才能够使用。先创建一个名字为 BestGuo2020.github.io 的仓库，这是一个固定的规则。然后又需要改一改 _config.yml 的配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:BestGuo2020/BestGuo2020.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>最后使用 hexo d，将 .deploy_git 中的代码给 push 到该仓库中。push 完成之后就能看到这里面的内容了。</p><p><img src="/journal/website-migrate/QQ%E6%88%AA%E5%9B%BE20210625214029.png" loading="lazy"></p><p>设置一下 A 记录，我的根域名还没有利用到，就将我的根域名 bestguo.top 指向到 GitHub page 中的一个 ip 地址。</p><p><img src="/journal/website-migrate/QQ%E6%88%AA%E5%9B%BE20210625215114.png" loading="lazy"></p><p>然后在 GitHub Page 仓库中的设置里面，自定义域名，这里设置的域名类似于跳转到 <a href="http://www.bestguo.top/">www.bestguo.top</a> 这个网页这个意思吧。比如我输入 bestguo.top 就会自动重定向到 <a href="http://www.bestguo.top/">www.bestguo.top</a> 。</p><p><img src="/journal/website-migrate/ffdfdf.png" loading="lazy"></p><p>待他自动部署完成之后，再次访问，可以正常使用 <a href="https://www.bestguo.top/">https://www.bestguo.top</a> 访问了，使用这些 <a href="http://bestguo.top、https//bestguo.top">http://bestguo.top、https://bestguo.top</a> 都将会自动重定向到最前面的域名。</p><p><img src="/journal/website-migrate/QQ%E6%88%AA%E5%9B%BE20210625220159.png" loading="lazy"></p><h2 id="最后的收尾工作"><a href="#最后的收尾工作" class="headerlink" title="最后的收尾工作"></a>最后的收尾工作</h2><p>突然想到一个更简化的操作，在提交整个源项目到 GitHub 的时候会自动构建嘛，所以这个时候在他自动构建的时候执行一下 hexo deploy 命令，就可以将 .deploy_git 中的文件推送到 GitHub Pages 中，这样应该是能行的。试试看。</p><p>行吧，他居然报错了。因为 Vercel 中没有私钥呀，所以再部署到 GitHub Pages 中时，才会爆出严重的错误。</p><p><img src="/journal/website-migrate/QQ%E6%88%AA%E5%9B%BE20210625221716.png" alt="QQ截图20210625221716" loading="lazy"></p><p>看来目前要提交两次，一个是 GitHub Pages，另外一个是 Vercel 了。</p><h3 id="奇怪的-404"><a href="#奇怪的-404" class="headerlink" title="奇怪的 404"></a>奇怪的 404</h3><p>当我点开我写的文章时，突然就 404 了。</p><p><img src="/journal/website-migrate/QQ%E6%88%AA%E5%9B%BE20210625224356.png" alt="QQ截图20210625224356" loading="lazy"></p><p>百度了解了一下，需要将 CNAME 文件放到我们的 source 目录下就好了。</p><p><img src="/journal/website-migrate/QQ%E5%9B%BE%E7%89%8720210625230445.png" alt="QQ图片20210625230445" loading="lazy"></p><p>最后访问一下，可以正常的显示出来了。</p><p><img src="/journal/website-migrate/QQ%E6%88%AA%E5%9B%BE20210625230650.png" alt="QQ截图20210625230650" loading="lazy"></p><p>好了，小站迁移完成，将阿里云的源站进行关闭，站点迁移工作已经全部结束了。</p><p>弄了一天了，我也该歇会儿了😪😪😪。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>主站：<a href="https://www.bestguo.top/">https://www.bestguo.top</a> | <a href="https://bestguo.top/">https://bestguo.top</a></p><p>备用：<a href="https://blog.bestguo.top/">https://blog.bestguo.top</a> | <a href="https://bestguo.vercel.app/">https://bestguo.vercel.app/</a></p><p>参考：</p><ul><li><a href="https://www.yunyoujun.cn/note/use-cdn-speed-up-site/">使用 CDN 加速你的 GitHub Pages 网站</a></li><li><a href="https://zhuanlan.zhihu.com/p/147723106">什么是CNAME</a></li><li><a href="https://blog.csdn.net/Belingda/article/details/100635572">github page+hexo 绑定域名后页面显示404</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网站的部署与维护 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 网站搭建 </tag>
            
            <tag> Vercel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebSQL 使用小记</title>
      <link href="/journal/how-to-use-websql/"/>
      <url>/journal/how-to-use-websql/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Web SQL 是存在于浏览器端的数据库，但是它并没有成为浏览器的一种标准，不过 Web SQL 有属于自己独立的标准。因此，Web SQL 并不存在于所有的浏览器中。就现在而言，Web SQL 仅仅存在于 Google Chrome（谷歌浏览器），以及绝大部分基于 Chromium 内核的浏览器，新版的 Microsoft Edge。Firefox、IE、以及旧版的 Microsoft Edge 都不支持 Web SQL。</p><p>据了解，Web SQL 数据库最普遍而又单一实现的居然是 SQLite ！</p><p>比较详细的解释可以看看知乎的这个疑问 “<a href="https://www.zhihu.com/question/62336018/answer/214613608">sqlite与websql的关系?</a>”。既然如此，那么在使用 Web SQL 的时候岂不是就可以参照 SQLite 的语法创建数据库，创建表之类的？🧐🧐</p><p>或者使用标准的 SQL 语句来创建？</p><p>带着这个疑问，那就开始 Web SQL 的旅程吧。</p><p><img src="/journal/how-to-use-websql/00686t3Xly1fymaeszaqlj31hc0u042f.jpg" alt="狐妖小红娘" loading="lazy"></p><span id="more"></span><h2 id="Web-SQL-在哪里呢"><a href="#Web-SQL-在哪里呢" class="headerlink" title="Web SQL 在哪里呢"></a>Web SQL 在哪里呢</h2><p>如果经常打开 F12 去查看控制台的消息或者进行页面调试，那么你会熟悉的看到……</p><p>对，没错啦！就是打开 F12，找到 Application，然后有一个 Web SQL。这里面就有一个 Web SQL 的选项。这是搜狗浏览器的 Web SQL 所在的位置。谷歌浏览器也是一样的在这个位置。</p><p><img src="/journal/how-to-use-websql/QQ%E6%88%AA%E5%9B%BE20210612165909.png" alt="WebSQLAtSogou" loading="lazy"></p><p>新版的 Microsoft Edge 它也是基于 Chromium 内核的，所以它也有一个 Web SQL。不过它的开发调试界面也全是中文的。</p><p><img src="/journal/how-to-use-websql/QQ%E6%88%AA%E5%9B%BE20210612170547.png" alt="WebSQLEdge" loading="lazy"></p><h2 id="开始使用-Web-SQL"><a href="#开始使用-Web-SQL" class="headerlink" title="开始使用 Web SQL"></a>开始使用 Web SQL</h2><p>Web SQL 有三个核心的方法，使用起来不会很难，它们分别是。</p><ul><li>openDatabase：该方法打开现有的数据库，如果没有，咱们就建立一个😄。它会返回一个数据库对象。</li><li>transaction：该方法可以控制一个事务，以及执行提交或者回滚。</li><li>executeSql：该方法是用于执行 SQL 语句的。</li></ul><p>接下来就是开始使用这些方法的时候了。</p><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>创建数据库使用 openDatabase 进行创建，不过它有几个参数。</p><ul><li>name：数据库名称</li><li>version：版本</li><li>displayName：数据库描述</li><li>estimatedSize：数据库的大小</li><li>creationCallback：创建数据库时的回调函数。</li></ul><p><img src="/journal/how-to-use-websql/QQ%E5%9B%BE%E7%89%8720210612172412.png" alt="创建数据库" loading="lazy"></p><p>创建数据库的代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> database = <span class="title function_">openDatabase</span>(<span class="string">&quot;xiaohehe233&quot;</span>, <span class="string">&quot;0.1&quot;</span>, <span class="string">&quot;测试用的数据库&quot;</span>, <span class="number">1</span> * <span class="number">1024</span> * <span class="number">1024</span>, <span class="keyword">function</span>(<span class="params">msg</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(msg);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>创建成功之后，在 Web SQL 中可以看到我刚刚创建的数据库了。</p><p><img src="/journal/how-to-use-websql/QQ%E6%88%AA%E5%9B%BE20210612204546.png" alt="xiaohehe233" loading="lazy"></p><p>不过很奇怪，这个回调函数中的参数，仅仅只返回一个版本，不知这是为何 ？？？暂时不管啦，能创建出来才是王道。</p><p><img src="/journal/how-to-use-websql/QQ%E6%88%AA%E5%9B%BE20210612204927.png" alt="创建数据库" loading="lazy"></p><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><p>在 Web SQL 中，我们目前无法通过可视化的工具来创建表，需要通过 SQL 语句来创建表。创建表的标准一般都是 create table。</p><p>不过在创建之前，需要创建一个事务，才可以正常的对 SQL 语句进行操作。事务它有三个参数，这三个参数传递的都是函数。第一个传递的 callback 是需要执行 SQL 语句的，第二个传递的 callback 是建表时出现的错误是用来进行回调的，第三个传递的 callback 是需要执行正常建表会进行回调的函数。</p><p><img src="/journal/how-to-use-websql/QQ%E5%9B%BE%E7%89%8720210612205643.png" alt="transaction" loading="lazy"></p><p>由于第一个回调函数是用来执行事务的，所以我们在这里面调用 executeSql 方法来执行 SQL 语句</p><p>接下来，我们使用习惯的写法来看看 SQL 语句是否真正的有效。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="title function_">transaction</span>(<span class="keyword">function</span>(<span class="params">tx</span>)&#123;</span><br><span class="line">    tx.<span class="title function_">executeSql</span>(<span class="string">`</span></span><br><span class="line"><span class="string">            create table phone_book (</span></span><br><span class="line"><span class="string">            phone_number  int  primary key,</span></span><br><span class="line"><span class="string">            name  varchar(20)  not null,</span></span><br><span class="line"><span class="string">            age  int</span></span><br><span class="line"><span class="string">        )</span></span><br><span class="line"><span class="string">`</span>);</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e, <span class="string">&quot;创建过程出现不可预知的异常&quot;</span>);</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e, <span class="string">&quot;创建成功！&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行完成之后，发现数据库中的表也已经成功地建立了。不过表建立完成之后，里面肯定是没有数据的</p><p><img src="/journal/how-to-use-websql/QQ%E6%88%AA%E5%9B%BE20210612212046.png" alt="phone_book" loading="lazy"></p><p>如果我们再创建一次会怎么样呢？当然是会执行错误的回调。错误的回调中输出时带有错误码和错误的原因，这个原因提示的是因为这张表在该数据库中已经存在。</p><p><img src="/journal/how-to-use-websql/QQ%E6%88%AA%E5%9B%BE20210612214816.png" alt="err_callback" loading="lazy"></p><h3 id="修改表结构"><a href="#修改表结构" class="headerlink" title="修改表结构"></a>修改表结构</h3><p>我有一个想法，我要把这张 phone_book 的表新增一个字段，我该怎么办？那就利用 alter table 来对 Web SQL 中的表来进行修改吧。</p><p>对表中的字段进行更新和删除，可以参照 “<a href="https://www.w3school.com.cn/sql/sql_alter.asp">W3school 的 SQL 教程</a>” 。</p><p>修改表结构的 SQL 语句如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="title function_">transaction</span>(<span class="keyword">function</span>(<span class="params">tx</span>)&#123;</span><br><span class="line">    tx.<span class="title function_">executeSql</span>(<span class="string">`</span></span><br><span class="line"><span class="string">alter table phone_book add birthday date</span></span><br><span class="line"><span class="string">`</span>);</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e, <span class="string">&quot;创建过程出现不可预知的异常&quot;</span>);</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e, <span class="string">&quot;创建成功！&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行结果如下，如果我在执行一次更新的操作，那么它便会提示 “重复列的错误”。（我这里的提示信息没改，忘记了，哈哈哈哈哈啊哈哈哈）</p><p><img src="/journal/how-to-use-websql/QQ%E6%88%AA%E5%9B%BE20210612221030.png" alt="修改表" loading="lazy"></p><h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><p>删除表也是非常简单的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="title function_">transaction</span>(<span class="keyword">function</span>(<span class="params">tx</span>)&#123;</span><br><span class="line">      tx.<span class="title function_">executeSql</span>(<span class="string">`drop table phone_book`</span>);</span><br><span class="line">  &#125;, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(e, <span class="string">&quot;删表过程出现不可预知的异常&quot;</span>);</span><br><span class="line">  &#125;, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(e, <span class="string">&quot;删表成功！&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>执行结果如下，如果我们再次删除，那么就会继续给出报错提示“没有这张表”。</p><p><img src="/journal/how-to-use-websql/QQ%E6%88%AA%E5%9B%BE20210612222836.png" alt="删除表" loading="lazy"></p><h3 id="操作表中的数据"><a href="#操作表中的数据" class="headerlink" title="操作表中的数据"></a>操作表中的数据</h3><p>操作表中的数据无疑就是对表进行增删改查呗，增删改查也是可以使用标准的 SQL 语句来进行的</p><h4 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h4><p>接下来我要插入三条数据到表中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="title function_">transaction</span>(<span class="keyword">function</span>(<span class="params">tx</span>)&#123;</span><br><span class="line">  tx.<span class="title function_">executeSql</span>(<span class="string">`insert into phone_book values (13122223333, &#x27;xiaohehe1&#x27;)`</span>);</span><br><span class="line">  tx.<span class="title function_">executeSql</span>(<span class="string">`insert into phone_book values (13122223344, &#x27;xiaohehe2&#x27;)`</span>);</span><br><span class="line">  tx.<span class="title function_">executeSql</span>(<span class="string">`insert into phone_book values (13122223345, &#x27;xiaohehe3&#x27;)`</span>);</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e, <span class="string">&quot;插入数据的过程出现不可预知的异常&quot;</span>);</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e, <span class="string">&quot;插入数据成功！&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>但是很可惜，我插入不进去，系统给了我这样的错误提示。但是错误的信息也非常的容易看出来，是因为三个值必须要全部插入才行。</p><p><img src="/journal/how-to-use-websql/QQ%E6%88%AA%E5%9B%BE20210612223149.png" alt="添加数据" loading="lazy"></p><p>也就是说，<del>所有的字段都不能够有空值</del>（这个说法是错误的，正确的说法是，要插入的内容必须是缺一不可的，即使是插入空值也要写 null），所以，我们需要对以上的 SQL 语句进行一个改进。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="title function_">transaction</span>(<span class="keyword">function</span>(<span class="params">tx</span>)&#123;</span><br><span class="line">  tx.<span class="title function_">executeSql</span>(<span class="string">`insert into phone_book values (13122223333, &#x27;xiaohehe1&#x27;, null)`</span>);</span><br><span class="line">  tx.<span class="title function_">executeSql</span>(<span class="string">`insert into phone_book values (13122223344, &#x27;xiaohehe2&#x27;, null)`</span>);</span><br><span class="line">  tx.<span class="title function_">executeSql</span>(<span class="string">`insert into phone_book values (13122223345, &#x27;xiaohehe3&#x27;, null)`</span>);</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e, <span class="string">&quot;插入数据的过程出现不可预知的异常&quot;</span>);</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e, <span class="string">&quot;插入数据成功！&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这一次，插入数据成功啦。</p><p><img src="/journal/how-to-use-websql/QQ%E6%88%AA%E5%9B%BE20210612223727.png" alt="插入成功" loading="lazy"></p><p>点击刷新按钮即可展示出该表中我们插入的数据啦。</p><p><img src="/journal/how-to-use-websql/QQ%E6%88%AA%E5%9B%BE20210612223852.png" alt="数据展示" loading="lazy"></p><p>如果我们想达到这样的效果，也就是年龄那个字段是空的，那我们该怎么设置呢。请看下面的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="title function_">transaction</span>(<span class="keyword">function</span>(<span class="params">tx</span>)&#123;</span><br><span class="line">  tx.<span class="title function_">executeSql</span>(<span class="string">`insert into phone_book values (13122223333, &#x27;xiaohehe1&#x27;, null)`</span>);</span><br><span class="line">  tx.<span class="title function_">executeSql</span>(<span class="string">`insert into phone_book values (13122223344, &#x27;xiaohehe2&#x27;, null)`</span>);</span><br><span class="line">  tx.<span class="title function_">executeSql</span>(<span class="string">`insert into phone_book values (13122223345, &#x27;xiaohehe3&#x27;, null)`</span>);</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e, <span class="string">&quot;插入数据的过程出现不可预知的异常&quot;</span>);</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e, <span class="string">&quot;插入数据成功！&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行的效果如下。看到 age 这个字段已经是没有任何的东西，只是我们输入的值是 null。</p><p><img src="/journal/how-to-use-websql/QQ%E6%88%AA%E5%9B%BE20210612225145.png" alt="数据" loading="lazy"></p><h4 id="指定字段插入数据"><a href="#指定字段插入数据" class="headerlink" title="指定字段插入数据"></a>指定字段插入数据</h4><p>例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="title function_">transaction</span>(<span class="keyword">function</span>(<span class="params">tx</span>)&#123;</span><br><span class="line">  tx.<span class="title function_">executeSql</span>(<span class="string">`insert into phone_book(phone_number, name) values (13122223333, &#x27;xiaohehe1&#x27;)`</span>);</span><br><span class="line">  tx.<span class="title function_">executeSql</span>(<span class="string">`insert into phone_book(phone_number, name) values (13122223344, &#x27;xiaohehe2&#x27;)`</span>);</span><br><span class="line">  tx.<span class="title function_">executeSql</span>(<span class="string">`insert into phone_book(phone_number, name) values (13122223345, &#x27;xiaohehe3&#x27;)`</span>);</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e, <span class="string">&quot;插入数据的过程出现不可预知的异常&quot;</span>);</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e, <span class="string">&quot;插入数据成功！&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>执行结果和上图是一致的，插入的数据也是成功的。</p><p>如果我们只插入 phone_number ，是不是会报错呀，我们来验证一下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="title function_">transaction</span>(<span class="keyword">function</span>(<span class="params">tx</span>)&#123;</span><br><span class="line">  tx.<span class="title function_">executeSql</span>(<span class="string">`insert into phone_book(phone_number) values (13122223334)`</span>);</span><br><span class="line">  tx.<span class="title function_">executeSql</span>(<span class="string">`insert into phone_book(phone_number) values (13122223336)`</span>);</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e, <span class="string">&quot;插入数据的过程出现不可预知的异常&quot;</span>);</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e, <span class="string">&quot;插入数据成功！&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行的结果如下，果然会报错，因为我们将姓名字段设置成了非空的值。也就是说这个值是必须要填写的。</p><p><img src="/journal/how-to-use-websql/QQ%E6%88%AA%E5%9B%BE20210612230213.png" alt="错误" loading="lazy"></p><p>如果我插入重复的电话号码会怎么样呢？当然会报错，因为我将电话号码设置成为了主键，由于主键不能重复，所以才导致的报错。</p><p><img src="/journal/how-to-use-websql/QQ%E6%88%AA%E5%9B%BE20210612230529.png" alt="错误" loading="lazy"></p><h4 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h4><p>示例：修改 “xiaohehe1” 的电话号码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="title function_">transaction</span>(<span class="keyword">function</span>(<span class="params">tx</span>)&#123;</span><br><span class="line">    tx.<span class="title function_">executeSql</span>(<span class="string">`update phone_book set phone_number = 1111111 where name = &#x27;xiaohehe1&#x27;`</span>);</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e, <span class="string">&quot;更新数据的过程出现不可预知的异常&quot;</span>);</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e, <span class="string">&quot;更新数据成功！&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行结果如下，发现 “xiaohehe1” 的电话号码已经发生了变化。数据更新成功</p><p><img src="/journal/how-to-use-websql/QQ%E6%88%AA%E5%9B%BE20210612231208.png" alt="QQ截图20210612231208.png" loading="lazy"></p><h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h4><p>示例：查询 phone_book 中年龄大于 11 岁的信息。</p><p>我们来看看返回的结果是在哪里进行展示的。</p><p>不过在此之前，还需要再次介绍 executeQuery 这个方法的另外两个参数。一个是外部传参，用数组来表示的，另外一个是回调函数，回调函数有两个参数。一个是事务，另一个是返回的结果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="title function_">transaction</span>(<span class="keyword">function</span>(<span class="params">tx</span>)&#123;</span><br><span class="line">   tx.<span class="title function_">executeSql</span>(<span class="string">`select * from phone_book where age &gt; 11`</span>, [], <span class="keyword">function</span>(<span class="params">tx, results</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(e, <span class="string">&quot;更新数据的过程出现不可预知的异常&quot;</span>);</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(e, <span class="string">&quot;查询数据成功！&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行的结果如下，查询出的数据有两条！</p><p><img src="/journal/how-to-use-websql/QQ%E6%88%AA%E5%9B%BE20210612232709.png" loading="lazy"></p><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><p>示例：删除年龄为 11 岁的信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="title function_">transaction</span>(<span class="keyword">function</span>(<span class="params">tx</span>)&#123;</span><br><span class="line">  tx.<span class="title function_">executeSql</span>(<span class="string">`select * from phone_book where age &gt; 11`</span>, [], <span class="keyword">function</span>(<span class="params">tx, results</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(e, <span class="string">&quot;更新数据的过程出现不可预知的异常&quot;</span>);</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(e, <span class="string">&quot;查询数据成功！&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行的结果如下，发现等于11岁的那条数据被删除了耶。</p><p><img src="/journal/how-to-use-websql/QQ%E6%88%AA%E5%9B%BE20210612233342.png" loading="lazy"></p><p>至此，基本的 SQL 语句的使用就到此结束啦。</p><h2 id="传值的问题"><a href="#传值的问题" class="headerlink" title="传值的问题"></a>传值的问题</h2><p>后续我们在插入数据，修改数据或者更改查询条件的值时可能需要使用到外部的参数。比如拿上面的查询数据来举例。</p><p>其中的问号，代表着占位符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设该数值可能是从文本框获取到。</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line">db.<span class="title function_">transaction</span>(<span class="keyword">function</span>(<span class="params">tx</span>)&#123;</span><br><span class="line">  tx.<span class="title function_">executeSql</span>(<span class="string">`select * from phone_book where age &gt; ?`</span>, [age], <span class="keyword">function</span>(<span class="params">tx, results</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e, <span class="string">&quot;更新数据的过程出现不可预知的异常&quot;</span>);</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e, <span class="string">&quot;查询数据成功！&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行效果如下，发现通过外部传值的方式也是可以拿到的，并且也是可以正常地查询出来。</p><p><img src="/journal/how-to-use-websql/QQ%E6%88%AA%E5%9B%BE20210612234226.png" loading="lazy"></p><h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h2><p>很遗憾，在 Web SQL 中，我们无法做到直接在 F12 中将数据库进行删除。即使刷新，你感觉它消失了，其实并没有消失，因为在刷新的过程中，Web SQL 中的数据库其实是在关闭哒，再次调用 openDatabase 会将数据库进行打开，并且原有的表都存在。</p><p>它占用的空间其实不会太大的，删不删除其实都是没有什么太大的区别的。</p><p>我找了很久，也没有找到直接删除它的方法，不过这无所谓的啦。</p><h2 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a>完整示例</h2><p>完整示例请戳这查看 👉 <a href="/images/demo/create2.html">点我点我</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQLite </tag>
            
            <tag> Web SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 自动配置特性</title>
      <link href="/journal/auto-configuration/"/>
      <url>/journal/auto-configuration/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>开篇学习了 SpringBoot Helloworld 程序的编写，上手非常的快。现在来了解 SpringBoot 的自动配置特性以及 Configration 注解。</p><h2 id="自动配置特性"><a href="#自动配置特性" class="headerlink" title="自动配置特性"></a>自动配置特性</h2><p><a href="/2021/05/17/spring-boot-tutorial">上篇日志</a>通过导入 spring-boot-web-starter ，它就会自动配置好 SpringMVC 以及相关的常用的组件，当然也包括我们常见的字符编码问题以及文件上传等等，这些都是默认配置好了的。但是只有在导入相关的 starter 的时候才会去加载相关的配置文件。</p><p>我们可以做一个测试，来查看 Spring MVC 相关的是如何自动配置的</p><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bestguo.helloworld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="meta">@org</span>.springframework.boot.autoconfigure.SpringBootApplication</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringBootApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Spring IOC容器</span></span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(SpringBootApplication.class, args);</span><br><span class="line">        <span class="comment">// 获取全部的 Bean 名字</span></span><br><span class="line">        String[] beanDefinitionNames = run.getBeanDefinitionNames();</span><br><span class="line">        <span class="keyword">for</span> (String beanDefinitionName : beanDefinitionNames) &#123;</span><br><span class="line">            System.out.println(beanDefinitionName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果比较长。因为配置的加载项还是蛮多的。可以在你的控制台输出时。按下 Ctrl + F 搜索 Spring 整合 SpringMVC 相关的关键字，肯定能够找到相关的关键字。也就意味着这些都是自动配置了的：</p><ul><li>前端控制器：DispathchServlet</li><li>视图解析器：ViewResolver</li><li>静态资源管理器：servlethandler</li><li>文件上传模块：Multipart</li><li>编码过滤模块：characterEncodingFilter</li></ul><p>……</p><h3 id="自动包扫描"><a href="#自动包扫描" class="headerlink" title="自动包扫描"></a>自动包扫描</h3><p>SpringBoot 默认有一个自动包的扫描，无需自己配置。那不用配置它是怎么扫描的呢？它是这么规定的，就是只要 SpringBoot 的启动类在哪个目录下，那么和这个启动类的同级目录以及它的子目录，它都会去扫描。</p><p>请看下面的项目结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">E:.</span><br><span class="line">└─top</span><br><span class="line">    └─bestguo</span><br><span class="line">        └─helloworld</span><br><span class="line">            | SpringBootApplication.java</span><br><span class="line">            │</span><br><span class="line">            └─controller</span><br><span class="line">                    | HelloController.java</span><br><span class="line">                    | DemoController.java</span><br></pre></td></tr></table></figure><p>SpringBoot 下有一个同级的文件夹 controller，那么这个 controller 下的所有类都会被扫描到。前提是这些类中必须有标记 @Controller、@Service、@Repository 等这种可被 Spring 识别到的注解。</p><p>如果是这种目录结构，SpringBoot 主程序能够扫描到 WorldController 吗？显然这是扫描不到的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">E:.</span><br><span class="line">└─top</span><br><span class="line">    └─bestguo</span><br><span class="line">        │ WorldController.java</span><br><span class="line">        │</span><br><span class="line">        └─helloworld</span><br><span class="line">            │ SpringBootApplication.java</span><br><span class="line">            │</span><br><span class="line">            └─controller</span><br><span class="line">                   | HelloController.java</span><br><span class="line">                   | DemoController.java</span><br></pre></td></tr></table></figure><p>WorldController.java 代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bestguo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/world&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WorldController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/springboot2&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;你好, SpringBoot2!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以访问一下这个页面 <a href="http://localhost:8080/world/springboot2">http://localhost:8080/world/springboot2</a> ，发现报错了。</p><p><img src="/journal/auto-configuration/QQ%E6%88%AA%E5%9B%BE20210518160135.png" loading="lazy"></p><p>报错了就意味着，SpringBoot 主程序是扫描不到它的父文件夹里的内容的。如果要想然 SpringBoot 去让他直接访问父文件夹是行不通的，只能通过重新配置包扫描路径。</p><p>包扫描路径可以自己手动的来指定！</p><p>包扫描的路径设置成 “top.bestguo” 它就从这个位置开始扫描，扫描其子目录和孙目录即可，只需要在 SpringBootApplication 注解中传入一个参数，这个参数就是包扫描路径，即</p><p>@SpringBootApplication(scanBasePackages = “top.bestguo”)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bestguo.helloworld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="meta">@org</span>.springframework.boot.autoconfigure.SpringBootApplication(scanBasePackages = <span class="string">&quot;top.bestguo&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringBootApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// Spring IOC容器</span></span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(SpringBootApplication.class, args);</span><br><span class="line">        <span class="comment">// 获取全部的 Bean 名字</span></span><br><span class="line">        String[] beanDefinitionNames = run.getBeanDefinitionNames();</span><br><span class="line">        <span class="keyword">for</span> (String beanDefinitionName : beanDefinitionNames) &#123;</span><br><span class="line">            System.out.println(beanDefinitionName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们重新访问一下看看，发现页面是可以正常访问了。</p><p><img src="/journal/auto-configuration/QQ%E5%9B%BE%E7%89%8720210518161145.png" loading="lazy"></p><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><p>SpringBoot 中，这些配置文件中的绝大多数都有默认的设置。你可以使用默认的设置，也可以通过 application.properties 来对默认配置的值进行修改。</p><p>比如我们修改内嵌 Tomcat 的端口号，通过提示可以看到默认是 8080。我们可以将其设置成 8081。</p><p><img src="/journal/auto-configuration/QQ%E6%88%AA%E5%9B%BE20210518162109.png" loading="lazy"></p><p>还有上传文件大小，默认是 1MB ，我们可以设置成 100 MB</p><p><img src="/journal/auto-configuration/QQ%E6%88%AA%E5%9B%BE20210518162813.png" loading="lazy"></p><p>以上的这些配置都是在 application.properties 文件中进行配置的</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8081</span></span><br><span class="line"><span class="attr">spring.servlet.multipart.max-file-size</span>=<span class="string">100MB</span></span><br></pre></td></tr></table></figure><blockquote><p>默认配置最终都是映射到 MultipartProperties，配置文件的值最终会绑定到每个类上，这个类会在 Spring 容器中创建对象。</p></blockquote><h3 id="spring-boot-autoconfigure"><a href="#spring-boot-autoconfigure" class="headerlink" title="spring-boot-autoconfigure"></a>spring-boot-autoconfigure</h3><p>SpringBoot 所有的自动配置功能都在 spring-boot-autoconfigure 包里面，在这个包下面我们可以看到很多。比如 jdbc、aop、jackson、web 等等自动配置类。</p><p><img src="/journal/auto-configuration/QQ%E6%88%AA%E5%9B%BE20210518164332.png" loading="lazy"></p><h2 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h2><p>在 SpringBoot 的主程序中，有一个 SpringBootApplication 注解，这个注解用于标记 SpringBoot 的主程序的入口。有它，才能够正常的启动该程序。</p><p>SpringBootApplication 是一个合成的注解，这个注解包含着三个注解，它们分别是 <code>SpringBootConfiguration</code>、<code>EnableAutoConfiguration</code> 和 <code>ComponentScan</code> 三个注解。</p><h3 id="SpringBootConfiguration-注解"><a href="#SpringBootConfiguration-注解" class="headerlink" title="SpringBootConfiguration 注解"></a>SpringBootConfiguration 注解</h3><p>其中 SpringBootConfiguration 这个注解，它本质上就是一个 Configuration 注解。也就是说，SpringBoot 的主程序类它也是一个配置类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ComponentScan-注解"><a href="#ComponentScan-注解" class="headerlink" title="ComponentScan 注解"></a>ComponentScan 注解</h3><p>就是普通的包扫描注解，指定哪一个扫描的包路径。</p><h3 id="EnableAutoConfiguration-注解"><a href="#EnableAutoConfiguration-注解" class="headerlink" title="EnableAutoConfiguration 注解"></a>EnableAutoConfiguration 注解</h3><p>该注解是 SpringBootConfiguration 注解中非常重要的一个注解，通过它就可以找到 SpringBoot 的主程序类是在哪个包路径下，以及……</p><p>该注解的代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(AutoConfigurationImportSelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line">    <span class="comment">//主体省略......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 AutoConfigurationPackage 注解就是找到 SpringBoot 的主程序类是在哪个包路径下。Import 注解也说过，它也是将组件注册到容器中。</p><blockquote><p>Import 注解的详细使用可以看看 <a href="/2021/06/26/springboot-annotations-ususally/">“SpringBoot注解的学习”</a> 这篇日志</p></blockquote><p>它需要导入的 AutoConfigurationImportSelector 这个类的目的是加载那些自动配置类，也就是那些 xxxxxAutoConfiguration.java。</p><h4 id="AutoConfigurationPackage-注解"><a href="#AutoConfigurationPackage-注解" class="headerlink" title="AutoConfigurationPackage 注解"></a>AutoConfigurationPackage 注解</h4><p>该注解的代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(AutoConfigurationPackages.Registrar.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoConfigurationPackage &#123;</span><br><span class="line">    <span class="comment">//主体省略......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，Register 类就是把包下面的一系列组件给导入进来，它并不是仅仅导入一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Registrar</span> <span class="keyword">implements</span> <span class="title class_">ImportBeanDefinitionRegistrar</span>, DeterminableImports &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一系列组件导入的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">        register(registry, <span class="keyword">new</span> <span class="title class_">PackageImports</span>(metadata).getPackageNames().toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Object&gt; <span class="title function_">determineImports</span><span class="params">(AnnotationMetadata metadata)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.singleton(<span class="keyword">new</span> <span class="title class_">PackageImports</span>(metadata));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过该注解的元信息获取到主程序所在的包路径，然后再调用 register 方法，将一系列的包给导入进来。这也就能够解释。启动类的同级目录以及它的子目录下的组件给导入进来。</p><h4 id="AutoConfigurationImportSelector"><a href="#AutoConfigurationImportSelector" class="headerlink" title="AutoConfigurationImportSelector"></a>AutoConfigurationImportSelector</h4><p>未完待续……</p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> SpringBoot 开发学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello，SpringBoot2！</title>
      <link href="/journal/spring-boot-tutorial/"/>
      <url>/journal/spring-boot-tutorial/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="初识-SpringBoot"><a href="#初识-SpringBoot" class="headerlink" title="初识 SpringBoot"></a>初识 SpringBoot</h2><p>Spring Boot可以轻松创建独立的、基于Spring的生产级应用程序，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。</p><p>SpringBoot 不仅继承了Spring框架原有的优秀特性，而且还通过简化配置来进一步简化了Spring应用的整个搭建和开发过程。另外SpringBoot通过集成大量的框架使得依赖包的版本冲突，以及引用的不稳定性等问题得到了很好的解决。</p><span id="more"></span><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>可以创建独立的 Spring 应用程序，并且基于其 Maven 或 Gradle 插件，可以创建可执行的 JARs 和 WARs</li><li>内嵌 Tomcat 或 Jetty 等 Servlet 容器</li><li>提供自动配置的“starter”项目对象模型（POMS）以简化 Maven 配置</li><li>尽可能自动配置 Spring 容器</li><li>提供准备好的特性，如指标、健康检查和外部化配置</li><li>绝对没有代码生成，不需要XML配置</li></ol><blockquote><p>以上内容摘自百度百科</p></blockquote><h3 id="我的观点"><a href="#我的观点" class="headerlink" title="我的观点"></a>我的观点</h3><p>SpringBoot 作为高层框架，它的底层还是 Spring ，只是它的绝大多数的配置项以及绝大部分第三方库的配置项都在其中，也就是自动配置。</p><p>同时，我觉得 SpringBoot 也是后续构造分布式、微服务的基础部分吧。其实 Spring 底层也可以做微服务这些东西，但是其中的配置过于繁琐，所以没必要花太多的时间在那些重复的配置上吧。</p><p>话不多说，进入第一个入门程序</p><h2 id="入门程序"><a href="#入门程序" class="headerlink" title="入门程序"></a>入门程序</h2><p>SpringBoot2.X 除了下述的软件要求，至少对 Spring Framework 有一定的基础，Java 基础就更不要说了。</p><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><ul><li>JDK 1.8 及以上版本</li><li>Maven 3.3 及以上版本</li></ul><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>1、SpringBoot 是基于 Maven 构建的，先创建 Maven 工程</p><p><img src="/journal/spring-boot-tutorial/QQ%E6%88%AA%E5%9B%BE20210517212415.png" loading="lazy"></p><p>2、找到 pom.xml 文件，引入父工程</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入父工程 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、在 pom.xml 配置文件，导入一个 web 的依赖</p><blockquote><p>这里作为入门示例，将 web 依赖导入进来，同时这也是官方推荐的入门示例</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>依赖导入完成之后，可以看到左边和 spring-web 相关的依赖就出现了</p><p><img src="/journal/spring-boot-tutorial/QQ%E6%88%AA%E5%9B%BE20210517213455.png" loading="lazy"></p><p>4、编写控制层代码</p><blockquote><p>控制层就是和用户的浏览器进行交互的地方，用户发送请求，服务端就会响应。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bestguo.helloworld.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/springboot2&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, SpringBoot2!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、编写启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bestguo.helloworld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@org</span>.springframework.boot.autoconfigure.SpringBootApplication</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringBootApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringBootApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、运行测试，访问 <a href="http://localhost:8080/hello/springboot2">http://localhost:8080/hello/springboot2</a> 查看效果，看到下图界面出现，就说明你的第一个 SpringBoot HelloWorld 启动成功！🎊 </p><p><img src="/journal/spring-boot-tutorial/QQ%E6%88%AA%E5%9B%BE20210517224656.png" loading="lazy"></p><p>7、这样，一个 SpringBoot 入门程序就完成了🎉</p><h2 id="运行-jar-文件"><a href="#运行-jar-文件" class="headerlink" title="运行 jar 文件"></a>运行 jar 文件</h2><p>有没有发现，我们的第一个程序是基于 web 的，可是我们并没有将项目运行在 Tomcat 中。对啦，SpringBoot 中我们引入的 web 依赖是内置的一个嵌入式的 Tomcat，不需要独立的即可运行。</p><p>而且 SpringBoot 导出的项目，默认就是 jar 格式的文件。我们导出之后运行一下试试看 。</p><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h3><p>1、需要在构建项目的时候自动生成一个可以运行 SpringBoot 的 jar 包，我们需要将以下配置文件复制粘贴到 pom.xml 文件中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、运行右边的 clean 和 package 选项（按住 ctrl 进行选择，点击绿色的“播放”按钮），运行完成之后，在 target 文件夹中，出现一个 jar 包。</p><p><img src="/journal/spring-boot-tutorial/QQ%E6%88%AA%E5%9B%BE20210517230132.png" loading="lazy"></p><p>构建完成后出现的 jar 包：</p><p><img src="/journal/spring-boot-tutorial/QQ%E6%88%AA%E5%9B%BE20210517230524.png" loading="lazy"></p><p>3、此时我们进入到当前页面，进入 cmd 运行</p><p><img src="/journal/spring-boot-tutorial/QQ%E5%9B%BE%E7%89%8720210517230744.png" loading="lazy"></p><p>4、运行这个 jar 文件，看到如下的效果，说明运行成功啦</p><p><img src="/journal/spring-boot-tutorial/QQ%E6%88%AA%E5%9B%BE20210517231446.png" loading="lazy"></p><p>5、此时再次访问 <a href="http://localhost:8080/hello/springboot2">http://localhost:8080/hello/springboot2</a> ，效果如下。</p><p><img src="/journal/spring-boot-tutorial/QQ%E6%88%AA%E5%9B%BE20210517231701.png" loading="lazy"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>在以前，如果是基于 Spring Framework 来搭建一个 web 程序，发现步骤还是蛮多的。首先要在配置 web.xml 前端控制器和编码过滤器，配置完成之后就配置 springmvc.xml 配置文件了，然后又要在该文件中配置视图解析器，静态资源拦截器，配置注解驱动。这些基础的配置重复去配置还是挺麻烦的。</p><p>现在 SpringBoot 省去了这些基础的繁琐的配置，未来可以更多的去专注于代码，而不是专注于配置文件中。</p><h2 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h2><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="500" height="86" src="//music.163.com/outchain/player?type=2&id=409941357&auto=1&height=66"></iframe>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> SpringBoot 开发学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>公开的代码仓库真的可以随意提交吗？</title>
      <link href="/journal/git-push-access-denied/"/>
      <url>/journal/git-push-access-denied/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>直接给出结果，不行！！！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Access deined: You do not have permission push to this repository</span><br><span class="line">fatal: Cou1d not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br></pre></td></tr></table></figure><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>今天上午和舍友进行 git 的多人合作测试的时候，基本的项目配置以及用户名和邮箱都已经配置好，最后再次进行代码提交测试的时候提示权限不足的问题。</p><p><img src="/journal/git-push-access-denied/705793b8gy1g4t694ftawj20u00u1gmm.jpg" loading="lazy"></p><p>嗯？</p><p>尝试了很多次依然不行！</p><span id="more"></span><p><img src="/journal/git-push-access-denied/20210429194029.png" loading="lazy"></p><h3 id="我的疑问"><a href="#我的疑问" class="headerlink" title="我的疑问"></a>我的疑问</h3><p>不是公开仓库就可以随便提交的吗？之前听说那些开源的项目不就是所有人都可以修改的吗？所有人都可以进行提交代码到远程仓库的吗？</p><p>当然不是，因为这是错觉。😊😊</p><h2 id="经过"><a href="#经过" class="headerlink" title="经过"></a>经过</h2><p>其实之前在刚刚创建完成 gitee 账号，将代码提交的远程仓库的时候。看到我自己建的代码仓库有这一项。也就是成员管理的那一块。</p><p><img src="/journal/git-push-access-denied/QQ%E5%9B%BE%E7%89%8720210429195053.png" loading="lazy"></p><p>开始并没有太在意这个成员管理。现在发现成员管理真的是非常之重要，只有远程代码仓库中有这个成员才可以提交。这样就可以保证代码不会被成员以外的无关人员进行恶意提交。</p><p>不仅仅是 gitee 才有，github 上面也有邀请成员的功能。看到那个绿色的按钮了吗？</p><p><img src="/journal/git-push-access-denied/QQ%E6%88%AA%E5%9B%BE20210429201438.jpg" loading="lazy"></p><p>私有仓库就不用说了，共有仓库也是不能随便提交，要想提交，除非你是该仓库的一员。</p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>最后的结果，当然就是将用户添加到仓库成员就可以进行愉快的提交咯。</p><p><img src="/journal/git-push-access-denied/xiong.jpg" loading="lazy"></p><p>嘿嘿(º﹃º )</p>]]></content>
      
      
      <categories>
          
          <category> 小赫赫的项目日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 部署报错之 EMFILE</title>
      <link href="/journal/hexo-enfile-resolve/"/>
      <url>/journal/hexo-enfile-resolve/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>今天给“关于我”栏目添加 Aplayer 音乐播放器时，在做好基本的配置之后，开始做好试运行时。爆出了以下的错误。</p><p><img src="/journal/hexo-enfile-resolve/QQ%E6%88%AA%E5%9B%BE20210426224037.png" loading="lazy"></p><p>估计是在安装 APlayer 安装错了，因为我用的是 cnpm 进行安装的。也有可能是 Hexo 生成的的过程中抽风了。</p><p>这个错误一直在控制台疯狂的输出。看似可怕，其实爆出的错误也就这一句。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: EMFILE, too many open files</span><br></pre></td></tr></table></figure><p>官网的解释如是说：</p><blockquote><p>虽然 Node.js 有非阻塞 I/O，同步 I/O 的数量仍被系统所限制，在产生大量静态档案的时候，您可能会碰到EMFILE 错误，您可试着提高同步 I/O 的限制来解决此问题 </p></blockquote><p>然后官网给出了一个命令</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ulimit</span> -n 10000</span><br></pre></td></tr></table></figure></blockquote><p>原本以为这就可以轻轻松松的解决，然而并没有。😱😱</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">D:\MyWeb\mywebsite2&gt;ulimit -n 10000</span><br><span class="line">&#x27;ulimit&#x27; 不是内部或外部命令，也不是可运行的程序</span><br><span class="line">或批处理文件。</span><br></pre></td></tr></table></figure><p>因为这个命令只有在 Linux 上的操作系统有，Windows 上并没有。</p><p>下面就是我苦苦寻找的解决方法的过程，解决的终极办法直接把我笑哭了 😂</p><h2 id="经过"><a href="#经过" class="headerlink" title="经过"></a>经过</h2><p>在百度上搜索，有关于这个问题的搜索结果少的可怜。</p><p>在谷歌上搜索，有很多相关的搜索结果，可是绝大多数的解决方案还是按照官方的解决方式来解决的。</p><p>后面在谷歌上找到了终极解决办法，这个解决办法是在 GitHub issue 上：</p><p><a href="https://github.com/hexojs/hexo/issues/4485">https://github.com/hexojs/hexo/issues/4485</a></p><p>说白了，就是重新生成一个 Hexo 个人博客，然后将原来的进行迁移就 OK 了。顺便把背景给换了。</p><p><img src="/journal/hexo-enfile-resolve/QQ%E6%88%AA%E5%9B%BE20210426231001.png" loading="lazy"></p><h3 id="更好的解决办法"><a href="#更好的解决办法" class="headerlink" title="更好的解决办法"></a>更好的解决办法</h3><p>如果自己的 Hexo 博客是部署在 GitHub Page 上，那就最好了，直接克隆下来就可以了。</p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>既然自己的博客可以正常的部署了，后面我还试了试 APlayer 音频播放器是否能用。</p><p>音频播放器也能正常的运作了。</p><p><img src="/journal/hexo-enfile-resolve/QQ%E6%88%AA%E5%9B%BE20210426232127.png" loading="lazy"></p><p>今晚又是啥都没干的一天，还没有去跑步。明天一定好好发泄自己。</p>]]></content>
      
      
      <categories>
          
          <category> 网站的部署与维护 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> EMFILE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Apache POI 操作 excel 表格</title>
      <link href="/journal/How-to-use-poi-excel/"/>
      <url>/journal/How-to-use-poi-excel/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>开幕雷击，你肯定见过这个或者类似填表格的场景。</p><p><img src="/journal/How-to-use-poi-excel/QQ%E6%88%AA%E5%9B%BE20210424185301.jpg" loading="lazy"></p><p>没错，学校或者公司内部有时候需要安排填写一些信息，然后这些信息通过上传 excel 的方式将其导入到系统中。在此之前只知道通过 csv 文件来导入相关的信息。那 java 是如何读取或写入 excel 的呢？直接通过文件流去硬读肯定读到的是一堆乱码，所以我们用这个 “Apache POI” 来读和写我们的 excel。</p><p>同时 Apache POI 的使用也非常简单。</p><blockquote><p>特别想吐槽把 python 吹上天的那些广告和培训机构，我依然还记得在 python 刚刚被吹上天的那个时期，说 python 什么都能干，其中不乏有 python 操作 excel。</p><p>以前一直认为只有 python 才可以操作表格，今天学完之后，java 也是可以操作 excel 表格的。</p></blockquote><p>其实场景还是非常之多的，比如将期末考试的成绩进行导出到 excel ，这个操作其实也是非常之常见的咯。</p><p><img src="/journal/How-to-use-poi-excel/Screenshot_20210423_135155.jpg" loading="lazy"></p><p>怎么样，阿尔敏美不美😉😉</p><span id="more"></span><h2 id="介绍和导入"><a href="#介绍和导入" class="headerlink" title="介绍和导入"></a>介绍和导入</h2><p>好的，<del>现在由我来介绍进击的巨人之阿尔敏</del>，不对，走错片场了。</p><p>由我来介绍 Apache POI 是啥，Apache POI 是用 Java 编写的免费开源的跨平台的 Java API，Apache POI 提供 API 让 Java 操作 Microsoft Office（Excel、WORD、PowerPoint、Visio等）文档的读和写的功能。</p><p>说起这个东西可以操作 word，这就意味着可以实现从数据库导出数据到 word 的功能。羡慕</p><h3 id="常用的类"><a href="#常用的类" class="headerlink" title="常用的类"></a>常用的类</h3><p>Apache POI 提供了 8 个常用的类，包括以下几个。</p><ul><li>HSSF － 提供读写 Microsoft Excel XLS 格式档案的功能。</li><li>XSSF － 提供读写 Microsoft Excel OOXML XLSX 格式档案的功能。</li><li>HWPF － 提供读写 Microsoft Word DOC97 格式档案的功能。</li><li>XWPF － 提供读写 Microsoft Word DOC2003 格式档案的功能。</li><li>HSLF － 提供读写 Microsoft PowerPoint 格式档案的功能。</li><li>HDGF － 提供读 Microsoft Visio 格式档案的功能。</li><li>HPBF － 提供读 Microsoft Publisher 格式档案的功能。</li><li>HSMF － 提供读 Microsoft Outlook 格式档案的功能。</li></ul><h3 id="需要导入的-jar-包"><a href="#需要导入的-jar-包" class="headerlink" title="需要导入的 jar 包"></a>需要导入的 jar 包</h3><p>可以使用 maven 的方式自动引入，也可以直接将 jar 包下载下来。</p><ul><li>Apache POI，<a href="https://mvnrepository.com/artifact/org.apache.poi/poi/5.0.0">https://mvnrepository.com/artifact/org.apache.poi/poi/5.0.0</a></li><li>Joda Time，<a href="https://mvnrepository.com/artifact/joda-time/joda-time/2.10.10">https://mvnrepository.com/artifact/joda-time/joda-time/2.10.10</a></li></ul><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>本次示例有两个，一个是基本使用，另一个是 99 乘法表的应用。使用的方法也是非常的简单，和操作二维数组一样很相似。</p><h3 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h3><h4 id="写入到磁盘"><a href="#写入到磁盘" class="headerlink" title="写入到磁盘"></a>写入到磁盘</h4><p>1、导入完成之后，首先创建一个 Workbook 对象。每一个 Workbook 对象对应的是一个 excel 的工作簿</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Workbook</span> <span class="variable">workbook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HSSFWorkbook</span>();</span><br></pre></td></tr></table></figure><p>2、然后创建一个工作表，也就是 sheet。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Sheet</span> <span class="variable">sheet</span> <span class="operator">=</span> workbook.createSheet(<span class="string">&quot;工作表1&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>我们直接打开 excel 程序的时候，默认是如下图的样子，有一个 sheet。而通过 Java 创建就不一样，需要调用 <code>createSheet</code> 方法即可。</p><p><img src="/journal/How-to-use-poi-excel/QQ%E6%88%AA%E5%9B%BE20210424194218.jpg" loading="lazy"></p></blockquote><p>3、创建完工作表之后，就可以对单元格进行操作了，先创建一行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个行</span></span><br><span class="line"><span class="type">Row</span> <span class="variable">row</span> <span class="operator">=</span> sheet.createRow(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>4、然后再创建单元格，并在单元格中填写信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建单元格</span></span><br><span class="line"><span class="type">Cell</span> <span class="variable">cell1</span> <span class="operator">=</span> row.createCell(<span class="number">0</span>);</span><br><span class="line">cell1.setCellValue(<span class="string">&quot;今日新增观众&quot;</span>);</span><br><span class="line"><span class="type">Cell</span> <span class="variable">cell2</span> <span class="operator">=</span> row.createCell(<span class="number">1</span>);</span><br><span class="line">cell2.setCellValue(<span class="number">666</span>);</span><br></pre></td></tr></table></figure><p>5、我们再次创建一行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个行</span></span><br><span class="line"><span class="type">Row</span> <span class="variable">row2</span> <span class="operator">=</span> sheet.createRow(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 创建一个单元格</span></span><br><span class="line"><span class="type">Cell</span> <span class="variable">cell21</span> <span class="operator">=</span> row2.createCell(<span class="number">0</span>);</span><br><span class="line">cell21.setCellValue(<span class="string">&quot;统计时间&quot;</span>);</span><br><span class="line"><span class="type">Cell</span> <span class="variable">cell22</span> <span class="operator">=</span> row2.createCell(<span class="number">1</span>);</span><br><span class="line">cell22.setCellValue(<span class="keyword">new</span> <span class="title class_">DateTime</span>().toString(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br></pre></td></tr></table></figure><p>6、创建文件输出流，将 excel 保存到磁盘（需要抛出异常）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;d:\\excel_demo\\demo.xls&quot;</span>);</span><br><span class="line">workbook.write(fileOutputStream);</span><br><span class="line">fileOutputStream.close();</span><br></pre></td></tr></table></figure><p>7、运行结果</p><p><img src="/journal/How-to-use-poi-excel/QQ%E6%88%AA%E5%9B%BE20210424195558.jpg" loading="lazy"></p><blockquote><p>注意：行和列都是从 0 开始的</p></blockquote><h4 id="从磁盘读取"><a href="#从磁盘读取" class="headerlink" title="从磁盘读取"></a>从磁盘读取</h4><p>读取文件也是非常的简单，写入的时候是 createXXX ，那么读取的时候就是 getXXX 。读取 excel 的代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取文件流</span></span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;d:\\excel_demo\\demo.xls&quot;</span>);</span><br><span class="line"><span class="comment">// 创建工作簿</span></span><br><span class="line"><span class="type">HSSFWorkbook</span> <span class="variable">workbook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HSSFWorkbook</span>(fis);</span><br><span class="line"><span class="comment">// 创建工作表</span></span><br><span class="line"><span class="type">HSSFSheet</span> <span class="variable">sheet0</span> <span class="operator">=</span> workbook.getSheet(<span class="string">&quot;工作表1&quot;</span>);</span><br><span class="line"><span class="comment">// 获取第 0 行</span></span><br><span class="line"><span class="type">HSSFRow</span> <span class="variable">row</span> <span class="operator">=</span> sheet0.getRow(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 获取第 0,1 个单元格</span></span><br><span class="line"><span class="type">HSSFCell</span> <span class="variable">cell0</span> <span class="operator">=</span> row.getCell(<span class="number">0</span>);</span><br><span class="line"><span class="type">HSSFCell</span> <span class="variable">cell1</span> <span class="operator">=</span> row.getCell(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 获取单元格中的值</span></span><br><span class="line"><span class="type">String</span> <span class="variable">stringCellValue</span> <span class="operator">=</span> cell0.getStringCellValue();</span><br><span class="line"><span class="type">double</span> <span class="variable">numericCellValue</span> <span class="operator">=</span> cell1.getNumericCellValue();</span><br><span class="line">System.out.println(stringCellValue + <span class="string">&quot;:&quot;</span> + numericCellValue);</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/journal/How-to-use-poi-excel/QQ%E6%88%AA%E5%9B%BE20210424200422.jpg" loading="lazy"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>Excel中的工作簿、工作表、行、单元格中有如下关系</p><ol><li>一个 Excel 文件对应于一个 Workbook</li><li>一个 Workbook 可以有多个 Sheet 组成</li><li> 一个 Sheet 是由多个 Row 组成</li><li>一个 Row 是由多个 Cell 组成</li></ol><h3 id="99-乘法表"><a href="#99-乘法表" class="headerlink" title="99 乘法表"></a>99 乘法表</h3><p>敢不敢试一试将 99 乘法表写到 excel 表格中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建工作簿</span></span><br><span class="line"><span class="type">HSSFWorkbook</span> <span class="variable">workbook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HSSFWorkbook</span>();</span><br><span class="line"><span class="comment">// 创建工作表</span></span><br><span class="line"><span class="type">Sheet</span> <span class="variable">sheet</span> <span class="operator">=</span> workbook.createSheet(<span class="string">&quot;99乘法表&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 创建行</span></span><br><span class="line">    <span class="type">Row</span> <span class="variable">row</span> <span class="operator">=</span> sheet.createRow(i - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">        <span class="comment">// 创建列（创建单元格）</span></span><br><span class="line">        <span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> row.createCell(j - <span class="number">1</span>);</span><br><span class="line">        cell.setCellValue(i + <span class="string">&quot; × &quot;</span> + j + <span class="string">&quot; = &quot;</span> + (i * j));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打开输出流</span></span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;d:\\excel_demo\\demo2.xls&quot;</span>);</span><br><span class="line">workbook.write(fileOutputStream);</span><br><span class="line">fileOutputStream.close();</span><br></pre></td></tr></table></figure><p>运行结果如下</p><p><img src="/journal/How-to-use-poi-excel/QQ%E6%88%AA%E5%9B%BE20210424201141.jpg" loading="lazy"></p><p>将 99 乘法表读取出来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取文件流</span></span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;d:\\excel_demo\\demo2.xls&quot;</span>);</span><br><span class="line"><span class="comment">// 创建工作簿对象</span></span><br><span class="line"><span class="type">HSSFWorkbook</span> <span class="variable">workbook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HSSFWorkbook</span>(fis);</span><br><span class="line"><span class="comment">// 得到工作表</span></span><br><span class="line"><span class="type">HSSFSheet</span> <span class="variable">sheet</span> <span class="operator">=</span> workbook.getSheet(<span class="string">&quot;99乘法表&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 得到行</span></span><br><span class="line">    <span class="type">HSSFRow</span> <span class="variable">row</span> <span class="operator">=</span> sheet.getRow(i - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; i + <span class="number">1</span>; j++) &#123;</span><br><span class="line">        <span class="type">HSSFCell</span> <span class="variable">cell</span> <span class="operator">=</span> row.getCell(j - <span class="number">1</span>);</span><br><span class="line">        System.out.print(cell.getStringCellValue() + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">fis.close();</span><br><span class="line">workbook.close();</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="/journal/How-to-use-poi-excel/QQ%E6%88%AA%E5%9B%BE20210424201319.jpg" loading="lazy"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>使用 Apache POI 操作 excel 其实还是不难的。后续的期末项目肯定是需要利用到的，未来在利用 excel 进行数据的导入和导出，会继续写一篇日志出来记录。</p>]]></content>
      
      
      <categories>
          
          <category> 小赫赫的项目日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> excel </tag>
            
            <tag> POI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识中间件与分布式架构</title>
      <link href="/journal/what-s-middleware/"/>
      <url>/journal/what-s-middleware/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>对于中间件还是比较好理解的，两者之间无法“沟通”，需要介入第三者，间接的使其沟通。不过在生活中有的时候还是不要介入奇奇怪怪的第三者比较好。</p><h2 id="什么是中间件"><a href="#什么是中间件" class="headerlink" title="什么是中间件"></a>什么是中间件</h2><p>举个很常见的例子，外交部发言人（简称发言人）要和外国的记者进行交流。外国记者需要提问，发言人需要回答他的问题。可是直接听取外国记者的问题似乎有些麻烦，那你知道是如何解决的呢？</p><p>没错，就是同声传译了。也就是说有一个翻译，那些外国人听到的都是那个翻译说的话，而不是直接听发言人说的话。</p><p>所以，上面的例子所提到的“同声传译”就叫做中间件。</p><p>在计算机领域中，中间件有以下的说法</p><blockquote><p>中间件（Middleware）是处于操作系统和应用程序之间的软件，也有人认为它应该属于操作系统中的一部分。</p><p>人们在使用中间件时，往往是一组中间件集成在一起，构成一个平台（包括开发平台和运行平台），但在这组中间件中必须要有一个通信中间件，即中间件 = 平台 + 通信，这个定义也限定了只有用于分布式系统中才能称为中间件，同时还可以把它与支撑软件和实用软件区分开来。</p></blockquote><p>中间件的概念似乎很难说清楚，确通过简单的例子就能够较好的理解。按照上面例子，<del>好像</del>能够对应的上的样子耶。</p><span id="more"></span><p>不过中间件具有以下的特点。</p><ol start="4"><li>标准的协议</li><li>标准的接口</li><li>持久性</li><li>高可用，高可扩</li></ol><blockquote><p>在项目的架构和重构中，使用任何技术和架构的改变我们都需要谨慎斟酌和思考，因为任何技术的融入和变化都可能人员，技术，和成本的增加，中间件的技术一般现在一些互联网公司或者项目中使用比较多，如果你仅仅还只是一个初创公司建议还是使用单体架构，最多加个缓存中间件即可，不要盲目追求新或者所谓的高性能，而追求的背后一定是业务的驱动和项目的驱动，因为一旦追求就意味着你的学习成本，公司的人员结构以及服务器成本，维护和运维的成本都会增加，所以需要谨慎选择和考虑。</p></blockquote><h2 id="有哪些中间件技术"><a href="#有哪些中间件技术" class="headerlink" title="有哪些中间件技术"></a>有哪些中间件技术</h2><p>中间件技术分为 4 类：消息中间件、负载均很中间件、缓存中间件和高可用中间件。先记录这些，对这四类的中间件进行一个了解。</p><h3 id="消息中间件"><a href="#消息中间件" class="headerlink" title="消息中间件"></a>消息中间件</h3><p>消息中间件分别有：</p><ul><li>ActiveMQ</li><li>RabbitMQ</li><li>Kafka</li><li>RocketMQ</li></ul><p>使用场景：</p><ul><li>消息中间件监控数据</li><li>异步数据传输场景</li><li>削峰填谷场景</li><li>任务调度场景</li><li>海量数据同步场景</li><li>分布式事务场景</li><li>日记管理场景</li><li>大数据分析场景</li></ul><p>相关的规范：</p><ul><li>AMQP</li><li>MQTT</li><li>持久化设计</li><li>Kafka协议消息</li><li>分发设计</li><li>高可用设计</li><li>可靠性设计</li><li>容错设计</li></ul><h3 id="负载均衡中间件"><a href="#负载均衡中间件" class="headerlink" title="负载均衡中间件"></a>负载均衡中间件</h3><ul><li>Nginx</li><li>LVS负载均衡软件</li><li>KeepAlive</li><li>CDN</li></ul><h3 id="缓存中间件"><a href="#缓存中间件" class="headerlink" title="缓存中间件"></a>缓存中间件</h3><ul><li>MenCache</li><li>Redis</li></ul><h3 id="数据库中间件"><a href="#数据库中间件" class="headerlink" title="数据库中间件"></a>数据库中间件</h3><ul><li>Mycat</li><li>ShardingJDBC</li></ul><h3 id="相关案例"><a href="#相关案例" class="headerlink" title="相关案例"></a>相关案例</h3><ul><li>异步数据保存</li><li>订单数据的消息分发</li><li>分布式事务</li><li>消息的容错</li><li>分布式锁</li><li>分布式会话</li><li>分库分表</li></ul><h2 id="谈谈分布式架构"><a href="#谈谈分布式架构" class="headerlink" title="谈谈分布式架构"></a>谈谈分布式架构</h2><p>在提起分布式架构之前，先说说单体架构。</p><p>单体架构其实就是所有的代码，静态资源文件都在一个项目中。但是这会导致一个问题，项目规模变大之后如果仅仅是一个小功能需要升级的话，那么就必须得重新去部署整个项目。</p><p>不是说单体架构垃圾，没用。因为毕竟事物具有两面性，它有它存在的意义，如果是为了盲目跟风而去选用分布式技术，那我觉得很没必要。</p><p><img src="/journal/what-s-middleware/aaadf.jpg" alt="单体架构" loading="lazy"></p><p>（图片来源于网络）</p><p>而且这样的架构所存在的问题便是：</p><ul><li>耦合度太高</li><li>运维的成本过高</li><li>不易维护</li><li>服务器的成本高</li><li>升级架构的难度加大</li></ul><p>分布式架构，就是把系统拆成若干个部分。也就是说一个请求由服务器端的多个系统来完成的。</p><blockquote><p>单体架构就想建设一个小房子很快就能够搞定，如果你要建设一个鸟巢或者大型的建筑，你就必须是各个环节的协同和分布，这样目的也是项目发展都后期的时候要去部署和思考的问题。</p></blockquote><p><img src="/journal/what-s-middleware/ebpnwjqsiaq.png" alt="分布式结构" loading="lazy"></p><p>（图片来源于网络）</p><p>但是，分布式系统架构也存在一些优点，也有他的问题</p><h4 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h4><ul><li>可以合理的分配服务资源，不造成服务器资源的浪费</li><li>系统的独立维护和部署，耦合度降低。可插拔性。</li><li>系统的架构和技术栈的选择可以变的灵活（而不是单纯的选择 java）</li><li>弹性部署，不会造成平台因部署造成的瘫痪和停服的状态。</li></ul><h4 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h4><ul><li>学习成本高，技术栈过多</li><li>运维成本和服务器成本增高</li><li>人员的成本也会增高</li><li>项目的负载度也会上升</li><li>面临的错误和容错性也会成倍增加</li><li>占用的服务器端口和通讯的选择的成本高</li><li>安全性的考虑和因素逼迫可能选择 RMI / MQ 相关的服务器端通讯.</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> RabbitMQ 的学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何管理你的多个 SSH key</title>
      <link href="/journal/How-do-you-configure-ssh-in-your-pc/"/>
      <url>/journal/How-do-you-configure-ssh-in-your-pc/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>由于自己的电脑上有多个 SSH 的公钥和私钥，github 有一个 SSH key，自己的小站提交时也有一个 SSH key，然后今天想弄一个 gitee 的 SSH key，所以今天上午和下午放学之后一直都在折腾这件事情。今天在手机上操作自己的电脑，弄了一上午操作失败。</p><p>在学习如何管理自己的 key 时，同时也学到了 git 的相关命令，git 用起来真的挺好。</p><p>本来以为今天上午就能搞定，结果是下午放学之后才搞定的。挺想分享这段经过。</p><p><img src="/journal/How-do-you-configure-ssh-in-your-pc/2007786.jpg" loading="lazy"></p><span id="more"></span><h2 id="经过"><a href="#经过" class="headerlink" title="经过"></a>经过</h2><blockquote><p>在开始之前，如果你的电脑没有 git，请先在电脑上安装一个 <a href="https://git-scm.com/downloads">git</a></p></blockquote><h3 id="SSH-配置"><a href="#SSH-配置" class="headerlink" title="SSH 配置"></a>SSH 配置</h3><p>首先，输入 <code>ssh-keygen</code> 命令，-C 参数是填写你的邮箱，-f 参数是指定公私钥生成的位置名字，其中，<code>~/.ssh/</code> 是位置，<code>id_rsa_me_gitee</code> 名字然后按回车</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ssh</span>-keygen -t rsa -C <span class="string">&quot;bestguo2020@foxmail.com&quot;</span> -f ~/.ssh/id_rsa_me_gitee</span><br></pre></td></tr></table></figure><p>然后一直回车，直到生成字符画，就说明生成成功了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /c/Users/xxxxxx/.ssh/id_rsa_me_gitee.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /c/Users/xxxxxx/.ssh/id_rsa_me_gitee.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:oezVJIt23bVCmgMnwQD+7orlTRxeLSMaMk+M3SLLslQ bestguo2020@foxmail.com</span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 3072]----+</span></span><br><span class="line"><span class="string">|    ...o.        |</span></span><br><span class="line"><span class="string">|   .    ..       |</span></span><br><span class="line"><span class="string">|    .   = o . .  |</span></span><br><span class="line"><span class="string">|   + + o % = . . |</span></span><br><span class="line"><span class="string">|  =E* X S B o .  |</span></span><br><span class="line"><span class="string">| ..B X * o . .   |</span></span><br><span class="line"><span class="string">|..o + *          |</span></span><br><span class="line"><span class="string">|.o + +           |</span></span><br><span class="line"><span class="string">|. . o.o          |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure><p>输入 <code>ssh-agent bash</code> 命令，然后清空代理的公钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-agent bash</span><br><span class="line"></span><br><span class="line">$ ssh-add -D</span><br><span class="line">All identities removed.</span><br></pre></td></tr></table></figure><p>添加我们刚刚生成的公钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-add ~/.ssh/id_rsa_me_gitee</span><br><span class="line">Identity added: /c/Users/xxxxxx/.ssh/id_rsa_me_gitee (bestguo2020@foxmail.com)</span><br></pre></td></tr></table></figure><p>最后在这个位置上添加一个 config 文件</p><p><img src="/journal/How-do-you-configure-ssh-in-your-pc/QQ%E6%88%AA%E5%9B%BE20210419200043.jpg" loading="lazy"></p><p>config 要编写文件中的内容如下，里面的内容需要自己来修改，修改完成之后保存。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># gitee</span><br><span class="line">Host gitee.me</span><br><span class="line">    HostName gitee.com</span><br><span class="line">    User bestguo2020</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_me_gitee</span><br></pre></td></tr></table></figure><p>解释：</p><ul><li>第一个 Host 是起别名的作用，比如你起 miaomiao，giaogiao 都行</li><li>HostName 指的就是需要填写主机名，在 gitee 中就是 gitee.com，在 github 中就是 github.com，如果是自己或者公司搭建的 git 服务器，就使用主机的主机名或者 ip 地址。</li><li>User 一般是指登录的用户名，就是创建 gitee 或者 github 账号时那个用户名就是你需要填的</li><li>PreferredAuthentications 就用默认的 publickey 值就行</li><li>IdentityFile 就是生成的私钥文件，也就是上图中没有带 <code>.pub</code> 的</li></ul><p>由于今天弄的是 gitee 的 SSH key，所以就在 gitee 中添加 SSH key。先登录到 gitee，点击设置，找到 SSH 公钥</p><p><img src="/journal/How-do-you-configure-ssh-in-your-pc/QQ%E6%88%AA%E5%9B%BE20210419201526.jpg" loading="lazy"></p><p>然后用编辑器或者记事本打开 <code>id_rsa_me_gitee.pub</code> 文件，将其复制到此处，点击确定。输入密码验证即可</p><p><img src="/journal/How-do-you-configure-ssh-in-your-pc/QQ%E6%88%AA%E5%9B%BE20210419201708.jpg" loading="lazy"></p><p>最后执行一下 <code>ssh -T </code> 命令，前面填写的是你注册用户名，回车。如果看到以下类似界面就说明配置成功了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T bestguo2020@gitee.com</span><br><span class="line">Hi bestguo2020! You&#x27;ve successfully authenticated, but GITEE.COM does not provide shell access.</span><br></pre></td></tr></table></figure><h4 id="关键一步"><a href="#关键一步" class="headerlink" title="关键一步"></a>关键一步</h4><p>如果我们关闭了 shell 之后，发现下面的问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-agent bash</span><br><span class="line"></span><br><span class="line">$ ssh-add -l</span><br><span class="line">The agent has no identities.</span><br></pre></td></tr></table></figure><p>没错，就是我们添加的私钥记录没有存下来，需要自己来保存，这该怎么办呢？</p><p>有办法，在 git 的安装目录中。找到 etc 下的 bash.bashrc 文件，使用记事本或者其它文本编辑器打开。</p><p><img src="/journal/How-do-you-configure-ssh-in-your-pc/QQ%E6%88%AA%E5%9B%BE20210419203658.jpg" loading="lazy"></p><p>在文件末尾添加以下内容（其中里面的 ssh-add 添加的私钥是前面自己的生成的），这样的目的就是每次启动 shell 的时候会自动执行这些命令</p><p><img src="/journal/How-do-you-configure-ssh-in-your-pc/QQ%E6%88%AA%E5%9B%BE20210419203715.jpg" loading="lazy"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(ssh-agent -s)</span>&quot;</span></span><br><span class="line">ssh-add ~/.ssh/id_rsa_me_gitee</span><br></pre></td></tr></table></figure><p>最后测试一下，已经自动添加进来并将私钥成功导入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">E:\IdeaProjects\ssm_online_exam&gt;sh</span><br><span class="line">Agent pid 1472</span><br><span class="line">Identity added: /c/Users/xxxxxx/.ssh/id_rsa_me_gitee (bestguo2020@foxmail.com)</span><br><span class="line"></span><br><span class="line">$ ssh -T bestguo2020@gitee.com</span><br><span class="line">Hi bestguo2020! You<span class="string">&#x27;ve successfully authenticated, but GITEE.COM does not provide shell access.</span></span><br></pre></td></tr></table></figure><h3 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h3><p>在使用 git clone 下来的项目时，最先要做好的是配置用户名和邮箱。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name bestguo2020</span><br><span class="line">git config user.email bestguo2020@foxmail.com</span><br></pre></td></tr></table></figure><p>然后进入克隆下来的 .git 文件夹中，由于是在 gitee 下，若要使用 ssh 进行远程提交的话，需要修改远程仓库的地址</p><p><img src="/journal/How-do-you-configure-ssh-in-your-pc/QQ%E6%88%AA%E5%9B%BE20210419205135.jpg" loading="lazy"></p><p>打开之后，修改成以下格式，然后保存。</p><p><img src="/journal/How-do-you-configure-ssh-in-your-pc/QQ%E6%88%AA%E5%9B%BE20210419205204.jpg" loading="lazy"></p><p>配置完成之后，就可以执行相关的 git 操作了。</p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>我们测试一下命令，看看是否能够成功。只要没有提示 Permission 说明已经成功了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git pull</span><br><span class="line">Already up to <span class="built_in">date</span>.</span><br></pre></td></tr></table></figure><p>在学习管理多个 SSH key 时，参考了以下资料</p><ul><li><a href="https://www.cnblogs.com/heyongzhen/p/9159370.html">在一台电脑上，添加多个Git的ssh key</a></li><li><a href="https://www.freesion.com/article/86161338858/">问题解决 - GIT/GITEE 克隆(CLONE)远程仓库后，已增加SSH公钥还是每次都需要输入用户名密码</a></li><li><a href="https://blog.csdn.net/esonjohn/article/details/79134665">解决Windows下使用github需要每次都要ssh-add的问题</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 小赫赫的项目日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Secure Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AOP 和汉堡包之间的 py 关系</title>
      <link href="/journal/spring-aop-notion/"/>
      <url>/journal/spring-aop-notion/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote style="border-left-color: #ffd36d">⚠️⚠️本日志已被作者用于“厦门理工学院软件工程学院”《J2EE架构与程序设计》课程激励计划，其他同学请勿在任何的方式进行利用本篇日志。</blockquote><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>这些天在学习 AOP，也就是面向切面编程。在理解之前，对于 AOP 的相关概念有点感觉，但是使用方式不是很了解。在参考那几篇博客，也仅仅只是对 AOP 的各项通知进行了打印输出，并没有写出真正的场景。也许是写不出一个很好的例子吧。之前在学习 spring 的时候很痛恨 AOP 。</p><p>昨天下午再对 AOP 进行了一个复习，然后自己编写了一个切面来对中午学习的知识进行了一个巩固。在写完之后，对面向切面编程有一个新的认识，仿佛自己来到了一个新的世界一样。希望随着后面的学习，对 AOP 也越来越深入。今天总算是写完了。</p><p>话不多说，先对 AOP 的相关概念进行一个回顾吧。</p><p>对啦，话说什么样的汉堡比较好吃呢？？🥰🥰🥰</p><p><img src="https://ns-strategy.cdn.bcebos.com/ns-strategy/upload/fc_big_pic/part-00652-817.jpg" alt="img" loading="lazy"></p><p>图片来源于网络</p><span id="more"></span><h2 id="什么是-AOP"><a href="#什么是-AOP" class="headerlink" title="什么是 AOP"></a>什么是 AOP</h2><p>要理解切面编程，就需要先理解什么是切面，可以用汉堡来做类比，以下是一个只有肉的汉堡（图片来源于网络）：</p><p><img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=25419359,3472372314&fm=26&gp=0.jpg" loading="lazy"></p><p>只有肉和一点点菜的汉堡也许还没那么好吃。如果我们要将汉堡包变得更好吃，那么这汉堡里面肯定有生菜，有沙拉，有煎蛋，有芝士等等。<del>哎呀，说着说着口水都流出来了😂😂</del>，放入这些肯定要比只有单纯的肉和菜好吃吧。</p><p>有馅的汉堡（图片来源于网络）</p><p><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=3847601259,258655019&fm=26&gp=0.jpg" loading="lazy"></p><p>那么，切面来咯🤩</p><p>切面其实就是两个面包之间要放入的东西，两个面包之间的间隙就叫做切面。</p><h2 id="AOP-相关术语"><a href="#AOP-相关术语" class="headerlink" title="AOP 相关术语"></a>AOP 相关术语</h2><p>其实，AOP 的那些相关术语实在是难以理解，即使是对于 Spring 的作者也是如此，对下面的专业术语也是非常无语的。这也很正常的啦，他们也没办法。官方对于 <a href="https://docs.spring.io/spring-framework/docs/2.0.x/reference/aop.html">aop</a> 如是说：</p><blockquote><p>These terms are not Spring-specific. Unfortunately, AOP terminology is not particularly intuitive; however, it would be even more confusing if Spring used its own terminology.</p><p>这些术语不是特定于 Spring 的。可惜 AOP 术语不是特别直观；然而，如果 Spring 使用自己的术语，那就更令人困惑了。</p></blockquote><p><del>我写不出来呀，我可以不介绍吗 😂😂</del></p><p>实在是写不出来，在参考的博客中复制了一份出来，然后红色部分就是对概念进行理解。</p><ul><li><p>Aspect：即切面， Aspect 声明类似于 Java 中的类声明，在 Aspect 中会包含着一些 Pointcut 以及相应的 Advice。<font color="red">类比汉堡：也就是只有两块面包之间的间隙</font></p></li><li><p>Join point：即连接点，表示在程序中明确定义的点，典型的包括方法调用，对类成员的访问以及异常处理程序块的执行等等，它自身还可以嵌套其它 join point。<font color="red">类比汉堡：这个有点不怎么好类比。如果要将汉堡做的好看，那肯定不能像下图这样子放。这里的连接点就是汉堡的中心点，如果将这生菜，芝士这些面包的中心点对齐，这样就岂不是更好看了。上面说了一大通说的连接点就相当于是面包的中心、生菜的中心、芝士的中心点</font></p><p>难看的汉堡（图片来自于网络）</p><p><img src="/journal/spring-aop-notion/bad.jpg" alt="img" loading="lazy"></p><p>整齐的汉堡（图片来自于网络）：</p><p><img src="https://ss0.baidu.com/-Po3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/42a98226cffc1e171940d4f84b90f603728de978.jpg" alt="img" loading="lazy"></p></li><li><p>Pointcut：即切点，表示一组 join point，这些 join point 或是通过逻辑关系组合起来，或是通过通配、正则表达式等方式集中起来，它定义了相应的 Advice 将要发生的地方。<font color="red">类比汉堡：这个也有点不怎么好类比。按照上面的连接点的定义，把他想象成将这肉饼，生菜和芝士这些面包的中心点对齐。</font></p></li><li><p>Advice：即通知，定义了在 Pointcut 里面定义的程序点具体要做的操作，它通过 before、after 和 around 来区别是在每个 joint point 之前、之后还是代替执行的代码。<font color="red">类比汉堡：把他想象成把汉堡的肉，生菜，沙拉，煎蛋</font>。</p></li><li><p>Target：织入 Advice 的目标对象。<font color="red">类比汉堡：把它想象成把汉堡合起来</font></p></li><li><p>Weaving：将 Aspect 和其他对象连接起来, 并创建增强对象的过程。<font color="red">类比汉堡：把它想象成已经完成的汉堡</font></p></li></ul><p>通过上面的类比，感觉自己对上面的相关术语有一定的更好的认识，接下来再谈谈通知。通知也分为很多种类型。</p><h2 id="AOP-的使用场景"><a href="#AOP-的使用场景" class="headerlink" title="AOP 的使用场景"></a>AOP 的使用场景</h2><p>相关的使用场景如下，话不多说，直接贴上去：</p><ul><li>Authentication 权限 </li><li>Caching 缓存 </li><li>Context passing 内容传递 </li><li>Error handling 错误处理 </li><li>Lazy loading　懒加载 </li><li>Debugging　　调试 </li><li>logging, tracing, profiling and monitoring　记录跟踪　优化　校准 </li><li>Performance optimization　性能优化 </li><li>Persistence　　持久化 </li><li>Resource pooling　资源池 </li><li>Synchronization　同步 </li><li>Transactions 事务</li></ul><h2 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h2><p>我觉得通知叫 Advice 怪怪的，为何不叫 Notification 呢？在介绍通知之前，先来理解一下目标方法。</p><h3 id="什么是目标方法"><a href="#什么是目标方法" class="headerlink" title="什么是目标方法"></a>什么是目标方法</h3><p>还记得第二张的汉堡吗？第二张汉堡只有肉，没有那么好吃。在汉堡中，肉饼就是目标方法。</p><h3 id="五种通知类型"><a href="#五种通知类型" class="headerlink" title="五种通知类型"></a>五种通知类型</h3><p>五种通知类型可以理解为将汉堡的生菜和芝士所放置的位置。</p><ul><li>before：即前置通知，在目标方法被调用之前调用通知功能</li><li>after returning：即后置通知，在目标方法成功执行之后调用通知</li><li>after throwing：即异常通知，在目标方法抛出异常后调用通知</li><li>after(final)：即最终通知，在目标方法完成之后调用通知，此时不会关心方法的输出是什么</li><li>around advice：即环绕通知，但是它包含了以上四种的全部通知。</li></ul><h3 id="通知相关介绍"><a href="#通知相关介绍" class="headerlink" title="通知相关介绍"></a>通知相关介绍</h3><p>先介绍环绕通知，然后通过环绕通知来介绍其它四种通知类型。毕竟环绕通知包含这四种通知类型，请看代码示例。以下的代码是介绍基于 aspectj 注解的配置方式，后续再进行回顾。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around(value = &quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">aroundAsdf</span><span class="params">(ProceedingJoinPoint pjp)</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;我是生菜&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是芝士&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;我是沙拉&quot;</span>);</span><br><span class="line">        object = pjp.proceed(); <span class="comment">// 肉饼</span></span><br><span class="line">        System.out.println(<span class="string">&quot;我是芝士&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">        throwable.printStackTrace();</span><br><span class="line">        System.out.println(<span class="string">&quot;我是洋葱&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是生菜&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中 <code>pjp.proceed() </code> 就是目标对象，也就是汉堡中的肉饼，看起来的确是个汉堡。</p><p>肉饼之上生菜，芝士就是前置通知，即这些操作在目标对象之前；肉饼下层的芝士就是后置通知，即这些操作在目标对象之后。</p><p>catch 代码块中的洋葱就是异常通知。</p><p>finally 代码块中的生菜就是最终通知。</p><p>以下的代码示例展示了单独分开的四种通知类型。</p><blockquote><p>其实我在理解 aop 之前，一直都认为 aop 的使用场景就仅仅是做日志记录的功能，所以之前就认为 aop 的用处并不是很大。其实现在很有必要去了解 aop，而且作为 aop 也不仅仅只是利用到这么 low 逼的功能上吧。</p><p>课上老师所教的 aop 还是各种博客上举出 aop 的使用例子，绝大多数都只是讲日志记录相关的例子。即使是知道了使用场景也不会说出来。</p></blockquote><h4 id="前置通知"><a href="#前置通知" class="headerlink" title="前置通知"></a>前置通知</h4><blockquote><p>在给这 4 个通知类型定义的时候，你可以默认给切面类中方法给一个 JoinPoint 参数，通过这个参数可以获取目标方法中的参数以及当前目标方法所在的对象。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(value = &quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkPermission</span><span class="params">(JoinPoint pointcut)</span> &#123;</span><br><span class="line">    Object[] objects = pointcut.getArgs();</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) objects[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(user.getRole() == <span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;你没有操作学生的权限&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="后置通知"><a href="#后置通知" class="headerlink" title="后置通知"></a>后置通知</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterReturning(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturn</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;操作完成23333---------------------&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="异常通知"><a href="#异常通知" class="headerlink" title="异常通知"></a>异常通知</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterThrowing(value = &quot;pointCut()&quot;, throwing = &quot;throwable&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">(Throwable throwable)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;操作完成，但是出现异常-----------------&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="最终通知"><a href="#最终通知" class="headerlink" title="最终通知"></a>最终通知</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@After(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;无论是否异常，都执行-----------------&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h3><p>上面的代码示例不想写过多的文字描述，看看就行。</p><p>以上的例子和绝大多数的博客简直就是大同小异，看起来就都是模拟日志记录。也就让我们产生了错觉，aop 真的仅仅只有这种功能？然而我觉得如果要操纵目标对象中的方法的话，还是使用环绕通知的好。</p><p>以上四种的通知类型，也不是说没有用，毕竟存在即合理。</p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><h3 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h3><p>以下示例代码是基于注解的 AOP 编程，在此之前需要介绍一下几个注解。</p><ul><li>@Aspect：切面类，这个直接标在切面类上</li><li>@PointCut：切入点表达式</li><li>@Before：前置通知的注解，需要传入一个切入点，也就是 PointCut</li><li>@AfterReturning：后置通知注解，需要传入一个切入点，也就是 PointCut</li><li>@AfterThrowing：异常通知注解，需要传入一个切入点，也就是 PointCut</li><li>@After：最终通知注解，需要传入一个切入点，也就是 PointCut</li><li>@Around：环绕通知注解，需要传入一个切入点，也就是 PointCut</li></ul><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>我现在要做一个简单的学生信息管理系统，这个功能不是很全面，但是有利用到 AOP 在里面。</p><p>好的，现在是这样的一个情况，管理员有两类，一个是管理员，管理员可以添加学生信息和查询信息，另一个是普通用户，普通用户不能添加学生信息，但是却可以查询学生信息。</p><h3 id="学生实体类"><a href="#学生实体类" class="headerlink" title="学生实体类"></a>学生实体类</h3><p>首先建立一个学生实体类（setter 和 getter 省略）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="用户类"><a href="#用户类" class="headerlink" title="用户类"></a>用户类</h4><p>建立了一个用户类（setter 和 getter 省略）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> String username;<span class="comment">//用户名</span></span><br><span class="line">   <span class="keyword">private</span> String password;<span class="comment">//密码</span></span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> role; <span class="comment">//用户角色 0表示用户，1表示系统管理员</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="用户服务类"><a href="#用户服务类" class="headerlink" title="用户服务类"></a>用户服务类</h4><p>建立了一个 UserService 类，UserService 类中的成员变量定义了一个 <code>List</code> 用于保存学生信息。方法用于添加用户，删除用户和查询用户。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储学生</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; students = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        students.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">1</span>, <span class="string">&quot;xiaoqiang&quot;</span> + <span class="number">1</span>, <span class="number">21</span>));</span><br><span class="line">        students.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">2</span>, <span class="string">&quot;xiaoqiang&quot;</span> + <span class="number">2</span>, <span class="number">22</span>));</span><br><span class="line">        students.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">3</span>, <span class="string">&quot;xiaoqiang&quot;</span> + <span class="number">3</span>, <span class="number">23</span>));</span><br><span class="line">        students.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">4</span>, <span class="string">&quot;xiaoqiang&quot;</span> + <span class="number">4</span>, <span class="number">24</span>));</span><br><span class="line">        students.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">5</span>, <span class="string">&quot;xiaoqiang&quot;</span> + <span class="number">5</span>, <span class="number">25</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加学生</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addStudent</span><span class="params">(Student student, User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> students.add(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除学生</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delStudent</span><span class="params">(Student student, User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> students.remove(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印学生信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printStudents</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Student student: students) &#123;</span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="切面类"><a href="#切面类" class="headerlink" title="切面类"></a>切面类</h4><p>在切面类中我只定义了，环绕通知，因为我觉得吧环绕通知通过控制方法返回值来确定权限。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itbaizhan.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置切入点表达式，切入点表达式的匹配了 UserService 目标对象中的带 Student 的相关方法。</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.itbaizhan.aop.UserService.*Student(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(value = &quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">aroundAsdf</span><span class="params">(ProceedingJoinPoint pjp)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 得到方法中的参数</span></span><br><span class="line">            Object[] objects = pjp.getArgs();</span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (Object o : objects) &#123;</span><br><span class="line">                <span class="keyword">if</span>(o <span class="keyword">instanceof</span> User) &#123;</span><br><span class="line">                    user = (User) o;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">// 判断是否为管理员</span></span><br><span class="line">            <span class="keyword">if</span> (user.getRole() == <span class="number">1</span>) &#123;</span><br><span class="line">                object = pjp.proceed();</span><br><span class="line">                System.out.println(<span class="string">&quot;学生信息被更改！&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                object = <span class="literal">false</span>;</span><br><span class="line">                System.out.println(<span class="string">&quot;学生信息被更改失败，你没有权限！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;操作完成，但是出现异常-----------------&quot;</span>);</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中 <code>pjp.proceed();</code> 的返回值是一个 Object 类型，这个 <code>proceed()</code> 其实就是目标对象的调用，它的返回出来的值就是目标对象的返回值，之前一直对这个不懂，现在懂了。</p><h4 id="bean-的相关配置"><a href="#bean-的相关配置" class="headerlink" title="bean 的相关配置"></a>bean 的相关配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置 UserService --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.aop.UserService&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置切面类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.aop.MyAspect&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myAspect&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启基于注解的配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itbaizhan.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Entrance</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans2.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> (UserService) applicationContext.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="comment">// 登录验证</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="comment">// 模拟登录</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">            <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;xiaohehe&quot;</span>.equals(username) &amp;&amp; <span class="string">&quot;123456&quot;</span>.equals(password)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;登录成功，管理员&quot;</span>);</span><br><span class="line">                user.setUsername(<span class="string">&quot;xiaohehe&quot;</span>);</span><br><span class="line">                user.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">                user.setRole(<span class="number">1</span>);</span><br><span class="line">                <span class="comment">// 进入业务</span></span><br><span class="line">                go(sc, user);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;hehe&quot;</span>.equals(username) &amp;&amp; <span class="string">&quot;123&quot;</span>.equals(password)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;登录成功，普通用户&quot;</span>);</span><br><span class="line">                user.setUsername(<span class="string">&quot;xiaohehe&quot;</span>);</span><br><span class="line">                user.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">                user.setRole(<span class="number">0</span>);</span><br><span class="line">                go(sc, user);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;登录失败，用户名或密码输错了！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主程序的业务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">go</span><span class="params">(Scanner sc, User user)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;\n请选择：&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">select</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;add&quot;</span>.equals(select)) &#123;</span><br><span class="line">                <span class="keyword">if</span>(userService.addStudent(<span class="keyword">new</span> <span class="title class_">Student</span>(index, <span class="string">&quot;xiaoqiang&quot;</span> + index, <span class="number">20</span> + index), user))&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;添加成功&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;添加失败&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;del&quot;</span>.equals(select)) &#123;</span><br><span class="line">                <span class="keyword">if</span>(userService.delStudent(user))&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;删除失败&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;print&quot;</span>.equals(select)) &#123;</span><br><span class="line">                userService.printStudents();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;quit&quot;</span>.equals(select)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;程序退出了！&quot;</span>);</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;logout&quot;</span>.equals(select)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;用户退出登录了！&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;选项有误！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h4><p>程序执行后，先输入用户名和密码进入程序，打印结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xiaohehe</span><br><span class="line">123456</span><br><span class="line">登录成功，管理员</span><br><span class="line"></span><br><span class="line">请选择：</span><br></pre></td></tr></table></figure><p>然后我们先打印学生信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">请选择：print</span><br><span class="line">Student&#123;id=1, name=&#x27;xiaoqiang1&#x27;, age=21&#125;</span><br><span class="line">Student&#123;id=2, name=&#x27;xiaoqiang2&#x27;, age=22&#125;</span><br><span class="line">Student&#123;id=3, name=&#x27;xiaoqiang3&#x27;, age=23&#125;</span><br><span class="line">Student&#123;id=4, name=&#x27;xiaoqiang4&#x27;, age=24&#125;</span><br><span class="line">Student&#123;id=5, name=&#x27;xiaoqiang5&#x27;, age=25&#125;</span><br></pre></td></tr></table></figure><p>执行添加操作，看，管理员可以进行添加学生。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">请选择：add</span><br><span class="line">学生信息被更改！</span><br><span class="line">添加成功</span><br><span class="line"></span><br><span class="line">请选择：print</span><br><span class="line">Student&#123;id=1, name=&#x27;xiaoqiang1&#x27;, age=21&#125;</span><br><span class="line">Student&#123;id=2, name=&#x27;xiaoqiang2&#x27;, age=22&#125;</span><br><span class="line">Student&#123;id=3, name=&#x27;xiaoqiang3&#x27;, age=23&#125;</span><br><span class="line">Student&#123;id=4, name=&#x27;xiaoqiang4&#x27;, age=24&#125;</span><br><span class="line">Student&#123;id=5, name=&#x27;xiaoqiang5&#x27;, age=25&#125;</span><br><span class="line">Student&#123;id=8, name=&#x27;xiaoqiang8&#x27;, age=28&#125;</span><br><span class="line"></span><br><span class="line">请选择：</span><br></pre></td></tr></table></figure><p>如果我们切换成普通管理员，再次添加试试。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">请选择：logout</span><br><span class="line">用户退出登录了！</span><br><span class="line">hehe</span><br><span class="line">123</span><br><span class="line">登录成功，普通用户</span><br><span class="line"></span><br><span class="line">请选择：</span><br></pre></td></tr></table></figure><p>输入 add 的时候，发现添加失败了。输入 del 的时候也是如此！</p><p>然后看上面的 UserService 类中没有挨个判断权限的代码，却能知道你没有权限。这就是 aop 中定义的环绕通知的代码的功劳。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">请选择：add</span><br><span class="line">学生信息被更改失败，你没有权限！</span><br><span class="line">添加失败</span><br><span class="line"></span><br><span class="line">请选择：del</span><br><span class="line">学生信息被更改失败，你没有权限！</span><br><span class="line">删除失败</span><br><span class="line"></span><br><span class="line">请选择：print</span><br><span class="line">Student&#123;id=1, name=&#x27;xiaoqiang1&#x27;, age=21&#125;</span><br><span class="line">Student&#123;id=2, name=&#x27;xiaoqiang2&#x27;, age=22&#125;</span><br><span class="line">Student&#123;id=3, name=&#x27;xiaoqiang3&#x27;, age=23&#125;</span><br><span class="line">Student&#123;id=4, name=&#x27;xiaoqiang4&#x27;, age=24&#125;</span><br><span class="line">Student&#123;id=5, name=&#x27;xiaoqiang5&#x27;, age=25&#125;</span><br><span class="line">Student&#123;id=8, name=&#x27;xiaoqiang8&#x27;, age=28&#125;</span><br><span class="line"></span><br><span class="line">请选择：</span><br></pre></td></tr></table></figure><h4 id="示例总结"><a href="#示例总结" class="headerlink" title="示例总结"></a>示例总结</h4><p>上面的权限验证的场景也是自己想出来的，我自己能够真真正正的体会到 AOP 的编写方法，同时也对上面的概念进行了一个类比，我觉得这里面的示例代码拿过来复制运行一下，体会体会并理解 aop 的道理，其实还是很重要的。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>自己在思考的过程中也想到过很多的类比方式，比如用牙签串起来的汉堡，羊肉串，西瓜，豆沙包，饺子等等。只要能真正的弄懂，那才是王道。</p><p>在理解 AOP 以及使用场景，参考了以下资料</p><ul><li><a href="https://blog.csdn.net/q982151756/article/details/80513340">细说Spring——AOP详解（AOP概览）</a></li><li><a href="https://blog.csdn.net/happy_coding_life/article/details/80353009">13-SpringAOP最强大的通知-环绕通知</a></li><li><a href="https://www.cnblogs.com/chuijingjing/p/9806651.html">Spring AOP 五大通知类型</a></li><li><a href="https://www.cnblogs.com/sandea/p/11175834.html">Spring AOP（通知、连接点、切点、切面）</a></li><li><a href="https://www.jianshu.com/p/5b9a0d77f95f">spring aop 及实现方式</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Spring 开发框架学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> spring </tag>
            
            <tag> AOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webui 登录界面制作</title>
      <link href="/journal/webui-login/"/>
      <url>/journal/webui-login/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天下午打算把 webui 那节课老师给的登录界面给做出来，后续在 j2ee 期末项目时候就直接用这个作为登录和注册的界面。省的再去找登录和注册的素材。</p><h2 id="提供的东西"><a href="#提供的东西" class="headerlink" title="提供的东西"></a>提供的东西</h2><p>最终实现的效果预览图如下</p><p><img src="/images/webui-login/z20h4-xk369.gif" loading="lazy"></p><p>一个 html 文件，内容如下</p><span id="more"></span><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/style.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left-container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户名&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;密码&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;message-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>忘记密码<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right-container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;regist-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;regist&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;actoin-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>话不多说，中午不睡觉了，直接开干！</p><h2 id="界面实现"><a href="#界面实现" class="headerlink" title="界面实现"></a>界面实现</h2><p>看了一下视频效果和截图效果，界面的布局大致能够把握清楚了。</p><h3 id="获取登录界面的宽高"><a href="#获取登录界面的宽高" class="headerlink" title="获取登录界面的宽高"></a>获取登录界面的宽高</h3><p>利用 QQ 截图，得到了宽为 600px ，高为 375px。设置登录的宽和高。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.login-container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">375px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="渐变背景"><a href="#渐变背景" class="headerlink" title="渐变背景"></a>渐变背景</h3><p>由于这是渐变背景，左上角浅，右下角深。通过 QQ 截图获取到左上角和右下角的 rgb 的三种值即可。这两种颜色的代码分别为 <code>218,148,255</code> 和 <code>133,99,191</code>，然后清空默认 body 自带的外边距。如果给背景设置渐变样式，使用 linear-gradient 即可。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="built_in">rgb</span>(<span class="number">218</span>,<span class="number">148</span>,<span class="number">255</span>), <span class="built_in">rgb</span>(<span class="number">133</span>,<span class="number">99</span>,<span class="number">191</span>));</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过保存之后，效果感觉怪怪的。</p><p><img src="/images/webui-login/QQ%E6%88%AA%E5%9B%BE20210410143120.jpg" loading="lazy"></p><p>因为背景有重复，在 backgroud 属性中设置一个 no-repeat 即可</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="built_in">rgb</span>(<span class="number">218</span>,<span class="number">148</span>,<span class="number">255</span>), <span class="built_in">rgb</span>(<span class="number">133</span>,<span class="number">99</span>,<span class="number">191</span>)) no-repeat;</span><br></pre></td></tr></table></figure><p><img src="/images/webui-login/QQ%E6%88%AA%E5%9B%BE20210410143800.jpg" loading="lazy"></p><p>不过问题又来了，发现下面的背景都是白的。而且 body 的高度都是由前面对类选择器 <code>login-container</code> 设置的高度所撑起的。即使给 body 设置样式为 <code>height: 100%</code> 也是不行。后面发现，整个页面的宽和高是受到 html 标签对的控制，而不是 body 标签对，所以我们只要通过设置以下样式即可宽高自适应。</p><p>并且，对于 html 标签对来说，设置百分比就是给给整个网页“确定的”宽和高。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 给 html 设置一个 100% 的高度，设置成了 100% 整个页面的高度就是浏览器的高度</span></span><br><span class="line"><span class="comment">这样，html 中的 body 标签也就可以使用百分比来控制宽高</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="/images/webui-login/QQ%E6%88%AA%E5%9B%BE20210410145620.jpg" loading="lazy"></p><p>发现背景的渐变方向还是要修改修改，查阅使用方法之后设置渐变方向，只要在第一个参数添加倾斜角即可，目测应该是 160° 左右吧</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">160deg</span>, <span class="built_in">rgb</span>(<span class="number">218</span>,<span class="number">148</span>,<span class="number">255</span>), <span class="built_in">rgb</span>(<span class="number">133</span>,<span class="number">99</span>,<span class="number">191</span>));</span><br></pre></td></tr></table></figure><p>设置完成之后，效果如下</p><p><img src="/images/webui-login/QQ%E6%88%AA%E5%9B%BE20210410150240.jpg" loading="lazy"></p><p>这样一来，背景就设置完成了。</p><h3 id="登录界面整体"><a href="#登录界面整体" class="headerlink" title="登录界面整体"></a>登录界面整体</h3><p>通过效果图发现，登录界面是由左边的填写登录部分和右边的注册部分。先设置整体，再设置左边部分和右边部分。</p><h3 id="整体居中"><a href="#整体居中" class="headerlink" title="整体居中"></a>整体居中</h3><p>将登录框设置为绝对定位，尽力设置为水平居中和垂直居中。内部的布局设置成弹性布局，里面的 div 就是水平方向的。</p><blockquote><p>calc 函数通过计算的方式算出属性值，在某些情况下你需要用到它，比如下面的居中方式。支持“+”、“-”、“*”、“/”，运算方式和小学里的四则运算方式一模一样。</p><p>运算的单位可以不统一。比如 calc(10em - 100px) 这没有问题。</p></blockquote><p>还有一个圆角半径</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.login-container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">375px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">300px</span>);</span><br><span class="line">  <span class="attribute">top</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">100px</span>);</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">62px</span> <span class="built_in">rgb</span>(<span class="number">98</span>,<span class="number">79</span>,<span class="number">182</span>), -<span class="number">10px</span> <span class="number">0</span> <span class="number">62px</span> <span class="built_in">rgb</span>(<span class="number">98</span>,<span class="number">79</span>,<span class="number">182</span>);</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后左边部分和右边部分先设置一下它的宽度</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left-container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">450px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right-container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到的效果</p><p><img src="/images/webui-login/QQ%E6%88%AA%E5%9B%BE20210410153414.jpg" loading="lazy"></p><h3 id="左边部分"><a href="#左边部分" class="headerlink" title="左边部分"></a>左边部分</h3><p>感觉左边部分有一个 52px 的 padding ，设置看看。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left-container</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">52px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="登录文字样式"><a href="#登录文字样式" class="headerlink" title="登录文字样式"></a>登录文字样式</h4><p>先弄登录文字的样式吧，登录下面有一个<del>蓝色</del>的下划线。字体颜色是白的 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">3px</span> solid <span class="built_in">rgb</span>(<span class="number">33</span>,<span class="number">158</span>,<span class="number">208</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后设置输入框的样式，给这个 <code>.input-container</code> 选择器直接上一个顶部外边距为 40px。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.input-container</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输入框样式"><a href="#输入框样式" class="headerlink" title="输入框样式"></a>输入框样式</h4><p>然后给每一个输入框设置一个宽度为 100%，为什么可以设置百分比，因为 input 的父元素的宽的值是确定的，所以可以用百分比。这和前面提到的 body 不能直接设置百分比是一样的。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.input-container</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后这两个输入框之间有一个底部外边距，给它设置为 20px，这样看起来他们有一个距离。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.input-container</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于这两个输入框都有一个默认的样式，背景是白色的，每一条边都有边框，默认是灰色的，还有提示文字的颜色，默认也是深灰色的。这些样式都是需要进行更改的。</p><p>我直接给它修改边框样式，背景颜色为透明，去掉左、上、右的边框样式，设置底部边框。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.input-container</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="built_in">rgb</span>(<span class="number">88</span>,<span class="number">142</span>,<span class="number">214</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置完之后，看到大体上的效果已经出来了。</p><p><img src="/images/webui-login/QQ%E6%88%AA%E5%9B%BE20210410162122.jpg" loading="lazy"></p><p>然后就是设置提示性文本的样式，直接在 Input 标签对中进行设置肯定是无效的。所以，通过伪类来设置，input 输入框有一个提示性的伪类，叫做 placeholder ，通过这个来设置，提示性字体的样式就可以设置了。</p><p>看效果的提示性字体并不是特别的白，目测一下应该还要灰一点点。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.input-container</span> <span class="selector-tag">input</span><span class="selector-pseudo">::placeholder</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/webui-login/QQ%E6%88%AA%E5%9B%BE20210410162636.jpg" loading="lazy"></p><p>感觉提示性输入框和底部边距，有一定的距离，设置一下内边距就 OK 了。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.input-container</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">6px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/webui-login/QQ%E6%88%AA%E5%9B%BE20210410162906.jpg" loading="lazy"></p><h4 id="忘记密码样式"><a href="#忘记密码样式" class="headerlink" title="忘记密码样式"></a>忘记密码样式</h4><p>忘记密码样式也不难</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.message-container</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#eee</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">90px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="左边部分的收工之作"><a href="#左边部分的收工之作" class="headerlink" title="左边部分的收工之作"></a>左边部分的收工之作</h4><p>缺了一个背景颜色，左侧的背景颜色是渐进的，所以还是要用到 linear-gradient ，设置好渐进的角度。左上角部分的颜色是 <code>119,83,171</code>，右下角部分的颜色是 <code>89,109,213</code> 。设置完背景颜色还不行，还要再设置左上角和左下角的为圆角，且圆角半径为 20px ，和父元素的圆角一样。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left-container</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">160deg</span>, <span class="built_in">rgb</span>(<span class="number">119</span>,<span class="number">83</span>,<span class="number">171</span>), <span class="built_in">rgb</span>(<span class="number">89</span>,<span class="number">109</span>,<span class="number">213</span>));</span><br><span class="line">  <span class="attribute">border-top-left-radius</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border-bottom-left-radius</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>左边部分的效果如下</p><p><img src="/images/webui-login/QQ%E6%88%AA%E5%9B%BE20210410163926.jpg" loading="lazy"></p><h3 id="右边部分"><a href="#右边部分" class="headerlink" title="右边部分"></a>右边部分</h3><p>右边部分有一个注册，提交的按钮。通过测量，应该有一个内边距，上下内边距均为 47px，左右边距均为 50px。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.right-container</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">47px</span> <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注册文字样式"><a href="#注册文字样式" class="headerlink" title="注册文字样式"></a>注册文字样式</h4><p>设置注册文字的样式，白色文字，黄色下划线，字体大小和登录一样。然后尽量将其居中，目测设置外边距为 30px。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.regist-container</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.regist</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">3px</span> solid <span class="built_in">rgb</span>(<span class="number">224</span>,<span class="number">207</span>,<span class="number">117</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="提交按钮样式"><a href="#提交按钮样式" class="headerlink" title="提交按钮样式"></a>提交按钮样式</h4><p>提交按钮样式，有一个黄色边框，提交的文字是白色的，按钮的宽高和圆角半径均为 48px 。提交按钮应该尽量和注册文字拉开距离，以及尽量将注册按钮将其居中。设置文字大小为 14px</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.actoin-container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">48px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">48px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">48px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid yellow;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">135px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了让文字彻底的水平和垂直居中，设置水平居中，行高和高度一样高即可。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.actoin-container</span> &#123; </span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">48px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我现在才发现，整个登录框的高度不对劲，好像并没有那么高，重新调整过来。😂😂😂</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.login-container &#123;</span><br><span class="line">  height: 315px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.message-container &#123;</span><br><span class="line">  margin-top: 30px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调整好之后，右边还缺一个背景颜色，再加一个上去。这个背景并没有渐变效果，是单色的，我给它直接取过来设置颜色就行了。背景颜色代码是 <code>95,85,198</code> ，再加一个右上和右下的圆角，半径为 20px。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.right-container</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">95</span>,<span class="number">85</span>,<span class="number">198</span>);</span><br><span class="line">  <span class="attribute">border-top-right-radius</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border-bottom-right-radius</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终效果如下</p><p><img src="/images/webui-login/QQ%E6%88%AA%E5%9B%BE20210410172352.jpg" loading="lazy"></p><h2 id="其它动画效果"><a href="#其它动画效果" class="headerlink" title="其它动画效果"></a>其它动画效果</h2><p>通过观察提供的效果视频，发现有一些特效。鼠标悬停在输入框上，输入框的下划线变白。忘记密码那部分，字体也会变白。还有点击提交按钮的时候，按钮的背景颜色会变成紫色，而且还有一点渐变的效果。</p><p>先设置鼠标悬停时 cursor 的样式，以及过渡属性 transition。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.message-container</span>, <span class="selector-class">.regist</span>, <span class="selector-class">.actoin-container</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">200ms</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置输入框鼠标悬停的在这些组件上的样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.input-container</span> <span class="selector-tag">input</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入框被点击时，会有一个边框的效果，而视频中并没有边框。所以使用 focus 伪类，将边框给去除掉，去除边框使用 outline（轮廓）属性。将宽度置为 0 即可</p><blockquote><p>outline（轮廓）是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。它的用法和 border 属性的使用一样。不过区别就在于，这种轮廓并不会占用页面的空间。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.input-container</span> <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">  <span class="attribute">outline</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置忘记密码悬停</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.message-container</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置注册悬停，悬停部分是下划线</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.regist</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">3px</span> solid white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置按钮悬停</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.actoin-container</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>,<span class="number">125</span>,<span class="number">255</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终的动图效果如下</p><p><img src="/images/webui-login/y3f53-c2lij.gif" loading="lazy"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>终于完成了，边写代码边记录的过程真的是又开心又累。好困，先躺一会儿。</p>]]></content>
      
      
      <categories>
          
          <category> 小赫赫的项目日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
            <tag> webui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>期末项目之在线考试系统</title>
      <link href="/journal/ssm-online-exam/"/>
      <url>/journal/ssm-online-exam/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这学期的期末项目将使用本学期所学技术，即使用 Spring + SpringMVC + MyBatis 的在线考试系统。</p><h2 id="所需技术"><a href="#所需技术" class="headerlink" title="所需技术"></a>所需技术</h2><p>本次期末项目采用以下技术，其中又分为前端部分和后端部分</p><h3 id="后端部分"><a href="#后端部分" class="headerlink" title="后端部分"></a>后端部分</h3><ol><li>Spring + SpringMVC + MyBatis</li><li>Apache POI（处理word，excel）</li><li>pageHelper（处理分页）</li><li>JUnit（用于单元测试）</li></ol><span id="more"></span><h3 id="前端部分"><a href="#前端部分" class="headerlink" title="前端部分"></a>前端部分</h3><ol><li>MiniLayUI</li><li>JQuery</li></ol><h2 id="项目协作"><a href="#项目协作" class="headerlink" title="项目协作"></a>项目协作</h2><p>项目协作的部分使用 git，使用 gitee 作为代码仓库。在使用 git 作为多人协作会可能出现以下的问题，一个是不会用，另一个是会用之后，不知该如何去合并。</p><p>还有一些合作上的问题，等等各种疑难杂项。</p><h3 id="如何操作"><a href="#如何操作" class="headerlink" title="如何操作"></a>如何操作</h3><p>在此之前，需要注册一个 gitee 的账号，后续的代码协作才能继续操作。</p><p>gitee 账号创建完成之后，需要配置 SSH，SSH 的配置可以参考下面的链接。</p><p><a href="/2021/04/19/How-do-you-configure-ssh-in-your-pc/">如何管理你的多个 SSH key</a></p><h4 id="如果你是新加入的组员"><a href="#如果你是新加入的组员" class="headerlink" title="如果你是新加入的组员"></a>如果你是新加入的组员</h4><p>1、首先获取项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://gitee.com/bestguo2020/ssm_online_exam.git</span><br></pre></td></tr></table></figure><p>2、获取项目完成切换到 dev01 分支进行操作了</p><blockquote><p>分支的可以理解成工作区，但是专业的叫法还是叫“分支”</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout dev01</span><br></pre></td></tr></table></figure><p>接下来就是配置开发者的邮箱和用户名，配置用户名和邮箱可以参考以下链接</p><p><a href="https://www.bestguo.top/2021/04/19/How-do-you-configure-ssh-in-your-pc/#%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE">如何管理你的多个 SSH key - 项目配置</a></p><p>以下配置完成之后就可以继续愉快的写代码了。</p><p>3、假如你某项功能完成之后，需要添加你要提交的代码（“.” 代表全部的代码）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p>4、在提交代码时需要交代清楚你需要做了哪些工作，也就是 xxxxx 里的内容需要填写的部分。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;xxxxxx&quot;</span></span><br></pre></td></tr></table></figure><p>5、推送到远程仓库之前，将 gitee 上的远程代码拉取下来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin dev01</span><br></pre></td></tr></table></figure><p>6、开始推送，同时也需要将你的工作区推到 gitee</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin dev01</span><br></pre></td></tr></table></figure><h4 id="如果你是已经加入的组员"><a href="#如果你是已经加入的组员" class="headerlink" title="如果你是已经加入的组员"></a>如果你是已经加入的组员</h4><p>1、首先获取最新的项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin dev01</span><br></pre></td></tr></table></figure><p>拉取完成之后就可以继续愉快的写代码了。</p><p>2、假如你某项功能完成之后，需要添加你要提交的代码（“.” 代表全部的代码）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p>3、在提交代码时需要交代清楚你需要做了哪些工作，也就是 xxxxx 里的内容需要填写的部分。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;xxxxxx&quot;</span></span><br></pre></td></tr></table></figure><p>4、推送到远程仓库之前，将 gitee 上的远程代码拉取下来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin dev01</span><br></pre></td></tr></table></figure><p>5、开始推送，同时也需要将你的工作区推到 gitee</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin dev01</span><br></pre></td></tr></table></figure><h3 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h3><p>在进行协作的时候，可能会出现代码冲突等等问题，后续出现了问题在新创建的日志中记录</p><h4 id="2021-04-29"><a href="#2021-04-29" class="headerlink" title="2021-04-29"></a>2021-04-29</h4><p>提交项目时出现权限不够的问题，其实就是没将成员添加进来。<a href="/2021/04/29/git-push-access-denied/">参考链接</a></p><h4 id="2021-05-09"><a href="#2021-05-09" class="headerlink" title="2021-05-09"></a>2021-05-09</h4><p>模拟提交代码的时候由于修改同一个位置导致的代码冲突，这种冲突没办法只好通过协商的方式解决。</p><p>拉取代码时出现代码冲突信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git pull origin dev01</span></span><br><span class="line">remote: Enumerating objects: 6, done.</span><br><span class="line">remote: Counting objects: 100% (6/6), done.</span><br><span class="line">remote: Compressing objects: 100% (2/2), done.</span><br><span class="line">remote: Total 4 (delta 1), reused 0 (delta 0), pack-reused 0</span><br><span class="line">Unpacking objects: 100% (4/4), done.</span><br><span class="line">From gitee.com:bestguo2020/ssm_online_exam</span><br><span class="line"> * branch            dev01      -&gt; FETCH_HEAD</span><br><span class="line">   271754d..e441092  dev01      -&gt; origin/dev01</span><br><span class="line">Auto-merging asd.txt</span><br><span class="line">CONFLICT (content): Merge conflict in asd.txt</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br></pre></td></tr></table></figure><p>发生冲突之后，asd.txt 中的文件内容如下</p><p><img src="/journal/ssm-online-exam/QQ%E6%88%AA%E5%9B%BE20210509173006.jpg" alt="QQ截图20210509173006" loading="lazy"></p><p>解决的办法有三种，一种是保留上面的，另一种时保留下面的，最后一种是两者都保留。</p><p>通过协商完成之后，重新执行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;xxxxxx&quot;</span></span><br></pre></td></tr></table></figure><p>（xxxxx 里的内容需要填写的部分）</p><h4 id="2021-05-13"><a href="#2021-05-13" class="headerlink" title="2021-05-13"></a>2021-05-13</h4><h5 id="问题-1"><a href="#问题-1" class="headerlink" title="问题 1"></a>问题 1</h5><p>学生端登录之后跳出页面已过期的问题，其主要原因：学生端系统中右侧的 iframe 嵌入的页面是教师端。导致教师端的 session 为空。从而重定向到登录界面。</p><p>解决办法：新建一个学生端的左侧导航菜单的配置文件，重新配置该菜单即可。</p><p>呃(⊙o⊙)……</p><p>后面实在是没空记录了😂😂😂</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="系统描述"><a href="#系统描述" class="headerlink" title="系统描述"></a>系统描述</h3><p>在线考试系统中，学生和教师需要进行登录方可进入考试系统。教师可以将自己的题目上传到系统，形成自己的题库，可以发布考题进行线上考核，同时也可以生成试卷进行线下考核，但是线下考核的分数需要人工来进行判定。考试结束之后，系统会自动计算每个学生的考试成绩，成绩计算完成之后，教师可以查询学生的考试情况，也可以将线上考试成绩进行导出。</p><p>学生在登录进入考试系统参加考试，在参加考试之前需要加入班级并选择一个班级，并且可以查看，待老师发布考题，在规定的时间开始才能开始考试，考试结束之后，学生可以查看考试成绩，也可以不看，等老师将成绩公布出来也行。如果学生加错了班级或者想退出班级，可以直接退出该班级。</p><p>管理员除了拥有教师的全部功能，还可以管理教师信息、学生信息和班级信息。</p><h3 id="表设计"><a href="#表设计" class="headerlink" title="表设计"></a>表设计</h3><p>该系统中的数据库表和表之间的关系，以及单个表中的字段和属性</p><p><img src="/journal/ssm-online-exam/Diagram_1.png" alt="数据库表之间的关系" loading="lazy"></p><p>后续就是和未来的组员沟通交流的时刻了。</p><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><h3 id="2021-06-08"><a href="#2021-06-08" class="headerlink" title="2021-06-08"></a>2021-06-08</h3><p>这是我第一次和舍友进行多人项目合作，毕竟作为一个难度系数为 1.0 的考试系统，在加上时间才只有短短的一个月的时间，一个人硬刚肯定是受不了的。这也是我体会到多人协作的好处（前提是没有啥都不做的，不过我们还好，至少每个人都有去做的）。</p><p>其实遇到可以一起做项目的同学挺不容易的，而且还要和组员进行一个沟通。还要教舍友如何简简单单的使用 git ，用来方便的将我们写的代码进行一个合并。他们都能够较好的去使用，这个项目我觉得帮了大忙的还是 git ，它可以告诉我们在项目协作的时候，有提示冲突的地方，这种也是很好去解决的。还有代码的合并不需要我们人工来合并，这样也不会非常浪费在合并代码上了。</p><p>第一次和舍友进行协作，我觉得还是很成功的。</p><p>这周五就要开始项目答辩啦，祝我好运吧。今天还有一个安卓的期末项目答辩，加油加油！</p><p>———————–✂—————————</p><p>安卓期末答辩终于结束了，稳的一匹 💁👌🎍，就差周五的 J2EE 的项目答辩了，可以的。</p><p>突然想起这周还有英语四级。哈哈哈哈哈哈哈哈，完了，啥也没什么准备呀😂😂😂，直接裸考，英语四级又很差。英语四级就随缘吧 😅。这是我第一次考，也是我最后一次考。</p><h3 id="2021-06-11"><a href="#2021-06-11" class="headerlink" title="2021-06-11"></a>2021-06-11</h3><p>今天的 j2ee 答辩有点小紧张，还以为要从头到尾把所有的功能全部展示一遍。不过老师是按照功能点来进行演示的，这让我顿时不那么慌了，加上老师在旁边提醒着我别紧张，总得来说还是挺好的。还是挺感谢的，对这个项目指出了一些不足之处以及一些需要改进的地方这样子，后期也会抽空来对该项目进行一些改进的😊😊。</p><p>最终的项目整体成绩还是令人满意的。也非常感谢老师的指导。</p><p>上个月确实挺辛苦的，一直都在集中火力干 Java。</p><p><img src="/journal/ssm-online-exam/QQ%E6%88%AA%E5%9B%BE20210611212912.png" alt="贡献度" loading="lazy"></p><p>不过……</p><p>明天的英语四级肯定过不了，只能等死啦 😂😂</p><p>———————–✂—————————</p><p>快快点这里 👉 <a href="https://gitee.com/bestguo2020/ssm_online_exam">点我点我，欢迎来玩耍呀</a></p><p>其实就是我的期末项目哒~</p>]]></content>
      
      
      <categories>
          
          <category> 小赫赫的项目日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> UML </tag>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 之 ViewPager2 组件的使用</title>
      <link href="/journal/view-pager/"/>
      <url>/journal/view-pager/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在本周实验中， 学习到了一个新组件，它就是 ViewPager2。今天正好有这个时间来研究一下这个组件的使用😊。最近这几天状态不大好，一定能够恢复过来。</p><p>不过在这几天很巧合，在某乎瞎逛时发现哈佛大学的积极心理学课程，这门课程在哈佛大学最受欢迎，最后风靡全球，我觉得自己很有必要去学学。我发现在我最近买了一本书，叫<a href="https://book.douban.com/subject/20480823/">《幸福的方法》</a>，作者是<a href="https://book.douban.com/search/%E6%B3%B0%E5%8B%92%E2%80%A2%E6%9C%AC-%E6%B2%99%E5%93%88%E5%B0%94">泰勒•本-沙哈尔</a>。然后在 bilibili 上也有相关的课程，可以把它当成是一种参考教材，把它用来当作复习。关于我个人的生活，可以到“小赫赫的日常”归档中查看。</p><p>我会努力的💪💪</p><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在了解的过程中以及上课老师所讲到的部分，他的用法和 RecyclerView 很相似，同时也有共性之处。比如它们俩使用的都是同一个 Adapter ，所以说，只要你会 RecyclerView 就会 ViewPager2 的大部分使用场景。</p><p>不同之处就在于，ViewPager 固定了一个线性的布局管理器，而 RecyclerView 可是能指定布局管理器的呢。</p><p>为什么要说是大部分的使用场景呢，却不是全部？在参考其它的博客时，发现 ViewPager2 可以和 Fragment 进行双重联动。关于这两个联动的问题，就放到下一篇日志中进行。</p><p>ViewPager2 的基本使用方法非常之简单，随我来。😊😊</p><h2 id="开始实验"><a href="#开始实验" class="headerlink" title="开始实验"></a>开始实验</h2><p>这里我新建了一个项目，项目创建完成之后，直接在 activity_main.xml 中将 ViewPager2 组件给拖进来，并设置好 id。相关代码如下。</p><blockquote><p>由于只有一个组件的关系，使用约束布局也可，这个例子中我使用线性布局。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.viewpager2.widget.ViewPager2</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/view_pager2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>随后我们随便建立一个 item 布局文件，也比较简单，布局文件的 item.xml 的相关代码如下。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/textView&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;TextView&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>随后创建 Adapter，没错就是用 RecyclerView 中的 Adapter。Adapter 具体的用法可查看“<a href="/2021/02/19/recycleview-component/">Android 入门篇之 RecycleView 组件的使用</a>”这篇日志。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.viewpager2study.adapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.annotation.NonNull;</span><br><span class="line"><span class="keyword">import</span> androidx.recyclerview.widget.RecyclerView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.viewpager2study.Item;</span><br><span class="line"><span class="keyword">import</span> com.example.viewpager2study.R;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ViewPager2Adapter</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.Adapter&lt;ViewPager2Adapter.ItemViewHolder&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Item&gt; data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ViewPager2Adapter</span><span class="params">(List&lt;Item&gt; data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ItemViewHolder <span class="title function_">onCreateViewHolder</span><span class="params">(<span class="meta">@NonNull</span> ViewGroup parent, <span class="type">int</span> viewType)</span> &#123;</span><br><span class="line">        <span class="comment">// 加载 item.xml 布局文件</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ItemViewHolder</span>(LayoutInflater.from(parent.getContext())</span><br><span class="line">                .inflate(R.layout.item, parent, <span class="literal">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onBindViewHolder</span><span class="params">(<span class="meta">@NonNull</span> ItemViewHolder holder, <span class="type">int</span> position)</span> &#123;</span><br><span class="line">        <span class="comment">// 设置相关的属性</span></span><br><span class="line">        holder.textView.setBackgroundColor(data.get(position).getColor());</span><br><span class="line">        holder.textView.setText(data.get(position).getText());</span><br><span class="line">        holder.textView.setTextColor(data.get(position).getTextColor());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getItemCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ItemViewHolder</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.ViewHolder &#123;</span><br><span class="line"></span><br><span class="line">        TextView textView;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ItemViewHolder</span><span class="params">(<span class="meta">@NonNull</span> View itemView)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(itemView);</span><br><span class="line">            textView = itemView.findViewById(R.id.textView);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后就是在 MainActivity.java 中初始化好数据，获取组件，设置 Adapter 和排列方式即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.viewpager2study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> androidx.viewpager2.widget.ViewPager2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.viewpager2study.adapter.ViewPager2Adapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ViewPager2 viewPager2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化值</span></span><br><span class="line">        List&lt;Item&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Item</span>(Color.RED, <span class="string">&quot;1&quot;</span>, Color.WHITE));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Item</span>(Color.parseColor(<span class="string">&quot;#FFA500&quot;</span>), <span class="string">&quot;2&quot;</span>, Color.WHITE));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Item</span>(Color.YELLOW, <span class="string">&quot;3&quot;</span>, Color.BLACK));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Item</span>(Color.GREEN, <span class="string">&quot;4&quot;</span>, Color.WHITE));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Item</span>(Color.BLUE, <span class="string">&quot;5&quot;</span>, Color.WHITE));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Item</span>(Color.parseColor(<span class="string">&quot;#4B0082&quot;</span>), <span class="string">&quot;6&quot;</span>, Color.WHITE));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Item</span>(Color.parseColor(<span class="string">&quot;#800080&quot;</span>), <span class="string">&quot;7&quot;</span>, Color.WHITE));</span><br><span class="line"></span><br><span class="line">        viewPager2 = findViewById(R.id.view_pager2);</span><br><span class="line">        <span class="comment">// 设置排列方式</span></span><br><span class="line">        viewPager2.setOrientation(ViewPager2.ORIENTATION_HORIZONTAL);</span><br><span class="line">        viewPager2.setAdapter(<span class="keyword">new</span> <span class="title class_">ViewPager2Adapter</span>(list));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，setOrientation 方法是设置水平滑动还是垂直滑动。它有两个值，分别为 <code>ORIENTATION_HORIZONTAL</code> 和 <code>ORIENTATION_VERTICAL</code>。setAdapter 方法就和 RecyclerView 中的 setAdapter 方法简直就是一模一样的！！</p><p>水平滑动效果如下：</p><p><img src="/images/Android/view-pager/kjlwr-vph6j.gif" loading="lazy"></p><p>将 <code>ORIENTATION_HORIZONTAL</code> 设置成 <code>ORIENTATION_VERTICAL</code>，即设置成垂直的方向。它的效果如下</p><p><img src="/images/Android/view-pager/5sm3w-auv9b.gif" loading="lazy"></p><h2 id="和-RecyclerView-的区别"><a href="#和-RecyclerView-的区别" class="headerlink" title="和 RecyclerView 的区别"></a>和 RecyclerView 的区别</h2><p>基本的用法大部分和 RecyclerView 是一样的，除了在开始的时候提到他们的区别，在这里，还有一个区别就是运行结果。运行出来之后所展示的效果确实完全不一样的，下面的动画就比较好解释了。</p><p>下面的动画，上半部分是 ViewPager2，下半部分是 RecyclerView。</p><p><img src="/images/Android/view-pager/9ydly-8fmiy.gif" loading="lazy"></p><p>通过以上的动画可以很明显看出效果来，当我触摸上半部分时，松开鼠标，发现他会自动滑到下去了，而 RecyclerView 这样松开鼠标，却没有任何反应。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>在学习 ViewPager 参考了以下资料：</p><ul><li><a href="https://blog.csdn.net/willway_wang/article/details/88725392">官方 Viewpager 升级版 - ViewPager2 实战</a></li></ul><p>本次的实验代码在 <a href="https://github.com/BestGuo2020/AndroidStudy">AndroidStudy</a> 的 github 仓库中。</p>]]></content>
      
      
      <categories>
          
          <category> Android 开发的学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 入门篇之 ConstraintLayout 的使用</title>
      <link href="/journal/ConstraintLayout-component/"/>
      <url>/journal/ConstraintLayout-component/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>ConstraintLayout，即约束布局。</p><p>ConstraintLayout 最早发布的那一年是在 2016 年，现在距今也有 5 年了吧。我们老师一开始教的布局就是 ConstraintLayout 布局，这个布局是可以用鼠标进行拖拽控件来对界面进行布局。但是，它可不是像 UI 原型设计那样随便就可以拖拽的，是需要学习的，这也是我刚刚学习新布局的一个巨坑。</p><p>在没有 ConstraintLayout 布局出现之前，用的很多的就是 RelativeLayout 了，也就是相对布局。我之前写的那些日志都是基于此来进行布局，是需要进行大量的打代码来对组件的位置进行一个定位，但是不难。而 ConstraintLayout 虽然可以拖拽，但它可是这里面最复杂的布局了。</p><p>刚开始学真的难，但是能够真正的掌握正确的拖拽方式就真的很香。<del>（我小赫赫就是用饿死，死外面从这跳下去也不会学约束布局，啊真香哎呀！）</del></p><span id="more"></span><h2 id="为什么要使用约束布局"><a href="#为什么要使用约束布局" class="headerlink" title="为什么要使用约束布局"></a>为什么要使用约束布局</h2><p>约束布局其实解决的是嵌套过多的问题，嵌套过多，加载时间就会越久。Android 布局的嵌套为什么会这么久，可以把它想象成 for 循环嵌套。毕竟时间复杂度是 O(n^m) 嘛，有嵌套 m 层，时间复杂度就是多少咯。</p><h3 id="优点和缺点"><a href="#优点和缺点" class="headerlink" title="优点和缺点"></a>优点和缺点</h3><p>所有事物均有优缺点，ConstraintLayout 布局也不例外，以下是我了解到的优点。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol><li>减少了很多布局嵌套。</li><li>提升了 app 界面的加载速度。</li><li>自适应各种屏幕，少花费时间在界面适配上。</li></ol><p>以上就是我了解到的优点，接下来就是缺点了。</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol><li>看似简单的拖拽，其实上手难度较大。</li><li>代码的可读性差。</li></ol><h2 id="开始前提"><a href="#开始前提" class="headerlink" title="开始前提"></a>开始前提</h2><p>开学的第一周就把 AndroidStudio 给升级到了最新的 4.1.2 版本，不再使用旧的版本。点击下载<a href="https://developer.android.google.cn/studio/">新版本</a>，不过使用 4.1.2 之后的版本也行。毕竟新技术更新的实在是太快啦😂😂😂。</p><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><h3 id="约束布局中的线性布局和相对布局"><a href="#约束布局中的线性布局和相对布局" class="headerlink" title="约束布局中的线性布局和相对布局"></a>约束布局中的线性布局和相对布局</h3><p>其实，ConstraintLayout 是可以当成是线性布局或者相对布局中，它可以替代相对布局，但是线性布局的替代性就没有那么好了，下面的例子就是用来展示布局的。</p><h4 id="相对布局"><a href="#相对布局" class="headerlink" title="相对布局"></a>相对布局</h4><h5 id="一个按钮"><a href="#一个按钮" class="headerlink" title="一个按钮"></a>一个按钮</h5><p>首先拖入一个按钮，由于此时是没有约束的。所以，这个按钮在约束布局中会报错。需要添加约束。</p><p><img src="/images/Android/constraintlayout/QQ%E6%88%AA%E5%9B%BE20210319221211.jpg" loading="lazy"></p><p>添加约束的方式也非常之简单，如下图所示。拉出来的箭头，就是给按钮设置约束的。</p><p><img src="/images/Android/constraintlayout/QQ%E6%88%AA%E5%9B%BE20210319221659.jpg" loading="lazy"></p><p>由于需要确定这个按钮所在的位置，所以只要定义两个约束。比如我们设置按钮左边的约束和按钮上面的约束，设置成功之后，按钮组件就在左上角的位置。然后左边也不会报错了。</p><p><img src="/images/Android/constraintlayout/QQ%E6%88%AA%E5%9B%BE20210319221923.jpg" loading="lazy"></p><p>然后这个时候我们可以随便拖动按钮的位置了。</p><p><img src="/images/Android/constraintlayout/qnxk0-2ndi0.gif" loading="lazy"></p><p>如果需要进行精确的定位，那麽可以通过右边的属性栏和下面的 Layout 定义位置。其实并不能通过这个来将组件的位置来定死，因为这个其实是 <code>layout_marginTop</code> 和 <code>layout_marginStart</code> ，也就是外边距。</p><p>所以用它来进行绝对的定位显然不太现实。而且，使用这种定位方式，它不能自定适应屏幕的。</p><p><img src="/images/Android/constraintlayout/QQ%E6%88%AA%E5%9B%BE20210319222553.jpg" loading="lazy"></p><p>如果我们要然按钮进行水平居中，那怎么办呢？通过上面的方式又不行。那就增加约束，再加一条约束用来约束按钮右边即可，这样就水平居中了。</p><p>不过又发现了一个新现象，就是 <code>marginStart</code> 属性不见了，并且箭头变成了“弹簧”的形状。害，突然想起了高中物理。我又想起了<a href="https://baike.baidu.com/item/%E8%83%A1%E5%85%8B%E5%AE%9A%E5%BE%8B/2307271?fr=aladdin">胡克定律</a>，<code>F=kx</code>（k 为弹簧的劲度系数，x 为弹簧被拉长的距离）</p><p><img src="/images/Android/constraintlayout/QQ%E6%88%AA%E5%9B%BE20210319223952.jpg" loading="lazy"></p><p>通过上图可知，是因为它们所谓的“劲度系数k”相同才使得这个按钮在水平是居中的。然后 Layout 下面变成了滑块。通过滑块，就相当于是调整两个弹簧的“劲度系数”。也就有如下的结果了。</p><p><img src="/images/Android/constraintlayout/edkna-3yhj8.gif" loading="lazy"></p><p>代码如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button13&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;56dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Button&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同理，如果让他垂直居中的话，给按钮底部一个约束即可，同时竖直按钮部分也会给出一个滑块来调整弹簧的“劲度系数”。</p><h5 id="多个按钮"><a href="#多个按钮" class="headerlink" title="多个按钮"></a>多个按钮</h5><p>以下，我们多放几个按钮，来体验一下真正的相对布局。在实验之前，我把原来的按钮给删除了。重新放置了一些新按钮。然后，我们来玩一玩“虚幻一枪”，来看看其中的效果。</p><p><img src="/images/Android/constraintlayout/r1zqm-p36cd.gif" loading="lazy"></p><p>通过这个效果动画，我们发现，只要我们对这个按钮进行约束的时候。他会给你一些提示，来提示连接按钮的哪一边。约束按钮的左边，那么它只能连接其它按钮（或者其它的组件）的左边和右边，或者约束布局容器的左右边。</p><p>同理，约束的是上边和下边，那么也只能其它按钮（或者其它的组件）的上边和下边，或者约束布局的上下边。</p><p>如果我们要让三个按钮进行上对齐，那么我们这样连接。通过移动的方式发现，当移动到和中间按钮的顶部对齐时发现按钮不能够在向上移动。第三个可以移动的原因是因为没有设置约束。所以它是可以自由移动的，而且会带动其余两个按钮。</p><p><img src="/images/Android/constraintlayout/1jx2s-mw89d.gif" loading="lazy"></p><p>代码如下，请注意约束属性 <code>layout_constraintTop_toTopOf</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;96dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;82dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Button&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;@+id/button2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:layout_editor_absoluteX</span>=<span class="string">&quot;33dp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Button&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;@+id/button3&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:layout_editor_absoluteX</span>=<span class="string">&quot;159dp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button3&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;98dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;142dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Button&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:layout_editor_absoluteX</span>=<span class="string">&quot;288dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:layout_editor_absoluteY</span>=<span class="string">&quot;294dp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果要让三个按钮进行水平对齐，可以这样去做。当这样连接时三个按钮默认都处于一条水平线上，连接完之后，右边多了一个竖直的滑块，就说明上下两个弹簧的“劲度系数”是可以调的，可以使它们不在同一条水平线上。同理，也可以使它们在垂直线上。</p><p>相关代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/button&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;96dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;82dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">&quot;Button&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;@+id/button2&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;@+id/button2&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintVertical_bias</span>=<span class="string">&quot;0.62&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:layout_editor_absoluteX</span>=<span class="string">&quot;33dp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/button2&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">&quot;Button&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;@+id/button3&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;@+id/button3&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintVertical_bias</span>=<span class="string">&quot;0.53&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:layout_editor_absoluteX</span>=<span class="string">&quot;159dp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/button3&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;98dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;142dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">&quot;Button&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:layout_editor_absoluteX</span>=<span class="string">&quot;288dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:layout_editor_absoluteY</span>=<span class="string">&quot;294dp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/Android/constraintlayout/fz0yg-hz7kl.gif" loading="lazy"></p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>相对布局的定位目标仅仅是其它组件的，而约束布局可以精确到其他组件的边。而且比起相对布局确实强化了不少。在以上的操作中，总共利用到了 12 种属性。</p><ul><li>layout_constraintLeft_toLeftOf：这个组件的左边连接到另一个组件的左边</li><li>layout_constraintLeft_toRightOf：这个组件的左边连接到另一个组件的右边</li><li>layout_constraintRight_toLeftOf：这个组件的右边连接到另一个组件的左边</li><li>layout_constraintRight_toRightOf：这个组件的右边连接到另一个组件的右边</li><li>layout_constraintTop_toTopOf：这个组件的上边连接到另一个组件的上边</li><li>layout_constraintTop_toBottomOf：这个组件的上边连接到另一个组件的下边</li><li>layout_constraintBottom_toTopOf：这个组件的下边连接到另一个组件的上边</li><li>layout_constraintBottom_toBottomOf：这个组件的下边连接到另一个组件的下边</li><li>layout_constraintStart_toEndOf：同 layout_constraintLeft_toRightOf</li><li>layout_constraintStart_toStartOf：同 layout_constraintLeft_toLeftOf</li><li>layout_constraintEnd_toStartOf：同 layout_constraintRight_toLeftOf</li><li>layout_constraintEnd_toEndOf：同 layout_constraintRight_toRightOf</li></ul><p>还有一种是基于文本基线的方式</p><ul><li>layout_constraintBaseline_toBaselineOf</li></ul><p>设置弹簧“劲度系数”的属性</p><ul><li>layout_constraintVertical_bias</li></ul><h4 id="线性布局"><a href="#线性布局" class="headerlink" title="线性布局"></a>线性布局</h4><p>在约束布局当中，如果要实现类似于线性布局的方式。可以使用 Chain 来将这些组件来连接起来。连接的动画如下。当连接起来之后，发现这三个组件的连接方式通过一条铁链的方式连接起来了，而不是之前的弹簧。</p><p><img src="/images/Android/constraintlayout/vog2n-obu6v.gif" loading="lazy"></p><p>总共有三种方式：spread，spread_inside 和 packed，分别演示</p><p><img src="/images/Android/constraintlayout/mp6vn-6a7nq.gif" loading="lazy"></p><p>三种方式的代码，在全选按钮选择 Chain 的时候，代码中的操作其实就是给第一个按钮设置了 <code>app:layout_constraintHorizontal_chainStyle</code> 属性，这样就会有链条这种效果了。不写默认为 spread。</p><p>使用 spread 的代码。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Button&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toStartOf</span>=<span class="string">&quot;@+id/button2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">&quot;0.5&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintHorizontal_chainStyle</span>=<span class="string">&quot;spread&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Button&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toStartOf</span>=<span class="string">&quot;@+id/button3&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">&quot;0.5&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toEndOf</span>=<span class="string">&quot;@+id/button&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button3&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Button&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">&quot;0.5&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toEndOf</span>=<span class="string">&quot;@+id/button2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 spread_inside ，也就是最左端和最右端紧靠约束布局边缘。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Button&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toStartOf</span>=<span class="string">&quot;@+id/button2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">&quot;0.5&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintHorizontal_chainStyle</span>=<span class="string">&quot;spread_inside&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 其它两个按钮省略 --&gt;</span></span><br><span class="line">    ......</span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 packed ，将三个元素紧靠在一起。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Button&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toStartOf</span>=<span class="string">&quot;@+id/button2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">&quot;0.5&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintHorizontal_chainStyle</span>=<span class="string">&quot;packed&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 其它两个按钮省略 --&gt;</span></span><br><span class="line">    ......</span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>除此之外，还可以单独的设置垂直的链接方式，点击 Create vertical chain 即可。垂直方式也有以上三种这种方式，分别为：spread，spread_inside 和 packed。</p><p><img src="/images/Android/constraintlayout/QQ%E6%88%AA%E5%9B%BE20210320001239.jpg" loading="lazy"></p><p>有的时候，使用链条的这种方式，用 Helpers 中的 Flow 这种流式虚拟布局来进行替代。</p><h3 id="各种-Helper"><a href="#各种-Helper" class="headerlink" title="各种 Helper"></a>各种 Helper</h3><p>helper 是用在约束布局用来进行辅助作用的，通过这些辅助的东西，就可以做出一些复杂的布局了。反正我是觉得，单纯的只用约束布局的那些属性，要是做出复杂的布局是很难的。这些 Helper 也是利用拖拽的方式就可以轻松完成了</p><p>Helper 的种类有很多，比如 Group（组）、Barrier（活动的隔板）、Flow（流式）、Guideline（指导线）、Layer（层布局）、ImageFilterButton、ImageFilterVIew、Mock（熟悉的原型设计）</p><h4 id="Group"><a href="#Group" class="headerlink" title="Group"></a>Group</h4><p>由于约束布局中是没有那种层级的关系，在开发的时候会比较混乱。将几个相关联组件放入到这个逻辑的组中，就感觉界面上有那种层级的关系，便于管理。</p><blockquote><p>比如后面用到的 Flow 和 Layer ，这些感觉在看似在代码中能体现来，其实并没有嵌套。它仅仅是在界面上可以体现出来。</p></blockquote><p>使用方法也非常简单，只要将界面的中的组件拖动到 Group 中即可。但是，拖进去之后还需要对这些组件来进行约束。</p><p>而且，添加进去之后，Group 里面并没有将内容填充进去，这也和下面的 Flow 有区别。</p><p><img src="/images/Android/constraintlayout/xxx.gif" loading="lazy"></p><p>目前在学习使用 Group 的时候，学习到了将组中的空间进行隐藏和显示。</p><p>这是 visibility 属性设置成 enable 的时候展示的。</p><p><img src="/images/Android/constraintlayout/QQ%E6%88%AA%E5%9B%BE20210320135857.jpg" loading="lazy"></p><p>代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button4&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Button4&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:layout_editor_absoluteX</span>=<span class="string">&quot;220dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:layout_editor_absoluteY</span>=<span class="string">&quot;433dp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button5&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Button5&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:layout_editor_absoluteX</span>=<span class="string">&quot;81dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:layout_editor_absoluteY</span>=<span class="string">&quot;433dp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">CalendarView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/calendarView&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.Group</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:constraint_referenced_ids</span>=<span class="string">&quot;button4,button5,calendarView&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:layout_editor_absoluteX</span>=<span class="string">&quot;148dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:layout_editor_absoluteY</span>=<span class="string">&quot;122dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:visibility</span>=<span class="string">&quot;visible&quot;</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同理，对应的 invisible 和 gone 对应的效果就是不显示和隐藏。</p><h4 id="Guideline"><a href="#Guideline" class="headerlink" title="Guideline"></a>Guideline</h4><p>Guideline 是向导线，其实就是辅助线的意思啦。通过辅助现将屏幕划成几份，然后再使用约束布局，约束布局的指向就可以指到辅助线上了。</p><p>辅助线在界面设计时可见，在运行时是看不见的。</p><p>红色圈圈部分可以修改，通过鼠标的点击，可以调成百分比。总共有三种方式，一个是距离屏幕顶部的距离，一个是距离屏幕底部的距离，最后一个是屏幕距离顶部的百分比。最后一个用百分比就很常用，通过百分比的设置可以自由适配屏幕了。</p><p>这是距离顶部的</p><p><img src="/images/Android/constraintlayout/QQ%E6%88%AA%E5%9B%BE20210320141256.jpg" loading="lazy"></p><p>这是距离底部的</p><p><img src="/images/Android/constraintlayout/QQ%E6%88%AA%E5%9B%BE20210320141310.jpg" loading="lazy"></p><p>这是距离顶部的百分比</p><p><img src="/images/Android/constraintlayout/QQ%E6%88%AA%E5%9B%BE20210320140946.jpg" loading="lazy"></p><p>同理，水平方式也是如此。</p><p>将组件指向 Guideline，看到了弹簧指向了辅助线。</p><p><img src="/images/Android/constraintlayout/QQ%E6%88%AA%E5%9B%BE20210320142036.jpg" loading="lazy"></p><p>Guideline 相关代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button4&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;48dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginEnd</span>=<span class="string">&quot;32dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Button4&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toStartOf</span>=<span class="string">&quot;@+id/guideline3&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">&quot;@+id/calendarView&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button5&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginStart</span>=<span class="string">&quot;28dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;48dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Button5&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;@+id/guideline2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">&quot;@+id/calendarView&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">CalendarView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/calendarView&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;266dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;243dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;24dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toStartOf</span>=<span class="string">&quot;@+id/guideline3&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">&quot;0.464&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;@+id/guideline2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;@+id/guideline&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.Group</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:visibility</span>=<span class="string">&quot;visible&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:constraint_referenced_ids</span>=<span class="string">&quot;button4,button5,calendarView&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:layout_editor_absoluteX</span>=<span class="string">&quot;148dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:layout_editor_absoluteY</span>=<span class="string">&quot;122dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:visibility</span>=<span class="string">&quot;visible&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.Guideline</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/guideline&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintGuide_percent</span>=<span class="string">&quot;0.047879618&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.Guideline</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/guideline2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintGuide_end</span>=<span class="string">&quot;355dp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.Guideline</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/guideline3&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintGuide_begin</span>=<span class="string">&quot;355dp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Barrier"><a href="#Barrier" class="headerlink" title="Barrier"></a>Barrier</h4><p>和 Guideline 不一样，它是一种隔板，将左右或者上下两边的控件进行隔开，使用方法也非常之简单。Barrier 用于解决在约束布局中由于宽度过宽导致组件被覆盖的情况。不过我在将按钮约束至隔板上面好像不行，需要手动来打约束的代码才可以。</p><p>这是未使用隔板，右下方的按钮被覆盖了。</p><p><img src="/images/Android/constraintlayout/QQ%E6%88%AA%E5%9B%BE20210320142036.jpg" loading="lazy"></p><p>这是已使用隔板的，下方的按钮被隔板约束着没有被覆盖掉，而是随着隔板向下移动了。</p><p><img src="/images/Android/constraintlayout/QQ%E6%88%AA%E5%9B%BE20210320142036.jpg" loading="lazy"></p><p>相关的代码如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.Barrier</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/barrier&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:barrierAllowsGoneWidgets</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:barrierDirection</span>=<span class="string">&quot;bottom&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:constraint_referenced_ids</span>=<span class="string">&quot;button6,button8&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:layout_editor_absoluteX</span>=<span class="string">&quot;67dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:layout_editor_absoluteY</span>=<span class="string">&quot;160dp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button6&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Button&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:layout_editor_absoluteX</span>=<span class="string">&quot;137dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:layout_editor_absoluteY</span>=<span class="string">&quot;518dp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button8&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;82dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;172dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Button&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:layout_editor_absoluteX</span>=<span class="string">&quot;272dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:layout_editor_absoluteY</span>=<span class="string">&quot;470dp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button9&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;28dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Button&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">&quot;@id/barrier&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:layout_editor_absoluteX</span>=<span class="string">&quot;148dp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Flow"><a href="#Flow" class="headerlink" title="Flow"></a>Flow</h4><p>Flow 虚拟布局和将三个组件通过铁链连起来的部分效果是一样的，属性值也是一样的，属性名就不一样，Flow 布局中有一个特有的属性就是 <code>flow_horizontalStyle</code> 。</p><p>当属性值为 spread_inside 的时候</p><p><img src="/images/Android/constraintlayout/QQ%E6%88%AA%E5%9B%BE20210320151348.jpg" loading="lazy"></p><p>当属性为 packed 的时候</p><p><img src="/images/Android/constraintlayout/image-20210320151553323.png" loading="lazy"></p><p>当属性为 spread 的时候</p><p><img src="/images/Android/constraintlayout/QQ%E6%88%AA%E5%9B%BE20210320151735.jpg" loading="lazy"></p><p>如果水平内容满了，需要接到下一行，此时可以利用这个属性 <code>flow_wrap</code>，这个属性共有三种值：align、chain、none 三种值。none 值是不换行的。</p><p>当属性值为 chain 的时候</p><p><img src="/images/Android/constraintlayout/QQ%E6%88%AA%E5%9B%BE20210320152746.jpg" loading="lazy"></p><p>当属性值为 none 的时候，也就是默认的</p><p><img src="/images/Android/constraintlayout/QQ%E6%88%AA%E5%9B%BE20210320152821.jpg" loading="lazy"></p><p>当属性值为 aligned 的时候</p><p><img src="/images/Android/constraintlayout/QQ%E6%88%AA%E5%9B%BE20210320152913.jpg" loading="lazy"></p><p>未完待续，后面学习到再补充补充……</p><p><img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=2651107050,918836939&fm=26&gp=0.jpg" loading="lazy"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>除了在课上学习约束布局及其相关的组件之后，还参考了以下资料</p><ul><li><a href="https://juejin.cn/post/6854573221312725000#heading-0">Constraintlayout 2.0：你们要的更新来了</a></li><li><a href="https://www.jianshu.com/p/17ec9bd6ca8a">约束布局ConstraintLayout看这一篇就够了</a></li><li><a href="https://blog.csdn.net/guolin_blog/article/details/53122387">Android新特性介绍，ConstraintLayout完全解析</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android 开发的学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 入门篇之 Fragment</title>
      <link href="/journal/fragment-component/"/>
      <url>/journal/fragment-component/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>注意：建议在白天模式下看！</p></blockquote><p>在学习完 Fragment 之后，其实这个组件也是非常之常见的。QQ、微信、B站等等 app 绝大多数都使用了到了 Fragment，然后结合底部的导航按钮来跳转到不同的 Fragment 的。一看到效果就能很好的想出它的运用场景。</p><p>同时也知道 Fragment 的重要性。难度还是有点，不过比起将要学的 <code>ConstraintLayout</code> 还是要容易一些（我个人感觉，确信）</p><p>不过，今天一口气看了 5 集的进击的巨人。进击的巨人第二季实在是太燃了。毕竟是第一次看嘛，看完才会有动力学习嘛。</p><span id="more"></span><h2 id="前情概要"><a href="#前情概要" class="headerlink" title="前情概要"></a>前情概要</h2><p>Fragment，本意叫碎片、片段之意。它的出现是为了适应平板电脑等大屏设备上，不过也确实是这样，但是不知道为什么，好像兼容 Android 平板的应用其实很少耶，反而这些开发者更喜欢 iPad 的平板。就感觉 Android 平板的生态似乎被抛弃了一样。</p><h3 id="Fragment-生命周期"><a href="#Fragment-生命周期" class="headerlink" title="Fragment 生命周期"></a>Fragment 生命周期</h3><p>Fragment 也有自己的生命周期，他的生命周期如下所示。不同的是，它不能单独存在，必须要“寄生”在 Activity 之中。</p><p><img src="/journal/fragment-component/1604195-20200303165929247-1414515511.png" alt="Fragment的生命周期" loading="lazy"></p><h3 id="Fragment-的生命周期的影响"><a href="#Fragment-的生命周期的影响" class="headerlink" title="Fragment 的生命周期的影响"></a>Fragment 的生命周期的影响</h3><p>Fragment 的生命周期会受到 Activity 生命周期的影响，如下图所示。Activity 创建了，我 Fragment 也开始做创建相关的动作。这样咋一眼看还真的像是一种“寄生”的关系耶。</p><p><img src="/journal/fragment-component/1688279-e513845a80659860.png" loading="lazy"></p><p>不过这样看起来似乎看不出什么东西来，可以重写这些方法来看看 Fragment 是如何执行的。这个还是到后面再来看看吧。</p><p>先来学习学习简单的应用，从 AFragment 到 BFragment。来看看是怎样的效果吧</p><h2 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h2><p>首先，建立一个 ContainerActivity 用于放置 Fragment。</p><p>然后，建立 AFragment 和 BFragment 的类。AFragment 和 BFragment 都需要继承自 Fragment 类。搞了两张洛天依的画像。哈哈哈</p><h3 id="存放-Fragment-的-Acitvity"><a href="#存放-Fragment-的-Acitvity" class="headerlink" title="存放 Fragment 的 Acitvity"></a>存放 Fragment 的 Acitvity</h3><p>设置好布局文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 用于放置子布局的 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/frag_layout&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/change_fragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;改变 Fragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textAllCaps</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentTop</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="AFragment"><a href="#AFragment" class="headerlink" title="AFragment"></a>AFragment</h3><p>AFragment 的 java 代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AFragment</span> <span class="keyword">extends</span> <span class="title class_">Fragment</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView fragA;</span><br><span class="line">    <span class="keyword">private</span> Button changeText, changeFragment, changeOuterText;</span><br><span class="line">    <span class="keyword">private</span> BFragment bFragment;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">onCreateView</span><span class="params">(LayoutInflater inflater, <span class="meta">@Nullable</span> ViewGroup container, Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        Log.d(<span class="string">&quot;onCreateView&quot;</span>, <span class="string">&quot;-------isRunning------&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.fragment_a, container, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AFragment 的 fragment_a.xml 布局文件如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;@drawable/lty_a&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/frag_a&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;我是 FragmentA&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;20sp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;@color/colorBlack&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="BFragment"><a href="#BFragment" class="headerlink" title="BFragment"></a>BFragment</h3><p>BFragment 的 java 代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BFragment</span> <span class="keyword">extends</span> <span class="title class_">Fragment</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">onCreateView</span><span class="params">(LayoutInflater inflater, <span class="meta">@Nullable</span> ViewGroup container, Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="comment">// 将自定义的布局添加到 view 中</span></span><br><span class="line">        <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> inflater.inflate(R.layout.fragment_b, container, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BFragment 的 fragment_b.xml 布局文件如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;@drawable/lty_b&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;我是 FragmentB&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;20sp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;@color/colorBlack&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建完 BFragment 就可以在 ContainerActivity 中来放置 Fragment 了，ContainerActivity.java 代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContainerActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Fragment aFragment, bFragment;</span><br><span class="line">    <span class="keyword">private</span> Button button;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_container);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 得到按钮，用于点击跳转到Bfragment</span></span><br><span class="line">        button = findViewById(R.id.change_fragment);</span><br><span class="line"></span><br><span class="line">        button.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                getFragmentManager().beginTransaction().replace(R.id.frag_layout, bFragment).commitAllowingStateLoss();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载 AFragment</span></span><br><span class="line">        aFragment = <span class="keyword">new</span> <span class="title class_">AFragment</span>();</span><br><span class="line">        <span class="comment">// 加载 BFragment</span></span><br><span class="line">        bFragment = <span class="keyword">new</span> <span class="title class_">BFragment</span>();</span><br><span class="line">        <span class="comment">// 添加 Fragment，add 方法需要添加两个参数，一个需要</span></span><br><span class="line">        getFragmentManager().beginTransaction().add(R.id.frag_layout, aFragment).commitAllowingStateLoss();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h3><p>运行的效果如下</p><p><img src="/images/Android/fragment/0janp-atem6.gif" loading="lazy"></p><p>效果上面，从 AFragment 跳到 BFragment。</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>在此之前，用一张图来展示了 Fragment 的生命周期。接下来，通过输出来直观的看到 Fragment 的生命周期。了解生命周期的目的就在于，能够何时在某个过程中来执行哪些关键性的代码。这个其实是非常重要的。</p><p>我们就利用简单例子中的 AFragment 类中的代码，测试它的生命周期，重写了它的全部关于生命周期相关的代码。</p><p>当我们进入的时候，执行了以下方法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">D/fragment: -------onAttach running-------</span><br><span class="line">D/fragment: -------onCreate running-------</span><br><span class="line">D/fragment: -------onCreateView isRunning------</span><br><span class="line">D/fragment: -------onViewCreated isRunning------</span><br><span class="line">D/fragment: -------onActivityCreated running-------</span><br><span class="line">D/fragment: -------onStart isRunning------</span><br><span class="line">D/fragment: -------onResume isRunning------</span><br></pre></td></tr></table></figure><p>当熄屏、按下 Home 键、切换到其它程序时，执行了以下方法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D/fragment: -------onPause isRunning------</span><br><span class="line">D/fragment: -------onStop isRunning------</span><br></pre></td></tr></table></figure><p>当亮屏的时候、回到原来的程序时，执行了以下方法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D/fragment: -------onStart isRunning------</span><br><span class="line">D/fragment: -------onResume isRunning------</span><br></pre></td></tr></table></figure><p>当到 BFragment 的时候，执行了以下方法。由于点击了按钮，调用了 replace 方法，导致 AFragment 的 View 已经破坏了。如果返回到 AFragment，它将不是原来的 AFragment，而是新的 Fragment 吧。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">D/fragment: -------onPause isRunning------</span><br><span class="line">D/fragment: -------onStop isRunning------</span><br><span class="line">D/fragment: -------onDestroyView isRunning------</span><br></pre></td></tr></table></figure><p>当返回到 AFragment 的时候，执行了以下方法。此时执行了 onCreateView 方法，也就是说 AFragment 的 View 是重新创建的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">D/fragment: -------onCreateView isRunning------</span><br><span class="line">D/fragment: -------onActivityCreated running--------</span><br><span class="line">D/fragment: -------onViewCreated isRunning------</span><br><span class="line">D/fragment: -------onStart isRunning------</span><br><span class="line">D/fragment: -------onResume isRunning------</span><br></pre></td></tr></table></figure><p>当退出了这个 Activity 的时候，执行了以下方法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">D/fragment: -------onPause isRunning------</span><br><span class="line">D/fragment: -------onStop isRunning------</span><br><span class="line">D/fragment: -------onDestroyView isRunning------</span><br><span class="line">D/fragment: -------onDestroy isRunning------</span><br><span class="line">D/fragment: -------onDetach isRunning------</span><br></pre></td></tr></table></figure><p>当有来电时，执行了以下方法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D/fragment: -------onPause isRunning------</span><br></pre></td></tr></table></figure><p>当挂机时，执行了以下方法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D/fragment: -------onResume isRunning------</span><br></pre></td></tr></table></figure><h2 id="回退问题"><a href="#回退问题" class="headerlink" title="回退问题"></a>回退问题</h2><h3 id="回退到上一个"><a href="#回退到上一个" class="headerlink" title="回退到上一个"></a>回退到上一个</h3><p>Fragment 也有自己的栈，在简单示例的代码中，有一个 add 方法。这个方法就是把 Fragment 添加到所属的栈中，不过，我们在按手机上的返回按钮时。不跳回到 FragmentA，而是直接退出了这个 Activity 中。</p><p><img src="/images/Android/fragment/7dsfo-u8g68.gif" loading="lazy"></p><p>这怎么办呢？？</p><p>其实也不难，只需要调用 <code>addToBackState(null)</code> 这个方法，就可以出栈，回退到上一个 Fragment 了。完整的写法如下。不过还是不懂这个方法中的参数到底是什么意思。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getFragmentManager().beginTransaction().replace(R.id.frag_layout, bFragment).addToBackState(<span class="literal">null</span>).commitAllowingStateLoss();</span><br></pre></td></tr></table></figure><p>更改之后的效果如下</p><p><img src="/images/Android/fragment/i8zig-blfoa.gif" loading="lazy"></p><h4 id="跳转不销毁"><a href="#跳转不销毁" class="headerlink" title="跳转不销毁"></a>跳转不销毁</h4><p>在上面的简单示例代码中和生命周期的演示中，从 AFragment 调用到 BFragment 时发现，原来的 AFragment 已经被销毁了。那是因为我们调用的时候是调用 replace 方法，replace 的动作可以看成是先删除再添加，所以才会造成这种问题的。</p><p>以下效果可以展示出，返回到 AFragment 的时候，发现其内容还原了。</p><p><img src="/images/Android/fragment/lfwfn-vtb64.gif" loading="lazy"></p><p>为了实现跳转之后不销毁原来的 AFragment，可以调用其 hide 方法，在跳转 BFragment 的时候，先隐藏 AFragment 然后将 BFragment 添加到栈中来。返回到 AFragment 时将其显示出来。</p><p>首先，在添加 AFragment 的时候添加一个 tag，这边传入了一个 tag 为 A。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getFragmentManager().beginTransaction().add(R.id.frag_layout, aFragment, <span class="string">&quot;a&quot;</span>).commitAllowingStateLoss();</span><br></pre></td></tr></table></figure><p>然后，在 AFragment 中的 onViewCreated 方法中获取到跳转按钮，设置点击事件。点击事件中，先获取 tag 为 a 的 Fragment，然后获取到之后将其隐藏，如果没有获取到 a 标签，则不隐藏，直接 AFragment 销毁。</p><p>主要代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获得按钮并设置跳转</span></span><br><span class="line">changeFragment = view.findViewById(R.id.btn_fragment_b);</span><br><span class="line">changeFragment.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(bFragment == <span class="literal">null</span>) &#123;</span><br><span class="line">            bFragment = <span class="keyword">new</span> <span class="title class_">BFragment</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 点击跳转时，先通过标签获取AFragment</span></span><br><span class="line">        <span class="type">Fragment</span> <span class="variable">fragment</span> <span class="operator">=</span> getFragmentManager().findFragmentByTag(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(fragment != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 将A隐藏，并且将B添加进来</span></span><br><span class="line">        getFragmentManager().beginTransaction().hide(fragment).add(R.id.frag_layout, bFragment).addToBackStack(<span class="literal">null</span>).commitAllowingStateLoss();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            getFragmentManager().beginTransaction().replace(R.id.frag_layout, bFragment).addToBackStack(<span class="literal">null</span>).commitAllowingStateLoss();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>最后的运行效果如下</p><p><img src="/images/Android/fragment/kqlip-yosnh.gif" loading="lazy"></p><h2 id="数据传递"><a href="#数据传递" class="headerlink" title="数据传递"></a>数据传递</h2><p>数据传递总共有两种方式，一个是从 Activity 传递到 Fragment，另外一个是从 Fragment 到 Activity。从 Activity 到 Fragment 通过 Bundle 的方式传递的。从 Fragment 到 Activity 是通过调用 getActivity 方法，然后在调用 Activity 中的公共方法来达到数据传递的目的。</p><h3 id="从-Activity-传递到-Fragment"><a href="#从-Activity-传递到-Fragment" class="headerlink" title="从 Activity 传递到 Fragment"></a>从 Activity 传递到 Fragment</h3><p>为了调取方便，我们在 AFragment 中编写一个静态方法，用于创建 AFragment 示例，同时带一个参数用来传递数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AFragment</span> <span class="keyword">extends</span> <span class="title class_">Fragment</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> AFragment <span class="title function_">newInstance</span><span class="params">(String data)</span>&#123;</span><br><span class="line">        <span class="type">AFragment</span> <span class="variable">aFragment</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AFragment</span>();</span><br><span class="line">        <span class="comment">// 传入参数</span></span><br><span class="line">        <span class="type">Bundle</span> <span class="variable">bundle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bundle</span>();</span><br><span class="line">        bundle.putString(<span class="string">&quot;data&quot;</span>, data);</span><br><span class="line">        <span class="comment">// 在Fragment中设置参数</span></span><br><span class="line">        aFragment.setArguments(bundle);</span><br><span class="line">        <span class="keyword">return</span> aFragment;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，在视图创建完成之后，会执行 onViewCreated 方法，所以，应该在创建之后获取传过来的值并且设置好即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onViewCreated</span><span class="params">(View view, <span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取参数</span></span><br><span class="line">    <span class="type">Bundle</span> <span class="variable">bundle</span> <span class="operator">=</span> getArguments();</span><br><span class="line">    <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;我是洛天依A&quot;</span>);</span><br><span class="line">    <span class="comment">// 设置文字</span></span><br><span class="line">    <span class="type">TextView</span> <span class="variable">textView</span> <span class="operator">=</span> view.findViewById(R.id.frag_a);</span><br><span class="line">    textView.setText(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 ContainerActivity 创建 Fragment 实例中，将创建的实例更改成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aFragment = AFragment.newInstance(<span class="string">&quot;我不是FragmentA，真难听&quot;</span>);</span><br></pre></td></tr></table></figure><p>最后看看执行效果</p><p><img src="/images/Android/fragment/QQ%E6%88%AA%E5%9B%BE20210314173826.jpg" loading="lazy"></p><h3 id="从-Fragment-传递到-Activity"><a href="#从-Fragment-传递到-Activity" class="headerlink" title="从 Fragment 传递到 Activity"></a>从 Fragment 传递到 Activity</h3><p>因为 Fragment 是依赖于 Activity 的，所以我们可以在 Fragment 中通过 getActivity 方法得到 Fragment 所在的 Activity。最后在调用其 Activity 中的公开的方法即可。</p><p>首先，在 ContainerActivity  编写一个公共方法，本实例中的公共方法的例子将 Activity 中的文本组件重新赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContainerActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Fragment aFragment, bFragment;</span><br><span class="line">    <span class="keyword">private</span> TextView outerText;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_container);</span><br><span class="line"></span><br><span class="line">        button = findViewById(R.id.change_fragment);</span><br><span class="line">        outerText = findViewById(R.id.outer_text);</span><br><span class="line">......</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOuterText</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">       outerText.setText(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 AFragment 中的布局文件创建一个按钮。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;@drawable/lty_a&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/btn_change_outer&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;改变外部文字&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 onViewCreated 方法中，获取按钮并设置点击事件，点击事件中获取当前的 Activity 并且调用其中的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onViewCreated</span><span class="params">(View view, <span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">    <span class="comment">// 改变外部的文字</span></span><br><span class="line">    changeOuterText = view.findViewById(R.id.btn_change_outer);</span><br><span class="line">    changeOuterText.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">            Log.d(<span class="string">&quot;getActivity()&quot;</span>, getActivity().toString());</span><br><span class="line">            <span class="keyword">if</span>(getActivity() != <span class="literal">null</span>)&#123;</span><br><span class="line">                ((ContainerActivity) getActivity()).setOuterText(<span class="string">&quot;我已经炸了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击按钮之后的效果如下所示，这个“我是外部文字”是属于 Activity 的，点击按钮时发现文字内容已经发现变化</p><p><img src="/images/Android/fragment/i99qy-pxm85.gif" loading="lazy"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>项目的代码都在 <a href="https://github.com/BestGuo2020/AndroidStudy">AndroidStudy</a> 的 github 仓库中。</p><p>学习过程中参考了部分博客</p><ul><li><a href="https://www.jianshu.com/p/21a862dae6f9">https://www.jianshu.com/p/21a862dae6f9</a></li><li><a href="https://www.cnblogs.com/fanglongxiang/p/12149066.html">https://www.cnblogs.com/fanglongxiang/p/12149066.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android 开发的学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义 Android 对话框</title>
      <link href="/journal/custom-dialog/"/>
      <url>/journal/custom-dialog/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>诶？小赫赫为什么很少在常用的 app 中看到有使用系统自带的对话框呢？而且，自定义的对话框又好神奇。自从看了天哥的自定义的 Dialog 对话框之后……</p><span id="more"></span><h2 id="前情概要"><a href="#前情概要" class="headerlink" title="前情概要"></a>前情概要</h2><p>之前在学习的时候，学到了使用 Android 内置的 AlertDialog 和 ProgressDialog 对话框。然后我见到某一些 app 中都没有见到使用系统自带的 Dialog ，都是去进行自定义的。bilibili 有自己的对话框，微信和 QQ 也有自定义的对话框。</p><p>后面看了天哥的视频发现，如果需要来自定义对话框。需要继承自 Dialog 这个类（我想，继承 AlertDialog 也可以吧，重写它的一些方法应该就行了吧），然后再自己写一个对话框的布局就可以了。</p><p>不过，这次想整一个 iPhone 的对话框。话不多说，现在开干。</p><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fpic.houfx.com%2Fuploads%2Fzedit%2F2019-01%2F08%2F20190108133540_98649.jpg&refer=http%3A%2F%2Fpic.houfx.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg" alt="给我整一个" loading="lazy"></p><h2 id="开始整活"><a href="#开始整活" class="headerlink" title="开始整活"></a>开始整活</h2><p>首先，我们要……</p><p><del>当然是新建一个Activity啦。</del></p><h3 id="继承类、重写方法"><a href="#继承类、重写方法" class="headerlink" title="继承类、重写方法"></a>继承类、重写方法</h3><p>戳啦，先要建立一个类。类名随便起一个，然后直接继承自 Dialog。直接继承完成之后，Android Studio 肯定会有画红色的下划线，需要你来重写构造方法。重写构造方法也简单，直接给个提示，重写一个就好了，不过我这里重写了两个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomDialog</span> <span class="keyword">extends</span> <span class="title class_">Dialog</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 传入当前的 Activity</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomDialog</span><span class="params">(<span class="meta">@NonNull</span> Context context)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 传入一个 Activity 还有主题</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomDialog</span><span class="params">(<span class="meta">@NonNull</span> Context context, <span class="type">int</span> themeResId)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, themeResId);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>诶？重写完之后，我自定义的对话框肯定是需要有 xml 布局文件才能够真正的实现布局吧。重写 Dialog 类中的 <code>onCreate</code> 方法就好咯。</p><p>在里面调用一个 <code>setContentView</code> 方法，这个方法特别熟悉，就是在我们创建一个 Activity 之后，默认重写的 <code>onCreate</code> 方法中有调用这个方法，目的就是加载布局文件咯。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomDialog</span> <span class="keyword">extends</span> <span class="title class_">Dialog</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomDialog</span><span class="params">(<span class="meta">@NonNull</span> Context context)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomDialog</span><span class="params">(<span class="meta">@NonNull</span> Context context, <span class="type">int</span> themeResId)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, themeResId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">   setContentView(R.layout.custom_dialog_layout);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>既然这样，重写完需要之后，就可以自己来布局好 iPhone 的提示框了。</p><h3 id="自定义布局"><a href="#自定义布局" class="headerlink" title="自定义布局"></a>自定义布局</h3><p>布局出来的 iPhone 界面需要花一些时间，对话框的制作还是简单的，不会特别难。不过细节还是需要注意一下的</p><blockquote><p>害，其实我在这里跳了好多坑，比如在设置 corners 属性时，要设置完 radius 再设置每一个角的 radius ，这样就不会有报错的现象。之所以会报错，是因为我是仅设置了单个角的 radius。也就是说属性 radius 是必须存在的</p><p>吃一堑，长一智。<del>下亿次还会犯错</del></p><p>错误的写法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">corners</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:topLeftRadius</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:topRightRadius</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:bottomLeftRadius</span>=<span class="string">&quot;20dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:bottomRightRadius</span>=<span class="string">&quot;0dp&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>正确的写法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">corners</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:radius</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:topLeftRadius</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:topRightRadius</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:bottomLeftRadius</span>=<span class="string">&quot;20dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:bottomRightRadius</span>=<span class="string">&quot;0dp&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="对话框布局"><a href="#对话框布局" class="headerlink" title="对话框布局"></a>对话框布局</h4><p>对话框布局的代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;@drawable/bg_custom_dialog&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 文本框的标题部分 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/dialog_title&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;TextView&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;20sp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;@color/colorBlack&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textStyle</span>=<span class="string">&quot;bold&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 文本框的内容部分 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/dialog_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;12sp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;TextView&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;@color/colorBlack&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;15sp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginBottom</span>=<span class="string">&quot;20dp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 用它来画横线，我是不是很机智，嘻嘻 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;0.5dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;#ccc&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 水平线性布局 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;45dp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 退出按钮 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/dialog_cancel&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;cancel&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;16sp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;@drawable/bg_dialog_left_btn&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">&quot;#4E90F3&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 用它来画竖线，我是不是很机智，嘻嘻 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;0.5dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;#ccc&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 设置确认按钮的样式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/dialog_ok&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;ok&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;16sp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">&quot;#4E90F3&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;@drawable/bg_dialog_right_btn&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="对话框样式"><a href="#对话框样式" class="headerlink" title="对话框样式"></a>对话框样式</h4><p>对话框的背景样式如下：</p><p>设置了对话框的边框颜色，四个角，和背景颜色</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">stroke</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:color</span>=<span class="string">&quot;@color/colorGray&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">corners</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:radius</span>=<span class="string">&quot;20dp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">solid</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:color</span>=<span class="string">&quot;#ccffffff&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="按钮的样式"><a href="#按钮的样式" class="headerlink" title="按钮的样式"></a>按钮的样式</h4><p>由于两个按钮的样式，只有一边出现圆角。退出按钮的左下方出现圆角，确认按钮的右下方出现圆角。所以需要编写两种不同的样式分别对两个按钮使用</p><p>左下角按钮样式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用selector来改变其元素的状态 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 按下去的状态 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:state_pressed</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shape</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">&quot;#cccccccc&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 圆角 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">corners</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:radius</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:topLeftRadius</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:topRightRadius</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:bottomLeftRadius</span>=<span class="string">&quot;20dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:bottomRightRadius</span>=<span class="string">&quot;0dp&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 未按下的状态 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:state_pressed</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shape</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 圆角 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">corners</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:radius</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:topLeftRadius</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:topRightRadius</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:bottomLeftRadius</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:bottomRightRadius</span>=<span class="string">&quot;20dp&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></span><br></pre></td></tr></table></figure><p>右下角按钮样式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用selector来改变其元素的状态 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 按下去的状态 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:state_pressed</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shape</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">&quot;#cccccccc&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 圆角 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">corners</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:radius</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:topLeftRadius</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:topRightRadius</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:bottomLeftRadius</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:bottomRightRadius</span>=<span class="string">&quot;20dp&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 未按下的状态 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:state_pressed</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shape</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 圆角 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">corners</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:radius</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:topLeftRadius</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:topRightRadius</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:bottomLeftRadius</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:bottomRightRadius</span>=<span class="string">&quot;20dp&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="更改对话框的默认样式"><a href="#更改对话框的默认样式" class="headerlink" title="更改对话框的默认样式"></a>更改对话框的默认样式</h4><p>最后，就是更改对话框的默认样式了，也就是 styles.xml 的配置了，虽然这样子的配置宾不是特别懂。但是总有能解决的办法的。</p><blockquote><p>我记得在使用 RGB 来表示透明度的时候，是用 rgba(0, 0, 0, 0.2)，也就是最后一项是透明的。但是在这种 16 进制下面。比如 #00000000 这种的，那么它的前两位 00 表示的是透明度。和上面的小数点一样，数值越小，就越透明，否则就越不透明。</p><p>这个也是后面使用调色板才发现的。</p></blockquote><p>对话框样式如下</p><blockquote><p>默认的一个对话框是白色，为了让其消失，只好将背景进行完全的透明即可</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;CustomDialog&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;@android:style/Theme.Dialog&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowNoTitle&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowIsFloating&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowBackground&quot;</span>&gt;</span>#00000000<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="见证奇迹的时刻"><a href="#见证奇迹的时刻" class="headerlink" title="见证奇迹的时刻"></a>见证奇迹的时刻</h3><p>这些样式写完了，那我们就放出效果图</p><p><img src="/images/Android/custom-dialog/Screenshot_20210308_235148.jpg" loading="lazy"></p><p>这么会这么难看😨😨😨，这不就是那个浏览器的那个恶意广告😂😂 </p><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fimages%2F20190208%2F18686ad0f90a4a3486b27f432dade8fb.jpeg&refer=http%3A%2F%2F5b0988e595225.cdn.sohucs.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1617886190&t=6007ebcd1d9faef445f69d6df70f6528" loading="lazy"></p><p>不好意思，放错图了，这个才是真的。已经比较接近 iPhone 的那个对话框</p><p><img src="/images/Android/custom-dialog/Screenshot_20210309_103855.jpg" loading="lazy"></p><p>不过还没完，接下来还要获取按钮的点击事件，以及上面的文字都能设置的那种。这个对话框，才算是真正可以用的对话框</p><h2 id="文字设置和点击事件"><a href="#文字设置和点击事件" class="headerlink" title="文字设置和点击事件"></a>文字设置和点击事件</h2><p>要设置其中的文字，以及获取控件，需要在里面声明一些变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomDialog</span> <span class="keyword">extends</span> <span class="title class_">Dialog</span>&#123;</span><br><span class="line">    <span class="comment">// 获取文本控件</span></span><br><span class="line">    <span class="keyword">private</span> TextView mTitle, mMessage, mCancel, mOk;</span><br><span class="line">    <span class="comment">// 字体设置</span></span><br><span class="line">    <span class="keyword">private</span> String title, message, cancel, ok;</span><br><span class="line">    </span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明两个按钮的接口，方便外边实现这个接口，然后对接口进行回调。所谓的接口回调，其实就是运用了面向对象的多态性而已啦。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomDialog</span> <span class="keyword">extends</span> <span class="title class_">Dialog</span>&#123;</span><br><span class="line">    <span class="comment">// 退出事件接口</span></span><br><span class="line">    <span class="keyword">private</span> OnCancelListener cancelListener;</span><br><span class="line">    <span class="comment">// 确定事件接口</span></span><br><span class="line">    <span class="keyword">private</span> OnOkListener okListener;</span><br><span class="line">    </span><br><span class="line">    ......</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OnCancelListener</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(CustomDialog dialog)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OnOkListener</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(CustomDialog dialog)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后呢，就是设置一些文字和监听事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomDialog</span> <span class="keyword">extends</span> <span class="title class_">Dialog</span>&#123;</span><br><span class="line">    </span><br><span class="line">    ......</span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置弹窗标题</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title 标题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTitle</span><span class="params">(String title)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置弹窗消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置退出按钮以及监听事件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cancel 退出按钮文字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cancelListener 按钮点击事件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCancel</span><span class="params">(String cancel, OnCancelListener cancelListener)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cancel = cancel;</span><br><span class="line">        <span class="built_in">this</span>.cancelListener = cancelListener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置 OK 按钮以及监听事件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ok 确定按钮文字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> okListener 确定按钮事件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOk</span><span class="params">(String ok, OnOkListener okListener)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.ok = ok;</span><br><span class="line">        <span class="built_in">this</span>.okListener = okListener;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后就是找到控件，然后设置点击事件和相关的文字就行了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomDialog</span> <span class="keyword">extends</span> <span class="title class_">Dialog</span>&#123;</span><br><span class="line">    </span><br><span class="line">    ......</span><br><span class="line">        </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="comment">// 自适应宽高</span></span><br><span class="line">        OtherUtils.adjustDialog(Objects.requireNonNull(getWindow()));</span><br><span class="line">        <span class="comment">// 载入自定义的对话框样式</span></span><br><span class="line">        <span class="built_in">this</span>.setContentView(R.layout.custom_dialog_layout);</span><br><span class="line">        <span class="comment">// 获取</span></span><br><span class="line">        mTitle = findViewById(R.id.dialog_title);</span><br><span class="line">        mMessage = findViewById(R.id.dialog_content);</span><br><span class="line">        mCancel = findViewById(R.id.dialog_cancel);</span><br><span class="line">        mOk = findViewById(R.id.dialog_ok);</span><br><span class="line">        <span class="comment">// 设置相关文字，判断设置的字符串是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(!TextUtils.isEmpty(title))&#123;</span><br><span class="line">            mTitle.setText(title);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!TextUtils.isEmpty(message))&#123;</span><br><span class="line">            mMessage.setText(message);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!TextUtils.isEmpty(cancel))&#123;</span><br><span class="line">            mCancel.setText(cancel);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!TextUtils.isEmpty(ok))&#123;</span><br><span class="line">            mOk.setText(ok);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置退出监听事件</span></span><br><span class="line">        mCancel.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(cancelListener != <span class="literal">null</span>)&#123;</span><br><span class="line">                    cancelListener.onClick(CustomDialog.<span class="built_in">this</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                dismiss();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 设置确定监听事件</span></span><br><span class="line">        mOk.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(okListener != <span class="literal">null</span>)&#123;</span><br><span class="line">                    okListener.onClick(CustomDialog.<span class="built_in">this</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                dismiss();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后的效果如下</p><p><img src="/images/Android/custom-dialog/Screenshot_20210309_201312.jpg" loading="lazy"></p><p>可以点击出来的效果</p><p><img src="/images/Android/custom-dialog/e0iy1-qywc9.gif" loading="lazy"></p><h2 id="如何调用"><a href="#如何调用" class="headerlink" title="如何调用"></a>如何调用</h2><p>调用的方式非常简单，就像是创建 AlertDialog.Builder 一样，调用方法去设置就好了。以下是调用示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里把 styles.xml 中自定义的样式调入进来</span></span><br><span class="line"><span class="type">CustomDialog</span> <span class="variable">customDialog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustomDialog</span>(AlertDialogActivity.<span class="built_in">this</span>, R.style.CustomDialog);</span><br><span class="line">customDialog.setTitle(<span class="string">&quot;警告&quot;</span>);</span><br><span class="line">customDialog.setMessage(<span class="string">&quot;你的手机电量过低，请充电&quot;</span>);</span><br><span class="line">customDialog.setCancel(<span class="string">&quot;取消&quot;</span>, <span class="keyword">new</span> <span class="title class_">CustomDialog</span>.OnCancelListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(CustomDialog dialog)</span> &#123;</span><br><span class="line">        Toast.makeText(AlertDialogActivity.<span class="built_in">this</span>, <span class="string">&quot;点击了取消按钮&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">customDialog.setOk(<span class="string">&quot;确定&quot;</span>, <span class="keyword">new</span> <span class="title class_">CustomDialog</span>.OnOkListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(CustomDialog dialog)</span> &#123;</span><br><span class="line">        Toast.makeText(AlertDialogActivity.<span class="built_in">this</span>, <span class="string">&quot;点击了确定按钮&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">customDialog.show();</span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>项目的代码都在 <a href="https://github.com/BestGuo2020/AndroidStudy">AndroidStudy</a> 的 github 仓库中。</p><p>参考了以下：</p><ul><li><a href="https://blog.csdn.net/woshi_awei/article/details/99664527">https://blog.csdn.net/woshi_awei/article/details/99664527</a></li><li><a href="https://www.cnblogs.com/cyanfei/archive/2012/07/27/2612023.html">https://www.cnblogs.com/cyanfei/archive/2012/07/27/2612023.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android 开发的学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象方法</title>
      <link href="/journal/UML-totoral/"/>
      <url>/journal/UML-totoral/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>OO：建立对象的思维方式，对面向对象思想和理论有进一步的理解面向对象技术是一种建模理论。</p><p>UML：能够熟练地使用UML表达面向对象的设计思想，体现oo的建模语言，是将 OO 理论转化为实践的工具。</p><p>MODEL：运用面向对象技术的一般原则和模式进行应用系统的分析和设计建模。建模是最终目的。</p><p>8 次实验，考勤 20% ＋ 实验报告 40% ＋ 期末大作业 40%</p><span id="more"></span><h2 id="软件工程和面向对象方法"><a href="#软件工程和面向对象方法" class="headerlink" title="软件工程和面向对象方法"></a>软件工程和面向对象方法</h2><p>在没有软件工程之前，由于项目的规模越大，导致项目的不可控，使得高质量的软件开发的困难。</p><p>产品质量得不到保障，工作效率低下，开发成本严重超支等等…..</p><h2 id="软件工程的目标"><a href="#软件工程的目标" class="headerlink" title="软件工程的目标"></a>软件工程的目标</h2><ul><li>使软件开发的成本能够控制在预计的合理范围内。</li><li>使软件产品的各项功能和性能能够满足用户需求。</li><li>提高软件产品的质量。</li><li>提高软件产品的可靠性。</li><li>使生产出来的软件产品易于移植、维护、升级和使用。使软件产品的开发周期能够控制在预计的合理时间范围内。</li></ul><h2 id="面向对象的方法"><a href="#面向对象的方法" class="headerlink" title="面向对象的方法"></a>面向对象的方法</h2><p>可维护、可服用、可扩展、灵活性好。</p><p>面向对象分析设计编程思想，通过封装、继承、多态把程序的耦合度降低（传统印刷术的问题就在于所有的字都刻在同一版面上造成耦合度太高所致），使用设计模式使得程序更加的灵活，容易修改，并且易于复用。</p><h2 id="结构化和面向对象的区别"><a href="#结构化和面向对象的区别" class="headerlink" title="结构化和面向对象的区别"></a>结构化和面向对象的区别</h2><ul><li>结构化思维用过程刻画数据间关系</li><li>对象思维直接用类表达数据间关系</li><li>结构化中，数据是死的，全部依赖算法操作</li><li>对象思维中，数据是活的，“她”知道自己的信息（属性），并能完成自己的工作（操作)</li><li>结构化思维更像是一个人在解决所有问题对象思维更像是一个团队的分工协作</li></ul><h2 id="面向对象的优点"><a href="#面向对象的优点" class="headerlink" title="面向对象的优点"></a>面向对象的优点</h2><ul><li>顺应人类思维习惯：让软件开发人员在<font color="red">解空间</font>中直接模拟<font color="red">问题空间</font>中的对象及其行为</li><li>稳定：较小的需求变化不会导致系统结构大的改变当需求变化时，功能最易变，数据较易变，对象较稳定。</li><li>复用：<ul><li>代码重用：类库、框架等重用机制</li><li>提高质量：减少由于编制新的系统代码而产生的成本</li><li>通过继承、关联、封装等手段</li></ul></li></ul><h2 id="UML图"><a href="#UML图" class="headerlink" title="UML图"></a>UML图</h2><p>基于面向对象的分析与设计我们需要使用 uml 图来表示出来，有以下几种图。</p><p>不过使用中文说这是什么图，就真的头疼，尤其是刚刚学习的时候，很容易混掉，所以还是用英文来解释。</p><h3 id="Class-Diagram"><a href="#Class-Diagram" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><p>类图，感觉开发过 java 对这个会非常熟悉，图例如下</p><p><img src="/images/uml/ClassDiagram.png" loading="lazy"></p><h3 id="Sequence-Diagram"><a href="#Sequence-Diagram" class="headerlink" title="Sequence Diagram"></a>Sequence Diagram</h3><p>顺序图</p><p><img src="/images/uml/SequenceDiagram.png" loading="lazy"></p><h3 id="Collaboration-Diagram"><a href="#Collaboration-Diagram" class="headerlink" title="Collaboration Diagram"></a>Collaboration Diagram</h3><p>协作图，有时候也叫通信图，搞不懂为什么要这么多的意思。<br>害~</p><p><img src="/images/uml/CollaborationDialog.png" loading="lazy"></p><h3 id="Activity-Diagram"><a href="#Activity-Diagram" class="headerlink" title="Activity Diagram"></a>Activity Diagram</h3><p>活动图</p><p><img src="/images/uml/ActivityDiagram.png" loading="lazy"></p><h3 id="StateChart-Diagram"><a href="#StateChart-Diagram" class="headerlink" title="StateChart Diagram"></a>StateChart Diagram</h3><p>状态图</p><p><img src="/images/uml/StatechartDiagram.png" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> UML 课堂笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UML </tag>
            
            <tag> 软件工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The UML</title>
      <link href="/journal/the-uml/"/>
      <url>/journal/the-uml/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="什么是-UML"><a href="#什么是-UML" class="headerlink" title="什么是 UML"></a>什么是 UML</h2><p>UML是一种标准的图形化建模语言，是面向对象分析与设计的标准表示。</p><p>它，不是一种可视化的程序设计语言,而是一种可视化的建模语言(用于分析设计)；不是工具或知识库的规格说明,而是一种建模语言规格说明，是一种表示的标准。</p><p>不是过程，也不是方法，但允许任何一种过程和方法使用它。</p><span id="more"></span><h2 id="为什么要建模"><a href="#为什么要建模" class="headerlink" title="为什么要建模"></a>为什么要建模</h2><h3 id="建模的目的"><a href="#建模的目的" class="headerlink" title="建模的目的"></a>建模的目的</h3><ol><li><p>模型有助于按照所需的样式可视化（VISUALIZE）系统</p></li><li><p>模型能够描述（SPECIFY）系统的结构和行为</p></li><li><p>模型提供构造（CONSTRUCT）系统的模板</p></li><li><p>模型可以文档化（DOCUMENT）设计决策</p></li></ol><h3 id="建模的原则"><a href="#建模的原则" class="headerlink" title="建模的原则"></a>建模的原则</h3><ol><li>选择合适的模型</li><li>模型具有不同的精确程度</li><li>最好的模型是与现实相联系</li><li>需要从多个视角创建不同的模型，单一的模型是不够的</li></ol><h2 id="什么情况下推荐使用UML"><a href="#什么情况下推荐使用UML" class="headerlink" title="什么情况下推荐使用UML"></a>什么情况下推荐使用UML</h2><ol><li>OO 方法是项目决定采用的方法论，是整个项目或产品成功的关键</li><li>系统规模比较复杂，需要用图形抽象地表达复杂概念，增强设计的灵活性、可读性和可理解性，以便暴露深层次的设计问题，降低开发风险</li><li>组织希望记录已成功项目、产品的公共设计方案，在开发新项目时可以参考、重用过去的设计，以节省投入，提高开发效率和整体成功率</li><li>有必要采用一套通用的图形语言和符号体系描述组织的业务流程和软件需求，促进业务人员、开发人员之间一致、高效地交流</li></ol><h2 id="什么情况下不适合"><a href="#什么情况下不适合" class="headerlink" title="什么情况下不适合"></a>什么情况下不适合</h2><p>UML不是万能，有些场合并不适合</p><ul><li>传统的做法已完全适用，对 OOAD（面向对象的设计与分析） 的要求也不高，项目非常成功，无改进必要。</li><li>开发的系统比较简单，直接用源码配上少量的文字就能解决问题，软件开发文档也无需添加图形来辅助说明。</li><li>开发的系统本身不属于 OO 方法、UML 适用范围</li></ul><h2 id="UML-基础结构和上层结构"><a href="#UML-基础结构和上层结构" class="headerlink" title="UML 基础结构和上层结构"></a>UML 基础结构和上层结构</h2><h3 id="UML基础结构（Infrastructure）"><a href="#UML基础结构（Infrastructure）" class="headerlink" title="UML基础结构（Infrastructure）"></a>UML基础结构（Infrastructure）</h3><ul><li>即 UML 元模型</li><li>使之更加模块化，更易于扩展</li><li>与UML其它规范更加保持一致（MOF）</li></ul><h4 id="MOF-四层模型"><a href="#MOF-四层模型" class="headerlink" title="MOF 四层模型"></a>MOF 四层模型</h4><ul><li>元元模型层(M3)<ul><li>包含了定义建模语言所需的元素(UML基础结构)</li><li>METACLASS，METAATTRIBUTE，METAOPERATION</li></ul></li><li>元模型层(M2)<ul><li>定义了一种建模语言的结构和语法(UML上层结构)</li><li>如UML: CLASS，ATTRIBUTE，OPERATION</li></ul></li><li>模型层(M1)<ul><li>定义了一个具体的系统的模型</li><li>如采用 UML 表示的某系统模型</li></ul></li><li>运行时(MO)<ul><li>包含了一个模型的对象在运行时的状态等</li><li>如某系统运行时的对象和数据模型</li></ul></li></ul><h3 id="UML上层结构（Superstructure）"><a href="#UML上层结构（Superstructure）" class="headerlink" title="UML上层结构（Superstructure）"></a>UML上层结构（Superstructure）</h3><ul><li>是指普通用户使用的UML语法、语义以及符号表示</li><li>使UML更具可用性</li></ul><h2 id="构造块（Building-Blocks）"><a href="#构造块（Building-Blocks）" class="headerlink" title="构造块（Building Blocks）"></a>构造块（Building Blocks）</h2><h3 id="事物（Things）"><a href="#事物（Things）" class="headerlink" title="事物（Things）"></a>事物（Things）</h3><ul><li>结构（STRUCTURAL）事物<ul><li>类、接口</li><li>用例、协作</li><li>构件、工件、节点</li></ul></li><li>行为（BEHAVIORAL）事物<ul><li>交互、状态机、活动</li></ul></li><li>分组（GROUPING）事物<ul><li>包(、框架、模型、子系统…)</li></ul></li><li>注释（ANNOTATIONAL）事物</li></ul><h3 id="关系（Relationships）"><a href="#关系（Relationships）" class="headerlink" title="关系（Relationships）"></a>关系（Relationships）</h3><p>依赖、关联、泛化、实现</p><h3 id="图（Diagram）"><a href="#图（Diagram）" class="headerlink" title="图（Diagram）"></a>图（Diagram）</h3><ul><li><p>静态（7种）：类图、对象图、构件图、部署图、包图、组合结构图、外廓图。</p></li><li><p>动态（7种）：顺序图、通信图、时间图、交互纵览图、活动图、状态机图、用例图。</p></li></ul><h2 id="规格说明（SPECIFICATIONS）"><a href="#规格说明（SPECIFICATIONS）" class="headerlink" title="规格说明（SPECIFICATIONS）"></a>规格说明（SPECIFICATIONS）</h2><p>UML模型至少具有两种维度:</p><ul><li><p>图形维度：使用图和图标可视化模型</p></li><li><p>文本维度：各种建模元素的</p></li></ul><p>规格说明</p><ul><li>模型元素的特征和语义的文本描述</li><li>形成了承载模型的语义背板（SEMANTIC BACKPLANE），赋予模型意义，各种图仅仅是该背板的视图或者可视化投影</li><li>DEATH BY DIAGRAM（由于图形而死亡）</li></ul>]]></content>
      
      
      <categories>
          
          <category> UML 课堂笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UML </tag>
            
            <tag> 软件工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 之文件存储</title>
      <link href="/journal/file-storage-android/"/>
      <url>/journal/file-storage-android/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前情概要"><a href="#前情概要" class="headerlink" title="前情概要"></a>前情概要</h2><p>Android 的文件存储也是非常重要的，比如微信中的聊天时产生的语音，视频，图片，文件等等。在视频 app 中下载的视频，某某音乐 app 所产生的缓存文件等等都是需要保存到安卓手机上磁盘的。</p><p>然后，由于过多的文件被保存或者缓存到安卓手机的文件，就会占用非常多的存储空间。这也是一个原因，还有一个原因是因为其 app 中所带的素材实在是非常之多，还有第三方库的导入。有很多 app 都是五六十兆，甚至是上百兆的都有。加上现在的存储空间特别大，app 大小也在变大。</p><p>刚开始学，所注意到的也就这些。</p><span id="more"></span><h3 id="内部存储和外部存储"><a href="#内部存储和外部存储" class="headerlink" title="内部存储和外部存储"></a>内部存储和外部存储</h3><p>在学习文件存储之前，我还是有去了解 Android 的内部存储和外部存储。</p><p>什么是内部存储，我们一直认为，手机内置的存储设备就是内部存储；使用 SD 卡，U盘等这种外部设就是外部存储。在 Android 4.4 之前还确实是如此，不过在 Android 4.4 之后。安卓手机本身的存储空间变得越来越大，从以前的 16G 变成了现在的 512G ，那他们这个存储是不是内部存储呢？</p><p>不是的，在 Android 4.4 之后，以上所列出的空间大小是“机身存储”，在概念上区分了“内部存储”和“外部存储”。</p><p>如果我们在手机上插了一张 SD 卡，那怎么获取 SD 卡上的存储位置呢？</p><p>Android 有给我们一个方法，用于调取全部的外部路径，它就是 <code>context.getExternalFilesDir()</code>，这个方法可以得到所有的外部设备的存储。以及概念上的外部存储。</p><h2 id="内部存储"><a href="#内部存储" class="headerlink" title="内部存储"></a>内部存储</h2><p>内部存储的保存路径是在 <code>/data/data/applicationId</code> 路径下面，这个路径用户不能通过文件管理器直接访问到，也不能使用 Android 命令行终端来访问。需要获取 root 权限，而且现在的手机使用工具来 root 的成功率实在是太低了，所以我们可以利用安卓模拟器查看里面的内容</p><p>因为，安卓模拟器可是自带 root 的。</p><p>我们在内部存储的目录中可以看到以下的文件夹，这些文件夹全部都是 app 的文件夹</p><p><img src="/images/Android/filestorage/QQ%E6%88%AA%E5%9B%BE20210306175230.jpg" loading="lazy"></p><h3 id="内部存储的目录"><a href="#内部存储的目录" class="headerlink" title="内部存储的目录"></a>内部存储的目录</h3><p>SharedPreferences：<code>/data/data/<applicationId>/shared_prefs</applicationId></code><br>数据库目录：<code>/data/data/<applicationId>/databases</applicationId></code><br>文件目录：<code>/data/data/<applicationId>/files</applicationId></code><br>缓存目录：<code>/data/data/<applicationId>/cache</applicationId></code></p><h3 id="内部存储路径的方法调用"><a href="#内部存储路径的方法调用" class="headerlink" title="内部存储路径的方法调用"></a>内部存储路径的方法调用</h3><p>获取内部存储对应的三个路径非常简单，使用以下三个方法。至于第一个 SharedPreferences 可以看看这篇日志<a href="/2021/02/02/shared-preferences/">《Android 数据存储之 SharedPreferences》</a></p><p>文件目录：<code>getFilesDir()</code><br>缓存目录：<code>getCachesDir()</code><br>数据库目录：<code>getDatabasePath()</code></p><h3 id="读写内部存储"><a href="#读写内部存储" class="headerlink" title="读写内部存储"></a>读写内部存储</h3><p>本次学习的是文件的读写，这里就展示了读取文件、写入文件和删除文件的一些方法。调用方法之后，就可以像 java io 一样操作内部存储的数据。</p><p>而且内部存储的读写是不需要在 AndroidManifest.xml 来声明读写权限的。</p><ul><li>读取：<code>openFileInput()</code><ul><li>参数<ul><li>string：文件名</li></ul></li></ul></li><li>写入：<code>openFileOutput()</code><ul><li>参数<ul><li>string：文件名</li><li>int：模式（MODE_PRIVATE，MODE_APPEND）</li></ul></li></ul></li><li>删除：<code>deleteFile()</code><ul><li>参数<ul><li>string：文件名</li></ul></li></ul></li></ul><p>读取和写入，我感觉有点绕，写着写着就混了。</p><p>我们可以这样子理解：</p><p>老师要求我们背一首诗，要把纸上的诗背到脑子里，肯定需要多读，读的过程相当于输入（Input）到脑子里。脑子相当于是一个“变量”。</p><p>然后，老师要开始我们默写这首诗，这个时候就是把脑子里的诗写在一张新纸上，写的过程相当于输出（Output），将变量中的值给打印出来。</p><p>例子虽然不怎么好吧，但是我还是能理解的。</p><h3 id="调用示例"><a href="#调用示例" class="headerlink" title="调用示例"></a>调用示例</h3><p>我们看看使用这三个方法，看看调用的结果如何。这里的 fileName 的值是 test.txt 文件</p><h4 id="写入方法"><a href="#写入方法" class="headerlink" title="写入方法"></a>写入方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存储数据到内部存储</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">saveInternal</span><span class="params">(String content)</span>&#123;</span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 打开文件</span></span><br><span class="line">        fos = openFileOutput(fileName, MODE_PRIVATE);</span><br><span class="line">        <span class="comment">// 将脑子中的数据写入到文件中</span></span><br><span class="line">        fos.write(content.getBytes());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭文件流</span></span><br><span class="line">            fos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写入之后，这个目录下就会生成一个 test.txt 的文件</p><p><img src="/images/Android/filestorage/QQ%E6%88%AA%E5%9B%BE20210306163703.jpg" loading="lazy"></p><p>打开之后，发现里面有我们写入的内容</p><p><img src="/images/Android/filestorage/QQ%E6%88%AA%E5%9B%BE20210306163933.jpg" loading="lazy"></p><h4 id="读取方法"><a href="#读取方法" class="headerlink" title="读取方法"></a>读取方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从内部存储读取数据</span></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">readInternal</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fis = openFileInput(fileName);</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(bytes)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sb.append(<span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="number">0</span>, len));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ioException) &#123;</span><br><span class="line">            ioException.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击读取之后，那个文本控件就会把它给显示出来</p><p><img src="/images/Android/filestorage/QQ%E6%88%AA%E5%9B%BE20210306163912.jpg" loading="lazy"></p><h4 id="删除方法"><a href="#删除方法" class="headerlink" title="删除方法"></a>删除方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isDeleted</span> <span class="operator">=</span> deleteFile(fileName);</span><br><span class="line">    <span class="keyword">if</span>(isDeleted)&#123;</span><br><span class="line">        Toast.makeText(FileStorageActivity.<span class="built_in">this</span>, <span class="string">&quot;删除成功&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Toast.makeText(FileStorageActivity.<span class="built_in">this</span>, <span class="string">&quot;删除失败，该文件可能不存在&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提示删除成功</p><p><img src="/images/Android/filestorage/QQ%E5%9B%BE%E7%89%8720210306213538.png" loading="lazy"></p><p>删除之后，发现那个 test.txt 的文件不见了</p><p><img src="/images/Android/filestorage/QQ%E5%9B%BE%E7%89%8720210306213800.png" loading="lazy"></p><h2 id="外部存储"><a href="#外部存储" class="headerlink" title="外部存储"></a>外部存储</h2><p>外部存储分为共有目录和私有目录。外部存储是我们可以见到的目录，一般，读取外部存储目录的所使用的方法是 <code>Environment.getExternalStorageDirectory()</code></p><p>在模拟器获取到的值是：<code>/storage/emulated/0</code><br>在我自己的手机上：<code>/storage/0007-CF27/heguo/</code></p><p>为什么会这样呢？那是因为在我自己的手机上，设置把外部存储的默认值指定到我的 SD 卡上面。我们通过调用  <code>getExternalFilesDirs("")</code>方法来获取我的手机中的全部的外部存储路径。</p><p>调用的结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/storage/emulated/0/Android/data/top.bestguo.androidlayout/files</span><br><span class="line">/storage/0007-CF27/Android/data/top.bestguo.androidlayout/files</span><br></pre></td></tr></table></figure><p>可以发现，在自己的手机上，内置的外部存储的路径也是 <code>/storage/emulated/0/</code> 。</p><p>不过在读取外部存储空间的时候，需要用户来同意读写。否则，程序会报出异常。关于 Android 的权限那一块也会单独来写，毕竟没有学到。这里通过一行代码来让用户是否同意我们读写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ActivityCompat.requestPermissions(<span class="built_in">this</span>, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>其中，<code>Manifest.permission.WRITE_EXTERNAL_STORAGE</code> 这个就是用于读写外部存储的声明。同时这个声明也需要在 AndroidManifest.xml 文件下来声明</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">&quot;top.bestguo.androidlayout&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 需要添加的 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 以下是 application 的声明，省略 --&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="公有目录"><a href="#公有目录" class="headerlink" title="公有目录"></a>公有目录</h3><p>通过方法调用：</p><p><code>Environment.getExternalStoragePublicDirectory(String type)</code></p><p>其中 type 有这些，这些就是文件夹名。通过 <code>Environment.DIRXXX</code> 来获取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DIRECTORY_MUSIC音乐文件夹</span><br><span class="line">DIRECTORY_PODCASTS,音乐或电台录音或视频中的剪辑</span><br><span class="line">DIRECTORY_RINGTONES,铃声文件夹</span><br><span class="line">DIRECTORY_ALARMS,闹钟相关文件夹</span><br><span class="line">DIRECTORY_NOTIFICATIONS,通知文件夹</span><br><span class="line">DIRECTORY_PICTURES,图片文件夹</span><br><span class="line">DIRECTORY_MOVIES,视频保存文件夹</span><br><span class="line">DIRECTORY_DOWNLOADS,下载文件夹</span><br><span class="line">DIRECTORY_DCIM,相机照片缓存文件夹</span><br><span class="line">DIRECTORY_DOCUMENTS文档文件夹</span><br></pre></td></tr></table></figure><p>比如，微信发朋友圈，发图片需要获取 DCIM 下的文件，或者 Pictures 下的文件夹。让用户来选择这些图片，最来上传到朋友圈中。</p><h3 id="私有目录"><a href="#私有目录" class="headerlink" title="私有目录"></a>私有目录</h3><p>私有目录有以下几种：</p><p><code>/storage/emulated/Android/data/<applicationId>/cache</applicationId></code><br><code>/storage/emulated/Android/data/<applicationId>/files</applicationId></code></p><p>不过外部存储的私有目录可以直接使用文件管理器能查看的到，只是用户可能不是很在意。还有一个是因为，它的存储路径有点长，对于大多数的安卓用户来说可能就非常难找了。</p><h3 id="外部存储示例"><a href="#外部存储示例" class="headerlink" title="外部存储示例"></a>外部存储示例</h3><p>以下代码示例来对外部存储进行读写</p><p><font color="red">注意：在读写外部存储时需要声明读写权限</font></p><h3 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">saveOuter</span><span class="params">(String context)</span> &#123;</span><br><span class="line">    Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MUSIC);</span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 获取外部存储的路径</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(Environment.getExternalStorageDirectory(), <span class="string">&quot;bestguo&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建文件夹</span></span><br><span class="line">        <span class="keyword">if</span>(!dir.exists()) &#123;</span><br><span class="line">            Log.d(<span class="string">&quot;isCreatedDir&quot;</span>, dir.mkdirs() + <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dir, fileName);</span><br><span class="line">        Log.d(<span class="string">&quot;file_path&quot;</span>, file.toString());</span><br><span class="line">        <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">            Log.d(<span class="string">&quot;isCreatedDir&quot;</span>, <span class="string">&quot;&quot;</span> + file.createNewFile());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建输入流</span></span><br><span class="line">        fos = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">        fos.write(context.getBytes());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行完成之后，外部存储中创建了对应的文件夹和文件</p><p><img src="/images/Android/filestorage/QQ%E6%88%AA%E5%9B%BE20210306224326.jpg" loading="lazy"></p><p><img src="/images/Android/filestorage/QQ%E6%88%AA%E5%9B%BE20210306224337.jpg" loading="lazy"></p><p>打开之后，对应的内容同样也能读取到</p><p><img src="/images/Android/filestorage/QQ%E6%88%AA%E5%9B%BE20210306224353.jpg" loading="lazy"></p><h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String <span class="title function_">readOuter</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 获取外部存储目录</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> Environment.getExternalStorageDirectory().toString();</span><br><span class="line">   <span class="comment">// 创建文件类</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path + File.separator + <span class="string">&quot;bestguo&quot;</span>, fileName);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="comment">// 创建字节流对象</span></span><br><span class="line">        fos = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span>((len = fos.read(bytes)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sb.append(fos.read(bytes, <span class="number">0</span>, len));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭</span></span><br><span class="line">            fos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击读取，发现读取得到了数据</p><p><img src="/images/Android/filestorage/QQ%E6%88%AA%E5%9B%BE20210306225031.jpg" loading="lazy"></p><p>删除外部文件的话可以直接调用 File 对象下的 delete 方法即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path + File.separator + <span class="string">&quot;bestguo&quot;</span>, fileName);</span><br><span class="line">file.delete();</span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>项目的代码都在 <a href="https://github.com/BestGuo2020/AndroidStudy">AndroidStudy</a> 的 github 仓库中。</p><p>本日志对应的代码：<a href="https://github.com/BestGuo2020/AndroidStudy/blob/main/app/src/main/java/top/bestguo/androidlayout/datastorage/FileStorageActivity.java">点我进入</a></p><p>参考链接：<a href="https://blog.csdn.net/csdn_aiyang/article/details/80665185">https://blog.csdn.net/csdn_aiyang/article/details/80665185</a></p>]]></content>
      
      
      <categories>
          
          <category> Android 开发的学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 入门篇之 Dialog 的使用</title>
      <link href="/journal/dialog/"/>
      <url>/journal/dialog/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>Dialog，即对话框，对话框在 Android 中也是非常重要。很多场景都需要用到它，不过 Android 的对话框的基本使用不会很难。今天就来介绍四种基本的用法，后续还可以自定义对话框，也就是说可以自己写一个布局来达到自己想要实现的对话框。</p><p>自己定义的对话框就单独放在下一篇日志中吧，毕竟不想写太多</p><span id="more"></span><h2 id="四种基本的对话框"><a href="#四种基本的对话框" class="headerlink" title="四种基本的对话框"></a>四种基本的对话框</h2><p>对话框总共有 4 种。第一个是基本的对话框，即对话框的正文部分只有文字，第二个和第三个对话框是单选对话框，只是第三种是需要默认指定选中哪一项，第四个是多选框，通过一个布尔类型的数组来默认哪些是被选中的。</p><p>以下将介绍和实例都一一列举出来</p><h3 id="第一种对话框"><a href="#第一种对话框" class="headerlink" title="第一种对话框"></a>第一种对话框</h3><p>第一种对话框，首先我们需要创建一个 AlertDialog.Builder 对象。默认有一个构造方法，用于指定在哪个 Activity 上面弹出对话框，和 Toast 类似，Toast 也是需要指定在哪一个 Activity 上面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AlertDialog.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlertDialog</span>.Builder(AlertDialogActivity.<span class="built_in">this</span>);</span><br></pre></td></tr></table></figure><p>对象创建完成之后，使用 setTitle 设置对话框的标题，使用 setMsg 设置消息内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">builder.setTitle(<span class="string">&quot;请回答&quot;</span>).setMessage(<span class="string">&quot;你觉得《工作细胞》全系列好看吗？&quot;</span>);</span><br></pre></td></tr></table></figure><p>对话框有三个按钮可以设置，设置了一个就会有按钮出来，不设置就没有按钮出来，这三个方法分别是 setPositiveButton、setNeutralButton、setNegativeButton。这个三个方法翻译成中文感觉怪怪的，就是一个好，中，差三个按钮嘛。这其实也不能完全通过这些方法的意思来。比如我有一个公告要告知用户，我只要一个按钮就够了，但是这三个方法选哪个呢？我觉得都可以，爱用哪个就用哪个，没必要过于纠结在这上面。</p><p>该方法需要传入两个参数，一个是按钮文字，另一个就是点击事件。由于这些方法的返回值是当前的对象，所以可以直接进行链式的调用，请看以下代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">builder.setPositiveButton(<span class="string">&quot;好看&quot;</span>, <span class="keyword">new</span> <span class="title class_">DialogInterface</span>.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(DialogInterface dialog, <span class="type">int</span> which)</span> &#123;</span><br><span class="line">            Toast.makeText(AlertDialogActivity.<span class="built_in">this</span>, <span class="string">&quot;谢谢，我们会做的越来越好！&quot;</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .setNeutralButton(<span class="string">&quot;一般&quot;</span>, <span class="keyword">new</span> <span class="title class_">DialogInterface</span>.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(DialogInterface dialog, <span class="type">int</span> which)</span> &#123;</span><br><span class="line">            Toast.makeText(AlertDialogActivity.<span class="built_in">this</span>, <span class="string">&quot;谢谢，看来还需要多改进才是！&quot;</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .setNegativeButton(<span class="string">&quot;难看&quot;</span>, <span class="keyword">new</span> <span class="title class_">DialogInterface</span>.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(DialogInterface dialog, <span class="type">int</span> which)</span> &#123;</span><br><span class="line">            Toast.makeText(AlertDialogActivity.<span class="built_in">this</span>, <span class="string">&quot;谢谢，血小板好桑心呢，555～&quot;</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).show();</span><br></pre></td></tr></table></figure><p>运行效果如下</p><p><img src="/images/Android/dialog/v2x13-pqujv.gif" loading="lazy"></p><h3 id="第二种对话框"><a href="#第二种对话框" class="headerlink" title="第二种对话框"></a>第二种对话框</h3><p>第二种对话框，也就单选的对话框，但是默认没选中。要实现这个功能需要使用 setItems 方法，该方法有两个参数，一个是字符串的数组，另一个就是选中了哪一项之后的点击事件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String[] genders = &#123;<span class="string">&quot;男&quot;</span>, <span class="string">&quot;女&quot;</span>&#125;;</span><br><span class="line">builder1.setItems(genders, <span class="keyword">new</span> <span class="title class_">DialogInterface</span>.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(DialogInterface dialog, <span class="type">int</span> which)</span> &#123;</span><br><span class="line">        Toast.makeText(AlertDialogActivity.<span class="built_in">this</span>, <span class="string">&quot;你选择了：&quot;</span> + genders[which], Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).setTitle(<span class="string">&quot;请选择性别&quot;</span>).show();</span><br></pre></td></tr></table></figure><p>运行效果如下</p><p><img src="/images/Android/dialog/ik0ol-e40f0.gif" loading="lazy"></p><h3 id="第三种对话框"><a href="#第三种对话框" class="headerlink" title="第三种对话框"></a>第三种对话框</h3><p>第三种对话框和第二种差不多，但是默认有选中哪一项。要实现这个功能需要使用 setSingleChoiceItems 方法，该方法有三个参数，比上面这个多了一个，一个是字符串的数组，一个是指定选中的哪一项，另一个就是选中了哪一项之后的点击事件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">AlertDialog.<span class="type">Builder</span> <span class="variable">builder2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlertDialog</span>.Builder(AlertDialogActivity.<span class="built_in">this</span>);</span><br><span class="line"><span class="keyword">final</span> String[] genders2 = &#123;<span class="string">&quot;男&quot;</span>, <span class="string">&quot;女&quot;</span>&#125;;</span><br><span class="line">builder2.setSingleChoiceItems(genders2, <span class="number">0</span>, <span class="keyword">new</span> <span class="title class_">DialogInterface</span>.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(DialogInterface dialog, <span class="type">int</span> which)</span> &#123;</span><br><span class="line">        Toast.makeText(AlertDialogActivity.<span class="built_in">this</span>, <span class="string">&quot;你选择了：&quot;</span> + genders2[which], Toast.LENGTH_LONG).show();</span><br><span class="line">        dialog.dismiss(); <span class="comment">// 选中完成之后才会消失</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).setTitle(<span class="string">&quot;请选择性别&quot;</span>).show().setCancelable(<span class="literal">false</span>); <span class="comment">// 这里设置了点击对话框以外的部分不消失</span></span><br></pre></td></tr></table></figure><p>运行效果如下</p><p><img src="/images/Android/dialog/tzaja-re5kv.gif" loading="lazy"></p><p>从上面的 gif 图中发现为什么我选择女的时候不发生变化？那是因为当前的代码是在点击按钮时触发的，所以里面的代码被重新执行了一遍，最后导致之前的内容全部覆盖成原始的状态。</p><blockquote><p>如果不让用户点击其它地方让对话框消失，则设置 setCalcelable 方法，传递的值为 false，请看效果图。<br><img src="/images/Android/dialog/qjj9o-os7pw.gif" loading="lazy"><br>如果要让其消失的话，使用 dismiss 方法即可。</p></blockquote><h3 id="第四种对话框"><a href="#第四种对话框" class="headerlink" title="第四种对话框"></a>第四种对话框</h3><p>第四种对话框就是多选对话框了，可以默认选中多项，选中多项是需要传递一个布尔类型的数组。要实现这个方法，则需要使用 setMultiChoiceItems 方法。一个是字符串的数组，一个是指定选中的数组，另一个就是选中了哪一项之后的点击事件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">AlertDialog.<span class="type">Builder</span> <span class="variable">builder3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlertDialog</span>.Builder(AlertDialogActivity.<span class="built_in">this</span>);</span><br><span class="line"><span class="keyword">final</span> String[] multiChoices = &#123;<span class="string">&quot;AcFun&quot;</span>, <span class="string">&quot;bilibili&quot;</span>, <span class="string">&quot;嘀哩嘀哩&quot;</span>, <span class="string">&quot;樱花动漫&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">final</span> <span class="type">boolean</span>[] multiChecked = <span class="keyword">new</span> <span class="title class_">boolean</span>[multiChoices.length];</span><br><span class="line">builder3.setTitle(<span class="string">&quot;你喜欢在哪个网站追番&quot;</span>).setMultiChoiceItems(multiChoices, multiChecked, <span class="keyword">new</span> <span class="title class_">DialogInterface</span>.OnMultiChoiceClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(DialogInterface dialog, <span class="type">int</span> which, <span class="type">boolean</span> isChecked)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> isChecked ? <span class="string">&quot;你选择了：&quot;</span> + multiChoices[which] : <span class="string">&quot;你反选了：&quot;</span> + multiChoices[which];</span><br><span class="line">        Toast.makeText(AlertDialogActivity.<span class="built_in">this</span>, msg, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.setPositiveButton(<span class="string">&quot;确认&quot;</span>, <span class="keyword">new</span> <span class="title class_">DialogInterface</span>.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(DialogInterface dialog, <span class="type">int</span> which)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用字符串构建类，将已经选中的内容添加进去</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="comment">// 循环遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; multiChecked.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 如果选中了就添加进到字符串构建类中</span></span><br><span class="line">            <span class="keyword">if</span>(multiChecked[i])&#123;</span><br><span class="line">                sb.append(i == multiChecked.length - <span class="number">1</span> ? multiChoices[i] : multiChoices[i] + <span class="string">&quot;，&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将构建好的字符串用 toString 方法打印出来</span></span><br><span class="line">        Toast.makeText(AlertDialogActivity.<span class="built_in">this</span>, <span class="string">&quot;你喜欢在“&quot;</span> + sb.toString() + <span class="string">&quot;”追番&quot;</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).show();</span><br></pre></td></tr></table></figure><p>不过在 2 和 3 的示例中，我们发现并没有加确定这些按钮呀。那我可不可以添加一个？答案是可以的，根据现有的场景是否添加按钮即可。比如当前的励志，选好之后要进行一个总结，我们就将选中的通过 Toast 来全部展示出来。</p><p>运行效果如下</p><p><img src="/images/Android/dialog/4fni0-whdz1.gif" loading="lazy"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>项目的代码都在 <a href="https://github.com/BestGuo2020/AndroidStudy">AndroidStudy</a> 的 github 仓库中。</p><p>本日志对应的代码：<a href="https://github.com/BestGuo2020/AndroidStudy/blob/main/app/src/main/java/top/bestguo/androidlayout/dialog/AlertDialogActivity.java">点我进入</a></p>]]></content>
      
      
      <categories>
          
          <category> Android 开发的学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 入门篇之 RecycleView 组件的使用</title>
      <link href="/journal/recycleview-component/"/>
      <url>/journal/recycleview-component/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="我想要说"><a href="#我想要说" class="headerlink" title="我想要说"></a>我想要说</h2><p>RecycleView 它是一个多种视图的总称，它可以展示像我上个月学习到的 ListView、GirdView，还有探索的瀑布流、各种布局混杂在一起。之前在了解 RecycleView 的时候，它也确实能做到。不过最近我在做一个入门的 APP ，发现就是横向的 ListView 无法直接去实现，然后发现 RecycleView 就能够去实现我想要的布局，才发现 RecycleView 的重要性。</p><p>不过 RecycleView 的灵活程度也特别的高，视图的复用管理程度也很高，难度可能会高一些，自己实现想要的布局还需要多花费一些时间的学了大概两三周的 Android 发现绝大部分都是需要去自己继承类来重写某些方法，也相当于是对 java 面向对象开发基础部分的一个复习吧。感觉 RecycleView 的内容会有一些多，所以记录的内容也会很多。</p><p>目前学习了三种布局方式：LinearLayoutManager、GridLayoutManager 和 StaggeredGridLayoutManager。将会主要以这三种布局管理进行说明。</p><p>好啦，现在正式开始吧。</p><span id="more"></span><h2 id="开始的前提"><a href="#开始的前提" class="headerlink" title="开始的前提"></a>开始的前提</h2><p>在开始 RecycleView 的学习之旅之前，在 build.gradle 中添加一下依赖</p><p><img src="/images/Android/recycleview/QQ%E6%88%AA%E5%9B%BE20210210170122.jpg" loading="lazy"></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span> <span class="string">&#x27;com.android.support:design:26.0.1&#x27;</span></span><br></pre></td></tr></table></figure><p>注意：第一位的 26 对应的是 compileSdkVersion 的版本号。</p><h3 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h3><h4 id="RecyclerView-相关"><a href="#RecyclerView-相关" class="headerlink" title="RecyclerView 相关"></a>RecyclerView 相关</h4><p>在重新编译的时候发现找不到，可以参考以下的解决办法<br><img src="/images/Android/recycleview/QQ%E6%88%AA%E5%9B%BE20210210171636.jpg" loading="lazy"><br>通过修改版本号的后两位应该能够解决此问题。</p><h4 id="OOM-问题"><a href="#OOM-问题" class="headerlink" title="OOM 问题"></a>OOM 问题</h4><p>OOM，也就是 Out of memory，即内存超出。</p><p>当使用图片和 addItemDecoration 方法时可能会导致内存溢出，目前还没有找到具体的解决办法。但是为了学习 RecyclerView 暂时在使用 List 布局时使用</p><p>唯一的解决办法就是在使用图片时不使用 addItemDecoration 方法</p><p>可能出现的错误如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">02-19 10:50:44.230 4504-4787/top.bestguo.androidlayout E/Bitmap: OOM allocating Bitmap with dimensions 15859853 x 15895097</span><br></pre></td></tr></table></figure><p>2 月 20 号，好吧，我知道我哪里有问题了。要正确的获取配置文件的像素单位需要用以下方法获取😭😭😭，这样就不会出现 OOM 的问题了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getResources().getDimensionPixelOffset(R.dimen.xxx);</span><br></pre></td></tr></table></figure><p>这也是导致出现 OOM 的原因，不排除有其它的可能导致 OOM 错误的发生。</p><h4 id="AppCompatTextView-无法实例化"><a href="#AppCompatTextView-无法实例化" class="headerlink" title="AppCompatTextView 无法实例化"></a>AppCompatTextView 无法实例化</h4><p>在 RecyclerView 的依赖导入进来，可能会爆出以下错误，虽然会出现 AppCompatTextView 无法实例化的情况，在经过测试的时候这并不会影响到程序的正常运行<br><img src="/images/Android/recycleview/QQ%E6%88%AA%E5%9B%BE20210219203734.jpg" loading="lazy"><br>所以，直接不管它。😜😜😜</p><h2 id="RecyclerView-方法介绍"><a href="#RecyclerView-方法介绍" class="headerlink" title="RecyclerView 方法介绍"></a>RecyclerView 方法介绍</h2><p>在学习时，我学习到 RecyclerView 的三种方法</p><h3 id="setLayoutManager-方法"><a href="#setLayoutManager-方法" class="headerlink" title="setLayoutManager 方法"></a>setLayoutManager 方法</h3><p>参数：LayoutManager<br>该方法用于设置哪种类型的布局，通过实例化布局类的方式来创建布局。</p><p>下面将会介绍三种布局管理类。到后面厉害的话，你就直接写一个自己个 LayoutManager 出来，<del>给我们这群懒人用（bushi）</del></p><h3 id="setAdapter-方法"><a href="#setAdapter-方法" class="headerlink" title="setAdapter 方法"></a>setAdapter 方法</h3><p>在学习 RecyclerView 之前，我们已经使用过这个方法。并且还是继承了 BaseAdapter 这个方法，然后还自己写了一个 ViewHolder。Adapter 是用来将数据展示到 item 当中的，ViewHolder 就是将每一个 item 中的组件给封装起来，用于后续调用的。</p><p>但是，在这里面，我们不能够继承自 BaseAdapter，那要写很多东西。我们需要继承自 RecyclerView.Adapter 这个抽象类，该抽象类在 RecyclerView 的内部，所以是内部类，而且还是带泛型的，该类的泛型必须是继承自 Recycler.ViewHolder 类的。所以我们自己创建 ViewHolder 类时还需继承自该类。</p><p>需要实现的方法有这三个：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">XXXAdapter</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.Adapter &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> RecyclerView.ViewHolder <span class="title function_">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="type">int</span> viewType)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onBindViewHolder</span><span class="params">(RecyclerView.ViewHolder holder, <span class="type">int</span> position)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getItemCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承自 ViewHolder 的时候，写法和之前自己写 ViewHolder 有些差别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">LinearViewHolder</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.ViewHolder &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// StatementComponent......</span></span><br><span class="line"></span><br><span class="line">    LinearViewHolder(View itemView) &#123;</span><br><span class="line">        <span class="built_in">super</span>(itemView);</span><br><span class="line">        <span class="comment">// findViewToDo......</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后续的写法将在示例中详细的解释</p><h3 id="setItemDecoration"><a href="#setItemDecoration" class="headerlink" title="setItemDecoration"></a>setItemDecoration</h3><p>这个方法用于设置 item 的样式，不过我只学习到利用这个来实现边框🤭🤭🤭，后面在研究的时候将会单独的写一篇日志，做一些好玩的东西出来。但是也正是因为设置了这个才导致了内存不足的问题。害，这个问题后续在解决吧。</p><h2 id="布局管理类介绍"><a href="#布局管理类介绍" class="headerlink" title="布局管理类介绍"></a>布局管理类介绍</h2><h3 id="LinearLayoutManager"><a href="#LinearLayoutManager" class="headerlink" title="LinearLayoutManager"></a>LinearLayoutManager</h3><p>这是一个线性布局的管理类</p><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>它有两种常用的构造方法</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>public LinearLayoutManager(Context context)</code></td><td>一个参数，传入当前的 Activity 对象，默认是垂直且顺序的排列下来。</td></tr><tr><td><code>public LinearLayoutManager(Context context, int orientation, boolean reverseLayout)</code></td><td>除了可以传递 Activity 还能指定是水平排列和竖直排列，还能指定是否逆序。</td></tr></tbody></table><blockquote><p>在指定水平或者垂直的方式时，这些布局管理类中都有 2 个常量用来指定是否垂直和水平，水平布局就是按照 <code>XXXManager.HORIZENTAL</code> 的格式，垂直布局就是 <code>XXXManager.VERTICAL</code> 的格式</p></blockquote><p>它的展示效果和之前学习的 ListView 的效果是一样的。不过它比 ListView 更厉害，这可以水平排列的。在没有 RecyclerView 之前需要引入第三方的包来使得 ListView 横向排列，现在有了这个是非常方便的。</p><h3 id="GridLayoutManager"><a href="#GridLayoutManager" class="headerlink" title="GridLayoutManager"></a>GridLayoutManager</h3><p>这是一个网格布局的管理类，它有两种常用的构造方法。不过查看源码发现它是继承自 LinearLayoutManager 类的，嘻嘻。</p><h4 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h4><p>它也具有两种构造方法。</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>GridLayoutManager(Context context, int spanCount)</code></td><td>两个参数，传入当前的 Activity 对象并且指定一行几列，默认是垂直且顺序的排列下来。</td></tr><tr><td><code>public GridLayoutManager(Context context, int spanCount, int orientation, boolean reverseLayout)</code></td><td>除了可以传递以上参数以外，还能指定水平和垂直的方式，以及是否逆序</td></tr></tbody></table><p>第二个构造方法也就是 LinearLayoutManger 中的大同小异。</p><h3 id="StaggeredGridLayoutManager"><a href="#StaggeredGridLayoutManager" class="headerlink" title="StaggeredGridLayoutManager"></a>StaggeredGridLayoutManager</h3><p>这是瀑布流的一个管理类，不过它的本意并不是瀑布，而是错开的网格布局。瀑布流在 app 中特别常见，比如我们的淘宝，拼多多这种电商 app 中就使用了这种瀑布流的布局形式。</p><h4 id="构造方法-2"><a href="#构造方法-2" class="headerlink" title="构造方法"></a>构造方法</h4><p>它具有一种构造方法。</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>StaggeredGridLayoutManager(int spanCount, int orientation)</code></td><td>两个参数，一个指定一行几列，另一个指定排列方式。</td></tr></tbody></table><blockquote><p>不过很遗憾，RecyclerView 并不像 ListView 和 GridView 一样有点击事件。不过没关系，我们可以自己创造一个点击事件。利用接口回调的方式自己写一个点击事件的方法。</p></blockquote><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>以下的示例展示出 LinearLayoutManager、GridLayoutManager 和 StaggeredGridLayoutManager 三种布局的效果</p><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><h4 id="布局文件"><a href="#布局文件" class="headerlink" title="布局文件"></a>布局文件</h4><h5 id="展示线性布局的文件"><a href="#展示线性布局的文件" class="headerlink" title="展示线性布局的文件"></a>展示线性布局的文件</h5><p>该 activity 的布局文件的内容非常简单，里面是一个 RecyclerView 标签</p><p>对应的 activity_linear_recycler_view.xml 如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;#eee&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/rv_list&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="item-布局文件"><a href="#item-布局文件" class="headerlink" title="item 布局文件"></a>item 布局文件</h5><p>在 item 中，我给它放了一个简单的 TextView 来放置 item 中的样式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;#fff&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_recycle_item&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:padding</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;测试文字&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;@color/colorBlack&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;20sp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="java-代码"><a href="#java-代码" class="headerlink" title="java 代码"></a>java 代码</h4><h5 id="Activity-代码"><a href="#Activity-代码" class="headerlink" title="Activity 代码"></a>Activity 代码</h5><p>获取到 RecyclerView 这个组件时，这两个步骤是必须的，顺序可以打乱。</p><ol><li>设置布局管理类</li><li>设置 Adapter</li></ol><p>可选步骤<br>3. 设置偏移量等布局方式</p><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinearRecyclerViewActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RecyclerView rv_list;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_linear_recycler_view);</span><br><span class="line"></span><br><span class="line">        rv_list = findViewById(R.id.rv_list);</span><br><span class="line">        <span class="comment">// 添加布局管理器，这里添加的是线性布局管理器，默认为竖直方向</span></span><br><span class="line">        <span class="comment">// rv_list.setLayoutManager(new LinearLayoutManager(this));</span></span><br><span class="line">        <span class="comment">// 将其设置成水平方向，默认不逆序展示</span></span><br><span class="line">        rv_list.setLayoutManager(<span class="keyword">new</span> <span class="title class_">LinearLayoutManager</span>(<span class="built_in">this</span>, LinearLayoutManager.HORIZONTAL, <span class="literal">false</span>));</span><br><span class="line">        <span class="comment">// 添加一个 Adapter 用于渲染全部的 item</span></span><br><span class="line">        rv_list.setAdapter(<span class="keyword">new</span> <span class="title class_">LinearAdapter</span>(<span class="built_in">this</span>));</span><br><span class="line">        <span class="comment">// 添加一个 Decoration</span></span><br><span class="line">        rv_list.addItemDecoration(<span class="keyword">new</span> <span class="title class_">MyDecoration</span>());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上的代码指定了一个 LinearLayoutManager 的布局管理类，传入当前的实例对象，设置为水平摆放且不设置为逆序。<br>设置的 Adapter 需要我们继承自 RecyclerView.Adapter 类，该类是 RecyclerView 中的内部类。</p><p>在重写 Adapter 之前，我们需要自己写一个 ViewHolder，并且继承自 RecyclerView.ViewHolder。本示例自己写了一个 LinearViewHolder 类</p><p>相关的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义 LinearViewHolder</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinearViewHolder</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.ViewHolder &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView textView;</span><br><span class="line"></span><br><span class="line">    LinearViewHolder(View itemView) &#123;</span><br><span class="line">        <span class="built_in">super</span>(itemView);</span><br><span class="line">        textView = itemView.findViewById(R.id.tv_recycle_item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TextView <span class="title function_">getTextView</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> textView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义 ViewHolder 完成之后，此时我们需要继承一个 RecyclerView.Adapter，本示例中自己编写了 LinearAdapter 类。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建的 Adapter</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinearAdapter</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.Adapter&lt;LinearViewHolder&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line"></span><br><span class="line">    LinearAdapter(Context context)&#123;</span><br><span class="line">        <span class="built_in">this</span>.context = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> LinearViewHolder <span class="title function_">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="type">int</span> viewType)</span> &#123;</span><br><span class="line">        <span class="comment">// 将 layout_list_recycler_item.xml 布局文件填充到 RecyclerView 中。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LinearViewHolder</span>(LayoutInflater.from(context).inflate(R.layout.layout_list_recycler_item, parent, <span class="literal">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onBindViewHolder</span><span class="params">(LinearViewHolder holder, <span class="keyword">final</span> <span class="type">int</span> position)</span> &#123;</span><br><span class="line">        holder.getTextView().setText(<span class="string">&quot;菜单选项_&quot;</span> + position);</span><br><span class="line">        holder.itemView.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                Toast.makeText(LinearRecyclerViewActivity.<span class="built_in">this</span>, <span class="string">&quot;点击了第 &quot;</span> + position + <span class="string">&quot; 项&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置多少个 item</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getItemCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>onCreateViewHolder 方法中将我们自己写好的 LinearViewHolder 类实例化出去即可，同时也能够使用 ViewType 来返回不同的 ViewHolder 实现更加复杂的布局方式。</p><p>onBindViewHolder 方法就是给对每一个 item 项进行设置。比如以上的示例，可以设置字体，设置一个点击的监听事件等等。</p><p>getItemCount 方法是返回多少个 item。</p><p>自己创建了一个 Decoration，在此之前，设置了一个灰色的背景色。通过偏移量将灰色的背景展示出来，从而使用户感受到一种错觉，感觉就是有边框一样。<br>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个自己的 Decoration</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyDecoration</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.ItemDecoration &#123;</span><br><span class="line">    <span class="comment">// 设置偏移量</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getItemOffsets</span><span class="params">(Rect outRect, View view, RecyclerView parent, RecyclerView.State state)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.getItemOffsets(outRect, view, parent, state);</span><br><span class="line">        outRect.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, getResources().getDimensionPixelOffset(R.dimen.divideHeight));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h4><p><img src="/images/Android/recycleview/nvnpd-cc8xg.gif" loading="lazy"></p><h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><blockquote><p>示例 2 和 示例 3 都差不多，继承的 Adapter 和 ViewHolder 都是来自 RecyclerView 中的内部类，很多部分，很多写法其实都是大同小异的。后面的布局方式也就不详细介绍了。</p></blockquote><h4 id="布局文件-1"><a href="#布局文件-1" class="headerlink" title="布局文件"></a>布局文件</h4><h5 id="展示网格布局的文件"><a href="#展示网格布局的文件" class="headerlink" title="展示网格布局的文件"></a>展示网格布局的文件</h5><p>activity_grid_recycler_view.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;@color/colorGray&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/recycler_view_grid&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="item-布局文件-1"><a href="#item-布局文件-1" class="headerlink" title="item 布局文件"></a>item 布局文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span> <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/header&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@color/colorAccent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:scaleType</span>=<span class="string">&quot;centerCrop&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:padding</span>=<span class="string">&quot;7dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/name&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;测试文字&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;14dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="java-代码-1"><a href="#java-代码-1" class="headerlink" title="java 代码"></a>java 代码</h4><h5 id="Activity-代码-1"><a href="#Activity-代码-1" class="headerlink" title="Activity 代码"></a>Activity 代码</h5><p>当前示例中使用的 GridLayoutManager 类，传入了当前的 Activity 类，还指定了一行 3 列。如果有逆序和水平的需要，使用 HORIZENTAL 常量、设置成 true 即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GridRecyclerViewActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RecyclerView recyclerView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_grid_recycler_view);</span><br><span class="line"></span><br><span class="line">        recyclerView = findViewById(R.id.recycler_view_grid);</span><br><span class="line">        recyclerView.setLayoutManager(<span class="keyword">new</span> <span class="title class_">GridLayoutManager</span>(<span class="built_in">this</span>, <span class="number">3</span>));</span><br><span class="line">        recyclerView.setAdapter(<span class="keyword">new</span> <span class="title class_">GridRecyclerViewAdapter</span>(<span class="built_in">this</span>));</span><br><span class="line">        recyclerView.addItemDecoration(<span class="keyword">new</span> <span class="title class_">RecyclerView</span>.ItemDecoration() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getItemOffsets</span><span class="params">(Rect outRect, View view, RecyclerView parent, RecyclerView.State state)</span> &#123;</span><br><span class="line">                <span class="built_in">super</span>.getItemOffsets(outRect, view, parent, state);</span><br><span class="line">                <span class="type">int</span> <span class="variable">gap</span> <span class="operator">=</span> getResources().getDimensionPixelOffset(R.dimen.space);</span><br><span class="line">                outRect.set(gap, gap, gap, gap);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Adapter-代码"><a href="#Adapter-代码" class="headerlink" title="Adapter 代码"></a>Adapter 代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GridRecyclerViewAdapter</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.Adapter&lt;GridRecyclerViewAdapter.GridViewHolder&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> GridRecyclerViewAdapter.GridViewHolder <span class="title function_">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="type">int</span> viewType)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">GridViewHolder</span>(LayoutInflater.from(context).inflate(R.layout.layout_grid_item, parent, <span class="literal">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onBindViewHolder</span><span class="params">(GridRecyclerViewAdapter.GridViewHolder holder, <span class="keyword">final</span> <span class="type">int</span> position)</span> &#123;</span><br><span class="line">        <span class="comment">// 加载网络图片</span></span><br><span class="line">        Glide.with(context).load(<span class="string">&quot;http://www.topacg.com/wp-content/uploads&quot;</span> +</span><br><span class="line">                <span class="string">&quot;/2020/03/frc-11c619718c036bf579c246cdd07e6d77.jpeg&quot;</span>).into(holder.imageView);</span><br><span class="line">        holder.textView.setText(<span class="string">&quot;灶门祢豆子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getItemCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">GridViewHolder</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.ViewHolder &#123;</span><br><span class="line"></span><br><span class="line">        ImageView imageView;</span><br><span class="line">        TextView textView;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">GridViewHolder</span><span class="params">(View itemView)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(itemView);</span><br><span class="line">            imageView = itemView.findViewById(R.id.header);</span><br><span class="line">            textView = itemView.findViewById(R.id.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行效果-1"><a href="#运行效果-1" class="headerlink" title="运行效果"></a>运行效果</h4><p><img src="/images/Android/recycleview/Screenshot_20210220_115145_top.bestguo.androidlay.jpg" loading="lazy"></p><h3 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h3><h4 id="布局文件-2"><a href="#布局文件-2" class="headerlink" title="布局文件"></a>布局文件</h4><h5 id="展示瀑布流布局的文件"><a href="#展示瀑布流布局的文件" class="headerlink" title="展示瀑布流布局的文件"></a>展示瀑布流布局的文件</h5><p>activity_pu_recycler_view.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;@color/colorGray&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/recycler_view_pu&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="item-布局文件-2"><a href="#item-布局文件-2" class="headerlink" title="item 布局文件"></a>item 布局文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span> <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/image_asd&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="java-代码-2"><a href="#java-代码-2" class="headerlink" title="java 代码"></a>java 代码</h4><h5 id="Activity-代码-2"><a href="#Activity-代码-2" class="headerlink" title="Activity 代码"></a>Activity 代码</h5><p>当前示例中使用的 GridLayoutManager 类，指定了一行 3 列，设置成垂直的瀑布流效果。如果有水平的需要，使用 HORIZENTAL 常量即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PuRecyclerViewActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RecyclerView recyclerView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_pu_recycler_view);</span><br><span class="line"></span><br><span class="line">        recyclerView = findViewById(R.id.recycler_view_pu);</span><br><span class="line">        recyclerView.setLayoutManager(<span class="keyword">new</span> <span class="title class_">StaggeredGridLayoutManager</span>(<span class="number">3</span>, StaggeredGridLayoutManager.VERTICAL));</span><br><span class="line">        recyclerView.setAdapter(<span class="keyword">new</span> <span class="title class_">PuAdapter</span>(<span class="built_in">this</span>));</span><br><span class="line">        recyclerView.addItemDecoration(<span class="keyword">new</span> <span class="title class_">RecyclerView</span>.ItemDecoration() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getItemOffsets</span><span class="params">(Rect outRect, View view, RecyclerView parent, RecyclerView.State state)</span> &#123;</span><br><span class="line">                <span class="built_in">super</span>.getItemOffsets(outRect, view, parent, state);</span><br><span class="line">                <span class="type">int</span> <span class="variable">gap</span> <span class="operator">=</span> getResources().getDimensionPixelOffset(R.dimen.space);</span><br><span class="line">                outRect.set(gap, gap, gap, gap);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Adapter-代码-1"><a href="#Adapter-代码-1" class="headerlink" title="Adapter 代码"></a>Adapter 代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PuAdapter</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.Adapter&lt;PuAdapter.PuViewHolder&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PuAdapter</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.context = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PuViewHolder <span class="title function_">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="type">int</span> viewType)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PuViewHolder</span>(LayoutInflater.from(context).inflate(R.layout.layout_pu_recycler_item, parent, <span class="literal">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onBindViewHolder</span><span class="params">(PuViewHolder holder, <span class="type">int</span> position)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (position % <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                Glide.with(context).load(<span class="string">&quot;https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fattachments.gfan.com%2Fforum%2F201501%2F15%2F1&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;05418z33cyjacahzodgc3.jpg&amp;refer=http%3A%2F%2Fattachments.gfan.com&amp;a&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;pp=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg&quot;</span>).into(holder.imageView);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                Glide.with(context).load(<span class="string">&quot;https://ss1.baidu.com/9vo3dSag_xI4khGko9WTAnF&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;6hhy/zhidao/pic/item/4610b912c8fcc3ce1a3113699045d688d53f20f3.jpg&quot;</span>).into(holder.imageView);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                Glide.with(context).load(<span class="string">&quot;https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fblog%2F201307%2F&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;23%2F20130723121038_WxiVJ.jpeg&amp;refer=http%3A%2F%2Fb-ssl.duitang.com&amp;app&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg&quot;</span>).into(holder.imageView);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getItemCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">21</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">PuViewHolder</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.ViewHolder &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> ImageView imageView;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">PuViewHolder</span><span class="params">(View itemView)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(itemView);</span><br><span class="line">            imageView = itemView.findViewById(R.id.image_asd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行效果-2"><a href="#运行效果-2" class="headerlink" title="运行效果"></a>运行效果</h4><p><img src="/images/Android/recycleview/Screenshot_20210220_115200_top.bestguo.androidlay.jpg" loading="lazy"></p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>上文也提到过 RecyclerView 并没有针对 item 来专门指定事件监听的方法。但是我们可以自己写一个接口，然后去实现这个接口，最后进行接口回调。（其实所谓的接口回调就是利用了面向对象的多态性，子类可以类型提升为父类的类型，父类强制转换成子类。）这样的目的目前是可以省去你在自己的 Adapter 类中频繁的修改代码，同时也降低的代码的耦合性。</p><p>现在我们以示例 2 的代码来举例。在下面的代码中，我们需要加载网络图片，那加载网络图片的时候肯定是需要得到它的组件。所以，我们在加载网络图片之后可以设置其点击的监听事件。以下我设置了两个事件，一个短按，一个长按。</p><p>事先在内部类中写好两个接口，并且利用该类型声明好成员变量。代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GridRecyclerViewAdapter</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.Adapter&lt;GridRecyclerViewAdapter.GridViewHolder&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line">    <span class="keyword">private</span> ItemOnClickListener clickListener; <span class="comment">// 短按事件</span></span><br><span class="line">    <span class="keyword">private</span> ItemOnLongClickListener longClickListener; <span class="comment">// 长按事件</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法，一个用于传递 Activity 类，一个用于传入一个已实现的该接口的点击类，另一个用于传入一个已实现的该接口长按的点击类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GridRecyclerViewAdapter</span><span class="params">(Context context, ItemOnClickListener clickListener, ItemOnLongClickListener longClickListener)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.context = context;</span><br><span class="line">        <span class="built_in">this</span>.clickListener = clickListener;</span><br><span class="line">        <span class="built_in">this</span>.longClickListener = longClickListener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onBindViewHolder</span><span class="params">(GridRecyclerViewAdapter.GridViewHolder holder, <span class="keyword">final</span> <span class="type">int</span> position)</span> &#123;</span><br><span class="line">        <span class="comment">// 加载网络图片</span></span><br><span class="line">        Glide.with(context).load(<span class="string">&quot;http://www.topacg.com/wp-content/uploads&quot;</span> +</span><br><span class="line">                <span class="string">&quot;/2020/03/frc-11c619718c036bf579c246cdd07e6d77.jpeg&quot;</span>).into(holder.imageView);</span><br><span class="line">        holder.textView.setText(<span class="string">&quot;灶门祢豆子&quot;</span>);</span><br><span class="line">        <span class="comment">// 短按事件</span></span><br><span class="line">        holder.imageView.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="comment">// 短按事件接口回调</span></span><br><span class="line">                clickListener.click(v, position);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 长按事件</span></span><br><span class="line">        holder.imageView.setOnLongClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnLongClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onLongClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="comment">// 长按事件接口回调</span></span><br><span class="line">                <span class="keyword">return</span> longClickListener.click(v, position);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 点击事件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">ItemOnClickListener</span>&#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">click</span><span class="params">(View v, <span class="type">int</span> position)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 长按点击事件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">ItemOnLongClickListener</span>&#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="title function_">click</span><span class="params">(View v, <span class="type">int</span> position)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在 Activity 类中实现短按和长按的类，将其实例化传入构造方法中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GridRecyclerViewActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RecyclerView recyclerView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_grid_recycler_view);</span><br><span class="line"></span><br><span class="line">        recyclerView = findViewById(R.id.recycler_view_grid);</span><br><span class="line">        recyclerView.setLayoutManager(<span class="keyword">new</span> <span class="title class_">GridLayoutManager</span>(<span class="built_in">this</span>, <span class="number">3</span>));</span><br><span class="line">        recyclerView.setAdapter(<span class="keyword">new</span> <span class="title class_">GridRecyclerViewAdapter</span>(<span class="built_in">this</span>, <span class="keyword">new</span> <span class="title class_">ClickListener</span>(), <span class="keyword">new</span> <span class="title class_">LongClickListener</span>()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现短按的点击事件接口</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">ClickListener</span> <span class="keyword">implements</span> <span class="title class_">GridRecyclerViewAdapter</span>.ItemOnClickListener &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">click</span><span class="params">(View v, <span class="type">int</span> position)</span> &#123;</span><br><span class="line">            Toast.makeText(GridRecyclerViewActivity.<span class="built_in">this</span>, <span class="string">&quot;我是祢豆子 &quot;</span> + (position + <span class="number">1</span>) + <span class="string">&quot; 号&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现长按的点击事件接口</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">LongClickListener</span> <span class="keyword">implements</span> <span class="title class_">GridRecyclerViewAdapter</span>.ItemOnLongClickListener &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">click</span><span class="params">(View v, <span class="type">int</span> position)</span> &#123;</span><br><span class="line">            <span class="type">ImageView</span> <span class="variable">imageView</span> <span class="operator">=</span> v.findViewById(R.id.header);</span><br><span class="line">            Glide.with(GridRecyclerViewActivity.<span class="built_in">this</span>).load(<span class="string">&quot;http://pic.17qq.com/img_qqtouxiang/87450489.jpeg&quot;</span>).into(imageView);</span><br><span class="line">            Toast.makeText(GridRecyclerViewActivity.<span class="built_in">this</span>, <span class="string">&quot;嘻嘻，偷偷抱走&quot;</span> + (position + <span class="number">1</span>) + <span class="string">&quot;号祢豆子&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后的效果如下，没错，又是我可爱的祢豆子还有善逸拿来举例😝😝😝</p><p><img src="/images/Android/recycleview/pbf7o-6w1k4.gif" loading="lazy"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>项目的代码都在 <a href="https://github.com/BestGuo2020/AndroidStudy">AndroidStudy</a> 的 github 仓库中。</p><p>本日志对应的代码：<a href="https://github.com/BestGuo2020/AndroidStudy/tree/main/app/src/main/java/top/bestguo/androidlayout/recyclerview">点我进入</a></p>]]></content>
      
      
      <categories>
          
          <category> Android 开发的学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R 对象突然消失的灵异事件</title>
      <link href="/journal/R-not-found/"/>
      <url>/journal/R-not-found/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="事件发生的原因"><a href="#事件发生的原因" class="headerlink" title="事件发生的原因"></a>事件发生的原因</h2><p>昨天下午，我突然和 R 对象玩的好好的，然而她确突然的消失了。</p><p><img src="/images/problem/dismiss-R/QQ%E6%88%AA%E5%9B%BE20210210102419.jpg" loading="lazy"></p><p>R 对象她可是我不能缺少的，她能帮助我获取布局文件<del>（哦，原来是编程，那没事了）</del>以及通过 id 的方式来获取我创建的组件。我在重新构建项目时，突然给我报错。还说什么 Cannot resolve symbol R ，甚至还建议我找同名小三、以及建议我建立一个R的“墓碑”，这种蠢事，我是绝对不会做的。</p><span id="more"></span><p>这些建议分别如下：</p><p><img src="/images/problem/dismiss-R/%E9%80%89%E6%8B%A9%E4%BD%A0%E7%9A%84%E5%90%8C%E5%90%8D%E5%B0%8F%E4%B8%89.jpg" loading="lazy"></p><p>以上建议等于没有建议。<br>所以，我坚信 R 对象并没有消失，我一定要把她找回来。</p><h2 id="错误的线索"><a href="#错误的线索" class="headerlink" title="错误的线索"></a>错误的线索</h2><p>其实我在发现 R 对象消失的时候，我一直在寻找 R 对象不存在的解决办法。后面才发现，我找错了！R 对象在写着写着就直接没了的情况也是非常之少见的。</p><p><img src="/images/problem/dismiss-R/ku.gif" loading="lazy"></p><p>这条路根本就是迷惑性的路子，走来走去又走回原处。后面我们从消失的真正的根源开始找起。</p><p><img src="/images/problem/dismiss-R/QQ%E6%88%AA%E5%9B%BE20210210104633.jpg" loading="lazy"></p><p>看了错误信息突然发现了一些破绽，随后去问问度娘，发现 R 消失的问题居然是我的布局文件有错误才导致的，所以才有这种 No resource found 这种问题。</p><h2 id="正确的线索"><a href="#正确的线索" class="headerlink" title="正确的线索"></a>正确的线索</h2><p>在发现是布局文件出现了问题时，我重新定位到错误中。通过上面的错误信息发现是找不到 ‘@id/add_btn’ 这个值，可是在我的代码中发现是有的。下面的代码明明就有啊。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加的城市 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ListView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/addedCity&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_above</span>=<span class="string">&quot;@id/add_btn&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_below</span>=<span class="string">&quot;@id/return_btn&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--&amp;lt;!&amp;ndash; 添加按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/add_btn&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;55dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_alignParentBottom</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>后面在对错误信息进行一个搜索，发现需要在“@”后面加上一个“+”号，也就是 layout_above 和 layout_below，然后我全部加上去，重新构建了一下。发现还真的就找回来了，代码也不报错了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android:layout_above=&quot;@+id/add_btn&quot;</span><br><span class="line">android:layout_below=&quot;@+id/return_btn&quot;</span><br></pre></td></tr></table></figure><p><img src="/images/problem/dismiss-R/QQ%E6%88%AA%E5%9B%BE20210210110352.jpg" loading="lazy"></p><h3 id="后续思考"><a href="#后续思考" class="headerlink" title="后续思考"></a>后续思考</h3><p>直到今天上午，才明白 R 对象消失的原因。因为这些 xml 布局文件是从上而下执行的，而上面的 id 为 id/add_btn 是在下面，并且我们是在此之前进行寻找的。所以就会提示找不到，为了防止这种情况的发生，直接在 layout_above 的 id 的“@”后面加上一个“+”号也能解决。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android:layout_above=&quot;@+id/add_btn&quot;</span><br><span class="line">android:layout_below=&quot;@id/return_btn&quot;</span><br></pre></td></tr></table></figure><p>R 对象总算是找回来了，开心心😊😊😊</p><h2 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h2><p><a href="https://blog.csdn.net/asdf9328/article/details/50360358">https://blog.csdn.net/asdf9328/article/details/50360358</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程常见问题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 数据存储之 SharedPreferences</title>
      <link href="/journal/shared-preferences/"/>
      <url>/journal/shared-preferences/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>在学习完之前的内容，发现没有对组件中的输入的数据进行存储。所以，在这里会提到数据存储。可是输出存储有很多种，上面的 SharedPreferences 就是其中的一个、还有使用数据库（Mysql、sqlite）以及使用文件的形式保存文件。</p><p>其实 SharedPreferences 保存的方式，它也是用文件保存。只是它可是用 xml 文件来保存的，一般这个文件我们是无法看到的。而且由于现在的安卓手机的安全性增强，那些处于系统目录下的文件都不能直接去查看（其实也没必要去看）。</p><p>SharedPreference 的使用场景非常广泛。可以保存该应用相关信息，以及 QQ 和 微信中的免密登录等等……，不过它的用法也非常的简单。咱们现在开始吧</p><span id="more"></span><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>本实例中声明了 4 个组件，分别是一个可编辑的文本框，两个按钮和一个显示文字的组件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">&quot;15dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/et_name&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">&quot;输入内容&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/btn_save&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;保存&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/btn_show&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;显示&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;10dp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_show&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;10dp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>除了声明这些组件之外，还要声明两个对象：</p><ul><li>SharedPreferences</li><li>SharedPreferences.Editor</li></ul><p>SharedPreferences 对象用来加载自定义的 xml 文件，通过 getSharedPreferences 方法来获取这个对象。<br>如果要编辑这个配置文件，则需要调用 getSharedPreferences 中的 editor 方法即可。</p><p>完整的 java 代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bestguo.androidlayout.datastorage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.SharedPreferences;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.bestguo.androidlayout.R;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SharedPreferenceActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 基本组件声明</span></span><br><span class="line">    <span class="keyword">private</span> EditText etName;</span><br><span class="line">    <span class="keyword">private</span> Button btnSave, btnShow;</span><br><span class="line">    <span class="keyword">private</span> TextView tvShow;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// SharedPreferences 对象声明</span></span><br><span class="line">    <span class="keyword">private</span> SharedPreferences sharedPreferences;</span><br><span class="line">    <span class="keyword">private</span> SharedPreferences.Editor sEditor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_shared_preference);</span><br><span class="line">        etName = (EditText) findViewById(R.id.et_name);</span><br><span class="line">        btnSave = (Button) findViewById(R.id.btn_save);</span><br><span class="line">        btnShow = (Button) findViewById(R.id.btn_show);</span><br><span class="line">        tvShow = (TextView) findViewById(R.id.tv_show);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 SharedPreferences 对象</span></span><br><span class="line">        <span class="comment">// 文件名称，直接使用 MODE_PRIVATE</span></span><br><span class="line">        sharedPreferences = getSharedPreferences(<span class="string">&quot;data&quot;</span>, MODE_PRIVATE);</span><br><span class="line">        <span class="comment">// 创建 Editor 对象，用于编辑我们创建的 data.xml 配置文件</span></span><br><span class="line">        sEditor = sharedPreferences.edit();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写文件</span></span><br><span class="line">        btnSave.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="comment">// 写入数据</span></span><br><span class="line">                sEditor.putString(<span class="string">&quot;name&quot;</span>, etName.getText().toString());</span><br><span class="line">                <span class="comment">// 提交数据，提交数据有两种方式，一个是 commit，一个是 apply</span></span><br><span class="line">                sEditor.apply();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读文件</span></span><br><span class="line">        btnShow.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="comment">// 读取数据，将数据展示到 TextView 中</span></span><br><span class="line">                tvShow.setText(sharedPreferences.getString(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行效果如下<br><img src="/images/Android/datastorage/sharedpreferences/0rkl9-4600g.gif" loading="lazy"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这个 xml 文件是保存在你的安卓设备中或者安卓模拟器中，<font color="red">而不是在你的电脑中</font>。默认的安装位置是在 “/data/data/<applicationId>/shared_prefs” 中，这个路径在模拟器中是可以看到了，如果我们装在实体机上，就不一定能看到了（感觉市面上大部分的安卓手机都是不能看的吧😊😊😊）</applicationId></p><p>项目的代码都在 <a href="https://github.com/BestGuo2020/AndroidStudy">AndroidStudy</a> 的 github 仓库中。</p>]]></content>
      
      
      <categories>
          
          <category> Android 开发的学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 入门篇之 PopupWindow 组件的使用</title>
      <link href="/journal/popupwindow-component/"/>
      <url>/journal/popupwindow-component/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>PopupWindow 一个非常常用的一个组件。比如我们在 QQ 中，点击退出的按钮时，它弹出的的选项就是使用的是 PopupWindow。而且，在编写代码的时候，步骤也和 ListView 类似。</p><p>这个是 QQ 退出时，使用 PopupWindow</p><span id="more"></span><p><img src="/images/Android/popupwindow/Screenshot_20210201_104616.jpg" loading="lazy"></p><p>这个是华为天气的界面，所使用的 PopupWindow</p><p><img src="/images/Android/popupwindow/Screenshot_20210201_105305.jpg" loading="lazy"></p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="布局文件"><a href="#布局文件" class="headerlink" title="布局文件"></a>布局文件</h3><p>布局文件的示例非常简单，只要一个按钮就行</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button_pop&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;150dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center_horizontal&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;pop&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;45dp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="自定义-popup-组件"><a href="#自定义-popup-组件" class="headerlink" title="自定义 popup 组件"></a>自定义 popup 组件</h3><p>layout_pop.xml 文件</p><p>layout_pop 中是一个菜单布局文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span> <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/good&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;好&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;14dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:padding</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;1dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;#aaa&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/general&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;一般&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;14dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:padding</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;1dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;#aaa&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/bad&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;差&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;14dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:padding</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="java-代码"><a href="#java-代码" class="headerlink" title="java 代码"></a>java 代码</h3><p>首先需要声明一个 PopupWindow 的组件，但是它的声明方式和普通的组声明方式又是不相同的。我们在声明一个 Button 组件时，都是来使用 findViewById 这个方法来获取我们创建的组件。而这个组件就不相同了。</p><p>它是先创建 PopupWindow 的一个实例对象，然后将我们自定义的组件放在 PopupWindow，同时设置好宽和高，最后再设置其显示方式。</p><p>它的显示方式有三种：</p><ol><li>showAsDropDown(view)  默认在最下方</li><li>showAsDropDown(view, offsetX, offsetY)  在下方，可以设定具体的偏移量</li><li>popupWindow.showAtLocation(view, gravity, x, y)  设置任意的位置</li></ol><h4 id="showAsDropDown"><a href="#showAsDropDown" class="headerlink" title="showAsDropDown"></a>showAsDropDown</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">button = (Button) findViewById(R.id.button_pop);</span><br><span class="line"></span><br><span class="line">button.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">        <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> getLayoutInflater().inflate(R.layout.layout_pop, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TextView</span> <span class="variable">good</span> <span class="operator">=</span> view.findViewById(R.id.good);</span><br><span class="line">        <span class="type">TextView</span> <span class="variable">general</span> <span class="operator">=</span> view.findViewById(R.id.general);</span><br><span class="line">        <span class="type">TextView</span> <span class="variable">bad</span> <span class="operator">=</span> view.findViewById(R.id.bad);</span><br><span class="line"></span><br><span class="line">        popupWindow = <span class="keyword">new</span> <span class="title class_">PopupWindow</span>(view, button.getWidth(), ViewGroup.LayoutParams.WRAP_CONTENT);</span><br><span class="line">        popupWindow.setOutsideTouchable(<span class="literal">true</span>);</span><br><span class="line">        popupWindow.setFocusable(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        popupWindow.showAsDropDown(button);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行效果<br><img src="/images/Android/popupwindow/6xfgz-c10tw.gif" loading="lazy"></p><h4 id="showAsDropDown-指定偏移量的"><a href="#showAsDropDown-指定偏移量的" class="headerlink" title="showAsDropDown 指定偏移量的"></a>showAsDropDown 指定偏移量的</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">button = (Button) findViewById(R.id.button_pop);</span><br><span class="line"></span><br><span class="line">button.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">        <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> getLayoutInflater().inflate(R.layout.layout_pop, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TextView</span> <span class="variable">good</span> <span class="operator">=</span> view.findViewById(R.id.good);</span><br><span class="line">        <span class="type">TextView</span> <span class="variable">general</span> <span class="operator">=</span> view.findViewById(R.id.general);</span><br><span class="line">        <span class="type">TextView</span> <span class="variable">bad</span> <span class="operator">=</span> view.findViewById(R.id.bad);</span><br><span class="line"></span><br><span class="line">        good.setOnClickListener(<span class="keyword">new</span> <span class="title class_">PopupItemClickListener</span>());</span><br><span class="line">        general.setOnClickListener(<span class="keyword">new</span> <span class="title class_">PopupItemClickListener</span>());</span><br><span class="line">        bad.setOnClickListener(<span class="keyword">new</span> <span class="title class_">PopupItemClickListener</span>());</span><br><span class="line"></span><br><span class="line">        popupWindow = <span class="keyword">new</span> <span class="title class_">PopupWindow</span>(view, button.getWidth(), ViewGroup.LayoutParams.WRAP_CONTENT);</span><br><span class="line">        popupWindow.setOutsideTouchable(<span class="literal">true</span>); <span class="comment">// 点击按钮之外的内容，菜单消失</span></span><br><span class="line">        popupWindow.setFocusable(<span class="literal">true</span>); <span class="comment">// 再次点击按钮时，菜单消失</span></span><br><span class="line">        </span><br><span class="line">        popupWindow.showAsDropDown(button, <span class="number">120</span>, <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行效果<br><img src="/images/Android/popupwindow/5nvro-75m9r.gif" loading="lazy"></p><h4 id="showAtLocation-指定位置"><a href="#showAtLocation-指定位置" class="headerlink" title="showAtLocation 指定位置"></a>showAtLocation 指定位置</h4><p>在展示位置之前，需要获取到它的父空间，也就是 activity_popup_window，得到了父空间就可以随意的显示 PopupWindow 的位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">button = (Button) findViewById(R.id.button_pop);</span><br><span class="line"></span><br><span class="line">button.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">        <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> getLayoutInflater().inflate(R.layout.layout_pop, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TextView</span> <span class="variable">good</span> <span class="operator">=</span> view.findViewById(R.id.good);</span><br><span class="line">        <span class="type">TextView</span> <span class="variable">general</span> <span class="operator">=</span> view.findViewById(R.id.general);</span><br><span class="line">        <span class="type">TextView</span> <span class="variable">bad</span> <span class="operator">=</span> view.findViewById(R.id.bad);</span><br><span class="line"></span><br><span class="line">        popupWindow = <span class="keyword">new</span> <span class="title class_">PopupWindow</span>(view, button.getWidth(), ViewGroup.LayoutParams.WRAP_CONTENT);</span><br><span class="line">        popupWindow.setOutsideTouchable(<span class="literal">true</span>);</span><br><span class="line">        popupWindow.setFocusable(<span class="literal">true</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">View</span> <span class="variable">rootview</span> <span class="operator">=</span> LayoutInflater.from(PopupWindowActivity.<span class="built_in">this</span>).inflate(R.layout.activity_popup_window, <span class="literal">null</span>);</span><br><span class="line">        popupWindow.showAtLocation(rootview, Gravity.BOTTOM, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行效果<br><img src="/images/Android/popupwindow/zbxh1-brc4e.gif" loading="lazy"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>部分参考于：<a href="https://blog.csdn.net/harvic880925/article/details/49272285">https://blog.csdn.net/harvic880925/article/details/49272285</a></p><p>项目的代码都在 <a href="https://github.com/BestGuo2020/AndroidStudy">AndroidStudy</a> 的 github 仓库中。</p>]]></content>
      
      
      <categories>
          
          <category> Android 开发的学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Activity 的生命周期</title>
      <link href="/journal/activity-life/"/>
      <url>/journal/activity-life/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>首次学习 Activity 的生命周期，似懂非懂。不过通过代码的方式可以大致理解一下，Activity 在创建的时候会执行那些方法，比如临时退出到主界面，手机息屏，新消息，来电等等状态时。会执行到的方法。</p><p>一个 Activity 的生命周期如下。</p><p><img src="https://images0.cnblogs.com/blog2015/614265/201508/281713137507426.jpg" loading="lazy"></p><center>图片来自网络，侵删</center><span id="more"></span><p>这张图看的不是很懂，但是生命周期的方法有以下 6 个</p><ul><li>onCreate</li><li>onStart</li><li>onResume</li><li>onPause</li><li>onStop</li><li>onDestroy</li></ul><p>接下来，我们将通过代码的方式对这些方法进行应用。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>以下示例将这些方法进行演示一遍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bestguo.androidlayout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by He Guo on 2021/1/31.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LifeCycleActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_life_cycle);</span><br><span class="line">        Log.d(<span class="string">&quot;LifeCycle&quot;</span>, <span class="string">&quot;----onCreate----&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onStart</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onStart();</span><br><span class="line">        Log.d(<span class="string">&quot;LifeCycle&quot;</span>, <span class="string">&quot;----onStart----&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onResume</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onResume();</span><br><span class="line">        Log.d(<span class="string">&quot;LifeCycle&quot;</span>, <span class="string">&quot;----onResume----&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onPause</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onPause();</span><br><span class="line">        Log.d(<span class="string">&quot;LifeCycle&quot;</span>, <span class="string">&quot;----onPause----&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onStop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onStop();</span><br><span class="line">        Log.d(<span class="string">&quot;LifeCycle&quot;</span>, <span class="string">&quot;----onStop----&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">        Log.d(<span class="string">&quot;LifeCycle&quot;</span>, <span class="string">&quot;----onDestroy----&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="进入-Activity"><a href="#进入-Activity" class="headerlink" title="进入 Activity"></a>进入 Activity</h3><p>进入 Activity 时，共执行了三个方法。先 onCreate，再 onStart，最后 onResume</p><p><img src="/images/Android/lifecycle/QQ%E6%88%AA%E5%9B%BE20210131164457.jpg" loading="lazy"></p><h3 id="息屏或者进入其它应用"><a href="#息屏或者进入其它应用" class="headerlink" title="息屏或者进入其它应用"></a>息屏或者进入其它应用</h3><p>当手机处于息屏或者到其它程序中的状态时，执行了两个方法。先 onPause，再 onStop</p><p><img src="/images/Android/lifecycle/QQ%E6%88%AA%E5%9B%BE20210131165004.jpg" loading="lazy"></p><p>当手机解锁或者回到当前的 Activity 时，也是执行了两个方法。先 onStart、再 onResume</p><p><img src="/images/Android/lifecycle/QQ%E6%88%AA%E5%9B%BE20210131165319.jpg" loading="lazy"></p><h3 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h3><p>当退出这个 activity 时，会执行三个方法。先 onPause、再 onStop、最后是 onDestroy</p><p><img src="/images/Android/lifecycle/QQ%E6%88%AA%E5%9B%BE20210131165530.jpg" loading="lazy"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在应用了这些方法时，大概能猜测到部分方法的用途</p><p>onCreate 方法就是在初始化一些组件的时候，需要写在这些方法中。只会执行一次。<br>onStart 方法可以用于加载数据，即这个阶段是向服务器请求数据，或者是从本地来加载数据。<br>onPause 方法可以用于视频，比如手机息屏或者突然来电，遇到这种状态，我们需要对视频进行暂停。<br>onDestroy 也是只执行一次，具体用在什么地方还猜不到。</p><p>其它的生命周期的方法，还没猜到它们的应用场景。</p><p>好辣，差不多就这些咯。</p><p>项目的代码都在 <a href="https://github.com/BestGuo2020/AndroidStudy">AndroidStudy</a> 的 github 仓库中。</p>]]></content>
      
      
      <categories>
          
          <category> Android 开发的学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 入门篇之 WebView 组件的使用</title>
      <link href="/journal/webview-component/"/>
      <url>/journal/webview-component/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="学习感受"><a href="#学习感受" class="headerlink" title="学习感受"></a>学习感受</h2><p>WebView 网页视图在 Android APP 中也是用的非常多，比如微信、QQ、淘宝、bilibili 等等这些非常受欢迎的应用都有使用到这个组件。</p><p>同时，WebView 是可以调用里面的 Javascript 代码。JavaScript 代码也能够调用的 Android 中相关的代码，这就相当于是混合开发。混合开发的案例也非常多，比如我们的常用的淘宝，它就是使用了混合开发的方式了。</p><p>本日志仅仅是记录了 WebView 的一些基本的使用，深入学习这种混合的开发方式，这里不过多赘述。</p><span id="more"></span><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="创建-WebView"><a href="#创建-WebView" class="headerlink" title="创建 WebView"></a>创建 WebView</h3><p>创建 WebView 非常简单，只需创建组件即可，同时需要设置id</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">WebView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/web_view&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="加载网页"><a href="#加载网页" class="headerlink" title="加载网页"></a>加载网页</h3><p>加载网页分别有两种不同的加载方式，一个是加载本地的网页，另一个是加载远程的网页。</p><h4 id="本地加载"><a href="#本地加载" class="headerlink" title="本地加载"></a>本地加载</h4><p>在加载本地网页之前，需要创建一个 asset 的文件夹。因为只有 asset 文件夹下的文件不会被编译进去，比如我们之前在 res/drawable 文件夹中放入的这些图片都是会进行一个编译。调用图片的方式，也不是用路径来进行一个编译，而是使用这种 <code>@drawablw/xxxx</code> 这种方式来获取图片的。</p><p>正确的创建的 asset 文件夹的步骤如下。</p><ol><li><p>新建<br><img src="/images/Android/webview/QQ%E6%88%AA%E5%9B%BE20210130213210.jpg" loading="lazy"></p></li><li><p>直接 Finish<br><img src="/images/Android/webview/QQ%E6%88%AA%E5%9B%BE20210130213336.jpg" loading="lazy"></p></li></ol><p>创建完成之后，可以随便写一个 html 代码，放到这个 asset 文件夹下。这里用的是我之前写的一个网页进行测试</p><p>加载网页的方法用的是 onLoad 方法，固定的部分是 file:///android_asset/ ，后面的部分就可以指定的网页的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bestguo.androidlayout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.webkit.WebView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebViewActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> WebView webView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_web_view);</span><br><span class="line"></span><br><span class="line">        progressBar = (ProgressBar) findViewById(R.id.progress);</span><br><span class="line"></span><br><span class="line">        webView = (WebView) findViewById(R.id.web_view);</span><br><span class="line">        <span class="comment">// 允许 javascript</span></span><br><span class="line">        webView.getSettings().setJavaScriptEnabled(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 加载本地的 html 文件</span></span><br><span class="line">        webView.loadUrl(<span class="string">&quot;file:///android_asset/index.html&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行效果如下：</p><p><img src="/images/Android/webview/Screenshot_20210130_214525.jpg" loading="lazy"></p><h4 id="远程加载"><a href="#远程加载" class="headerlink" title="远程加载"></a>远程加载</h4><p>远程加载只需要一个 http 或者 https 协议的地址就可以了。不过，在加载远程的一个网址时，需要允许 javascript 网页才能够正常的运行成功。不允许将加载不出来。</p><p>启用 javascript 的方法为 <code>setJavaScriptEnabled</code> ，设置为 true 允许，false 为禁止。</p><p>这里以我的个人网站为例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bestguo.androidlayout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.webkit.WebView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebViewActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> WebView webView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_web_view);</span><br><span class="line"></span><br><span class="line">        progressBar = (ProgressBar) findViewById(R.id.progress);</span><br><span class="line"></span><br><span class="line">        webView = (WebView) findViewById(R.id.web_view);</span><br><span class="line">        <span class="comment">// 允许 javascript</span></span><br><span class="line">        webView.getSettings().setJavaScriptEnabled(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 加载本地的 html 文件</span></span><br><span class="line">        <span class="comment">// webView.loadUrl(&quot;file:///android_asset/index.html&quot;);</span></span><br><span class="line">        webView.loadUrl(<span class="string">&quot;https://www.bestguo.top&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行效果如下</p><p><img src="/images/Android/webview/Screenshot_20210130_214715.jpg" loading="lazy"></p><h3 id="进入新页面"><a href="#进入新页面" class="headerlink" title="进入新页面"></a>进入新页面</h3><p>我们在浏览网页的时候，需要点击超链接来进入新的页面，但是我们在点击时。出现了以下的效果</p><p><img src="/images/Android/webview/Screenshot_20210130_214728.jpg" loading="lazy"></p><p>就是需要我们选择一个外置的浏览器来访问新的页面，这样的体验其实并不好。</p><p>因此，解决这种方法需要用到 <code>setWebViewClient</code> 这个方法，它的参数是 <code>WebViewClient</code> 以及被它所继承的子类，重写其中的方法。这个方法就是 <code>shouldOverrideUrlLoading</code>。</p><p>实现的代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bestguo.androidlayout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.webkit.WebResourceRequest;</span><br><span class="line"><span class="keyword">import</span> android.webkit.WebView;</span><br><span class="line"><span class="keyword">import</span> android.webkit.WebViewClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebViewActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> WebView webView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_web_view);</span><br><span class="line"></span><br><span class="line">        progressBar = (ProgressBar) findViewById(R.id.progress);</span><br><span class="line"></span><br><span class="line">        webView = (WebView) findViewById(R.id.web_view);</span><br><span class="line">        <span class="comment">// 允许 javascript</span></span><br><span class="line">        webView.getSettings().setJavaScriptEnabled(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 加载本地的 html 文件</span></span><br><span class="line">        <span class="comment">// webView.loadUrl(&quot;file:///android_asset/index.html&quot;);</span></span><br><span class="line">        webView.loadUrl(<span class="string">&quot;https://www.bestguo.top&quot;</span>);</span><br><span class="line">        webView.setWebViewClient(<span class="keyword">new</span> <span class="title class_">MyWebViewClient</span>());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">MyWebViewClient</span> <span class="keyword">extends</span> <span class="title class_">WebViewClient</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果要设置成不用新浏览器打开</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">shouldOverrideUrlLoading</span><span class="params">(WebView view, WebResourceRequest request)</span> &#123;</span><br><span class="line">            view.loadUrl(request.getUrl().toString());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建立了一个内部类，类名为 MyWebViewClient，需要继承自 WebViewClient 类。重写其 shouldOverrideUrlLoading 方法，将当前的 webview 中的 url 进行一个重新的加载，这样一来就不会直接提示使用外置浏览器了。</p><p>调用 setWebViewClient 方法是，传入的是自己创建的内部类对象就行了 <code>webView.setWebViewClient(new MyWebViewClient());</code></p><p>效果如下</p><p><img src="/images/Android/webview/d9flt-ythk8.gif" loading="lazy"></p><h3 id="返回"><a href="#返回" class="headerlink" title="返回"></a>返回</h3><p>但是，我们进入到这个页面再返回，又出现了一个问题，请看下图。</p><p><img src="/images/Android/webview/j7vx8-2t7y4.gif" loading="lazy"></p><p>很容易发现，它并没有后退到上一个页面，而是直接退出了。所以这个时候，我们需要对按键进行一个判断。判断方法也非常简单，就是按下的是否为返回键并且能够后退到上一个页面。条件成立则执行返回到上一个页面，条件不成立则直接退出。</p><p>同时网页的前进与后退，也有 6 种方法可以选择</p><ul><li>webview.canGoBack()  能否后退到上一个页面</li><li>webview.goBack()  后退到上一个页面</li><li>webview.canGoForward()  前进到下一个页面</li><li>webview.goForward()  前进到下一个页面</li><li>webview.canGoBackOrForward(int steps)  能否后退或者前景到第几个页面，后退为负值，前进为正值</li><li>webview.GoBackOrForward(int steps)  后退或者前景到第几个页面，后退为负值，前进为正值</li></ul><p>在 WebViewActivity 中重写 onKeyDown 方法，重新判端，按下返回键的操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 设置返回值，防止直接返回</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> keyCode</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> event</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onKeyDown</span><span class="params">(<span class="type">int</span> keyCode, KeyEvent event)</span> &#123;</span><br><span class="line">    <span class="comment">// 如果按下了返回键，并且能够返回到上一级目录</span></span><br><span class="line">    <span class="keyword">if</span>(keyCode == KeyEvent.KEYCODE_BACK &amp;&amp; webView.canGoBack()) &#123;</span><br><span class="line">        <span class="comment">// 可以返回到上一级的目录</span></span><br><span class="line">        webView.goBack();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 退出</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.onKeyDown(keyCode, event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果如下</p><p><img src="/images/Android/webview/31gqw-z2rim.gif" loading="lazy"></p><h3 id="其它高级设置"><a href="#其它高级设置" class="headerlink" title="其它高级设置"></a>其它高级设置</h3><p>以上问题解决了，我们可以获取进度条来显示网页加载的情况，以及设置标题，将原来的 AndroidLayout 标题进行一个替换。</p><p>要做到这种效果，还是要写一个类，类名为 MyWebChromeClient ，该类需要继承自 WebChromeClient，重写它的两个方法就能够实现以上的功能了。</p><p>重写的两个方法，分别如下：</p><ul><li>onProgressChanged 加载进度，创建一个 ProgressBar 这个组件就可以去实现</li><li>onReceivedTitle 得到的标题，直接使用父类的 setTitle 方法，对标题进行设置</li></ul><p>在此之前，先添加一个进度条的组件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 进度条 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ProgressBar</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;@android:style/Widget.ProgressBar.Horizontal&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/progress&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;3dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:max</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">WebView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/web_view&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对应的Java代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bestguo.androidlayout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.graphics.Bitmap;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.KeyEvent;</span><br><span class="line"><span class="keyword">import</span> android.webkit.WebChromeClient;</span><br><span class="line"><span class="keyword">import</span> android.webkit.WebResourceRequest;</span><br><span class="line"><span class="keyword">import</span> android.webkit.WebView;</span><br><span class="line"><span class="keyword">import</span> android.webkit.WebViewClient;</span><br><span class="line"><span class="keyword">import</span> android.widget.ProgressBar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebViewActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> WebView webView;</span><br><span class="line">    <span class="comment">// 声明了一个进度条组件</span></span><br><span class="line">    <span class="keyword">private</span> ProgressBar progressBar;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_web_view);</span><br><span class="line"></span><br><span class="line">        progressBar = (ProgressBar) findViewById(R.id.progress);</span><br><span class="line"></span><br><span class="line">        webView = (WebView) findViewById(R.id.web_view);</span><br><span class="line">        <span class="comment">// 允许 javascript</span></span><br><span class="line">        webView.getSettings().setJavaScriptEnabled(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 加载本地的 html 文件</span></span><br><span class="line">        <span class="comment">// webView.loadUrl(&quot;file:///android_asset/index.html&quot;);</span></span><br><span class="line">        webView.loadUrl(<span class="string">&quot;https://www.bestguo.top&quot;</span>);</span><br><span class="line">        webView.setWebViewClient(<span class="keyword">new</span> <span class="title class_">MyWebViewClient</span>());</span><br><span class="line">        webView.setWebChromeClient(<span class="keyword">new</span> <span class="title class_">MyWebChromeClient</span>());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新建了一个内部类，继承自 webchromeclient 类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">MyWebChromeClient</span> <span class="keyword">extends</span> <span class="title class_">WebChromeClient</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onProgressChanged</span><span class="params">(WebView view, <span class="type">int</span> newProgress)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>.onProgressChanged(view, newProgress);</span><br><span class="line">            <span class="comment">// 设置进度的状态</span></span><br><span class="line">            progressBar.setProgress(newProgress);</span><br><span class="line">            Log.d(<span class="string">&quot;loading&quot;</span>, newProgress + <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceivedTitle</span><span class="params">(WebView view, String title)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>.onReceivedTitle(view, title);</span><br><span class="line">            setTitle(title);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果如下</p><p><img src="/images/Android/webview/4vnee-wx7du.gif" loading="lazy"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>项目的代码都在 <a href="https://github.com/BestGuo2020/AndroidStudy">AndroidStudy</a> 的 github 仓库中。</p><p>KeyEvent 对应的事件，请参考 <a href="https://www.cnblogs.com/hujingnb/p/10282238.html">https://www.cnblogs.com/hujingnb/p/10282238.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Android 开发的学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 入门篇之 ScrollView 组件的使用</title>
      <link href="/journal/scrollview-component/"/>
      <url>/journal/scrollview-component/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="我想要说"><a href="#我想要说" class="headerlink" title="我想要说"></a>我想要说</h2><p>ScrollView 是带滑动条的视图组件，当我们的内容在这个窗口无法全部展示出来，默认是不会有滚动条出现的。所以，我们需要添加一个滚动视图来展示这些未展示的部分。</p><p>ScrollView 的使用是非常简单的。</p><p>不过 ScrollView 是纵向滚动的。它还有一个横向的滚动条，叫做 HorizontalScrollView，即水平滚动视图。</p><span id="more"></span><h2 id="需要注意的"><a href="#需要注意的" class="headerlink" title="需要注意的"></a>需要注意的</h2><p>ScrollView 组件中只能包含一个组件或者一个布局。否则会出现以下问题</p><p><img src="/images/Android/scrollview/QQ%E6%88%AA%E5%9B%BE20210130161441.jpg" loading="lazy"></p><p>对应的伪代码如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ScrollView</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;top.bestguo.androidlayout.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ListView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;100dp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line">        ....</span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">    ....</span><br><span class="line"><span class="tag">&lt;/<span class="name">ScrollView</span>&gt;</span></span><br></pre></td></tr></table></figure><p>预览效果中有一个报错信息 “ScrollView can host only one direct child”，说的就是上面这个意思。然后上面这种写法就是错误的。</p><p>如果要在 ScrollView 中要显示多个组件该怎么办呢？很简单，使用 LinearLayout 和 RelativeLayout 等各种布局就可以了。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>本实例将 ScrollView 和 HorizontalScrollView 两种滚动方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 垂直滚动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ScrollView</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;top.bestguo.androidlayout.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/btn1&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;@string/linear_layout&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/btn2&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;RelativeLayout 布局示例&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/btn3&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;TextView 组件示例&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/btn4&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;Button 组件示例&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/btn5&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;EditText 组件示例&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/btn6&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;RadioButton 组件示例&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/btn7&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;CheckBox 组件示例&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/btn8&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;ImageView 组件示例&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/btn9&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;ListView 组件示例&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/btn10&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;GridView 组件示例&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 水平滚动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">HorizontalScrollView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_width</span>=<span class="string">&quot;150dp&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_height</span>=<span class="string">&quot;120dp&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:text</span>=<span class="string">&quot;测试按钮 1&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:id</span>=<span class="string">&quot;@+id/button&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_width</span>=<span class="string">&quot;150dp&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_height</span>=<span class="string">&quot;120dp&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:text</span>=<span class="string">&quot;测试按钮 2&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_width</span>=<span class="string">&quot;150dp&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_height</span>=<span class="string">&quot;120dp&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:text</span>=<span class="string">&quot;测试按钮 3&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">HorizontalScrollView</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ScrollView</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下<br><img src="/images/Android/scrollview/zrzuj-rar1q.gif" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> Android 开发的学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 入门篇之 GridView 组件的使用</title>
      <link href="/journal/gridview-component/"/>
      <url>/journal/gridview-component/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="我想要说"><a href="#我想要说" class="headerlink" title="我想要说"></a>我想要说</h2><p>昨天整理完了 ListView，现在学起 GridView 组件就是较为简单的事情了，比如创建 Adapter 等等还是一样的。<font color="red">建议看完 ListView 再去学习 GridView 就相对简单一些</font>。</p><p>话不多说，直接上示例。</p><p>对啦，这次我对 git 的用法有了一些了解。后续就可以在 github 上看到我的 Android 例子了。</p><span id="more"></span><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>本实例回顾了一下前面 ListView 创建的步骤</p><h3 id="创建网格视图"><a href="#创建网格视图" class="headerlink" title="创建网格视图"></a>创建网格视图</h3><p>创建一个 layout，文件名为 activity_grid_view.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span> <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">&quot;5dp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">GridView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/grid_view&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:numColumns</span>=<span class="string">&quot;3&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:horizontalSpacing</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:verticalSpacing</span>=<span class="string">&quot;10dp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上涉及到了三个属性，分别是 <code>numColumns</code>、<code>horizontalSpacing</code> 和 <code>verticalSpacing</code></p><p>其中 <code>numColumn</code> 设置的有几列，默认的值是 1，也就是只有一列，这样就和 ListView 一模一样了。也就是说，ListView 可以被 GridView 替代了。<br><code>horizontalSpacing</code> 设置水平之间的间隔，默认为 0。<br><code>verticalSpacing</code> 设置的是竖直之间的间隔，默认为 0。</p><p>为了能够体现出 GridView，这里将列数设置成 3 列。</p><h3 id="创建-Activity"><a href="#创建-Activity" class="headerlink" title="创建 Activity"></a>创建 Activity</h3><p>创建与之对应的 Activity 的 java 类，我这里继承的是 AppCompatActivity 类。</p><blockquote><p>Activity 类是最原始的一个类，它有很多衍生的子类。比如 FragmentActivity、AppCompatActivity 等等，不同的 Activity 对应的默认布局也就不一样。比如：Activity 默认是不带标题栏的，而 AppConpatActivity 默认是带标题栏的。</p><p>这是不带标题栏的效果<br><img src="/images/Android/gridview/QQ%E6%88%AA%E5%9B%BE20210129231233.jpg" loading="lazy"><br>这是带标题栏的效果<br><img src="/images/Android/listview/QQ%E6%88%AA%E5%9B%BE20210128175858.jpg" loading="lazy"></p></blockquote><p>GridViewActivity 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bestguo.androidlayout.gridview;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.bestguo.androidlayout.R;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by He Guo on 2021/1/29.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GridViewActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_grid_view);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加-Activity"><a href="#添加-Activity" class="headerlink" title="添加 Activity"></a>添加 Activity</h3><p>将自己创建的 Activity 添加到 AndroidManifest.xml 文件中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">&quot;top.bestguo.androidlayout&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">&quot;@mipmap/ic_launcher&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:roundIcon</span>=<span class="string">&quot;@mipmap/ic_launcher_round&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">&quot;@style/AppTheme&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.LinearActivity&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.RelativeActivity&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.TextviewActivity&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.ButtonActivity&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.EditTextActivity&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.RadioButtonActivity&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.CheckBoxActivity&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.ImageViewActivity&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.listview.ListViewActivity&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在末尾追加的 activity --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.gridview.GridViewActivity&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建自定义-item-布局"><a href="#创建自定义-item-布局" class="headerlink" title="创建自定义 item 布局"></a>创建自定义 item 布局</h3><p>自定义 item 的布局</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span> <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/header&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@color/colorAccent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:scaleType</span>=<span class="string">&quot;centerCrop&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:padding</span>=<span class="string">&quot;7dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/name&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;测试文字&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;14dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建一个-Adapter"><a href="#创建一个-Adapter" class="headerlink" title="创建一个 Adapter"></a>创建一个 Adapter</h3><p>创建一个 Adapter，目的是将 item 展示出来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bestguo.androidlayout.gridview;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"><span class="keyword">import</span> android.widget.BaseAdapter;</span><br><span class="line"><span class="keyword">import</span> android.widget.ImageView;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bumptech.glide.Glide;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.bestguo.androidlayout.R;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by He Guo on 2021/1/29.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyGridViewAdapter</span> <span class="keyword">extends</span> <span class="title class_">BaseAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line">    <span class="keyword">private</span> LayoutInflater layoutInflater;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyGridViewAdapter</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.context = context;</span><br><span class="line">        layoutInflater = LayoutInflater.from(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">15</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getItem</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getItemId</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ViewHolder</span> &#123;</span><br><span class="line">        ImageView imageView;</span><br><span class="line">        TextView textView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">getView</span><span class="params">(<span class="type">int</span> i, View view, ViewGroup viewGroup)</span> &#123;</span><br><span class="line">        ViewHolder viewHolder;</span><br><span class="line">        <span class="keyword">if</span>(view == <span class="literal">null</span>)&#123;</span><br><span class="line">            view = layoutInflater.inflate(R.layout.layout_grid_item, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">            viewHolder = <span class="keyword">new</span> <span class="title class_">ViewHolder</span>();</span><br><span class="line">            viewHolder.imageView = view.findViewById(R.id.header);</span><br><span class="line">            viewHolder.textView = view.findViewById(R.id.name);</span><br><span class="line"></span><br><span class="line">            view.setTag(viewHolder);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            viewHolder = (ViewHolder) view.getTag();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 加载网络图片</span></span><br><span class="line">        Glide.with(context).load(<span class="string">&quot;http://www.topacg.com/wp-content/uploads&quot;</span> +</span><br><span class="line">                <span class="string">&quot;/2020/03/frc-11c619718c036bf579c246cdd07e6d77.jpeg&quot;</span>).into(viewHolder.imageView);</span><br><span class="line">        viewHolder.textView.setText(<span class="string">&quot;灶门祢豆子&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="添加-Adapter-到-Activity"><a href="#添加-Adapter-到-Activity" class="headerlink" title="添加 Adapter 到 Activity"></a>添加 Adapter 到 Activity</h3><p>设置一个 Adapter，用于渲染数据的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bestguo.androidlayout.gridview;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.AdapterView;</span><br><span class="line"><span class="keyword">import</span> android.widget.GridView;</span><br><span class="line"><span class="keyword">import</span> android.widget.ImageView;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bumptech.glide.Glide;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.bestguo.androidlayout.R;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by He Guo on 2021/1/29.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GridViewActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> GridView gridView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_grid_view);</span><br><span class="line"></span><br><span class="line">        gridView = (GridView) findViewById(R.id.grid_view);</span><br><span class="line">        gridView.setAdapter(<span class="keyword">new</span> <span class="title class_">MyGridViewAdapter</span>(<span class="built_in">this</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>和 ListView 一模一样，GridView 也有两种常用的事件，分别是 <code>setOnItemClickListener</code> 和 <code>setOnItemLongClickListener</code> 两个方法。一个是手指短按的事件，另外一个是长按的事件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bestguo.androidlayout.gridview;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.AdapterView;</span><br><span class="line"><span class="keyword">import</span> android.widget.GridView;</span><br><span class="line"><span class="keyword">import</span> android.widget.ImageView;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bumptech.glide.Glide;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.bestguo.androidlayout.R;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by He Guo on 2021/1/29.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GridViewActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> GridView gridView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_grid_view);</span><br><span class="line"></span><br><span class="line">        gridView = (GridView) findViewById(R.id.grid_view);</span><br><span class="line">        gridView.setAdapter(<span class="keyword">new</span> <span class="title class_">MyGridViewAdapter</span>(<span class="built_in">this</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 点击事件</span></span><br><span class="line">        gridView.setOnItemClickListener(<span class="keyword">new</span> <span class="title class_">AdapterView</span>.OnItemClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onItemClick</span><span class="params">(AdapterView&lt;?&gt; adapterView, View view, <span class="type">int</span> i, <span class="type">long</span> l)</span> &#123;</span><br><span class="line">                Toast.makeText(GridViewActivity.<span class="built_in">this</span>, <span class="string">&quot;我是祢豆子 &quot;</span> + (i+<span class="number">1</span>) + <span class="string">&quot; 号&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 长按事件</span></span><br><span class="line">        gridView.setOnItemLongClickListener(<span class="keyword">new</span> <span class="title class_">AdapterView</span>.OnItemLongClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onItemLongClick</span><span class="params">(AdapterView&lt;?&gt; adapterView, View view, <span class="type">int</span> i, <span class="type">long</span> l)</span> &#123;</span><br><span class="line">                <span class="comment">// 找到当前选中的 header 和 textview，后续要对其进行设置。</span></span><br><span class="line">                <span class="type">ImageView</span> <span class="variable">imageView</span> <span class="operator">=</span> view.findViewById(R.id.header);</span><br><span class="line">                <span class="type">TextView</span> <span class="variable">textView</span> <span class="operator">=</span> view.findViewById(R.id.name);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 加载网络图片</span></span><br><span class="line">                Glide.with(GridViewActivity.<span class="built_in">this</span>).load(<span class="string">&quot;http://pic.17qq.com/img_qqtouxiang/87450489.jpeg&quot;</span>).into(imageView);</span><br><span class="line">                <span class="comment">// 设置文字</span></span><br><span class="line">                textView.setText(<span class="string">&quot;我妻善逸&quot;</span>);</span><br><span class="line">                <span class="comment">// 给出提示框</span></span><br><span class="line">                Toast.makeText(GridViewActivity.<span class="built_in">this</span>, <span class="string">&quot;嘻嘻，偷偷抱走&quot;</span> + (i+<span class="number">1</span>) + <span class="string">&quot;号祢豆子&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><p>最终效果如下所示：</p><p><img src="/images/Android/gridview/yz3ij-qmw5f.gif" loading="lazy"></p><p>我也想抱走祢豆子，嘻嘻😊😊😊</p>]]></content>
      
      
      <categories>
          
          <category> Android 开发的学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 入门篇之 ListView 组件的使用</title>
      <link href="/journal/listview-component/"/>
      <url>/journal/listview-component/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="我想要说"><a href="#我想要说" class="headerlink" title="我想要说"></a>我想要说</h2><p>今天学习 ListView 组件，和其它的组件不同的是。ListView 组件并不是简简单单的创建和使用就行，ListView 组件中，需要放置其某一个项，也就是 item。在说实例之前，先来看看 ListView 是长什么样子的吧。</p><p>由于这个组件非常的重要，会讲的详细一些。</p><p>ListView 学好了之后，后面的 GridView 也是大同小异</p><span id="more"></span><p><img src="/images/Android/listview/20210128173116.jpg" loading="lazy"></p><p>打码技术堪忧，哈哈哈哈哈哈😅😅😅</p><p>这是一张微信中的截图，这个界面可以认为是包含了一个 ListView，这些每一个小项，就叫做 item，比如“雨课堂”就是一个 item。而且，这些 item 中的布局也是需要自己来实现布局的，所以还需要用到一个布局的 xml 文件。布局难度稍微增加了一些，但是不要怕。</p><p>通过这张图，对 ListView 有了一个更好的认识。</p><h2 id="重点来咯"><a href="#重点来咯" class="headerlink" title="重点来咯"></a>重点来咯</h2><h3 id="自己创建-Activity"><a href="#自己创建-Activity" class="headerlink" title="自己创建 Activity"></a>自己创建 Activity</h3><blockquote><p>以下内容涉及到自定义一个布局和与其对应的 Java 代码。</p></blockquote><h4 id="创建布局文件"><a href="#创建布局文件" class="headerlink" title="创建布局文件"></a>创建布局文件</h4><p>1、创建一个布局文件</p><p><img src="/images/Android/listview/QQ%E6%88%AA%E5%9B%BE20210128175329.jpg" loading="lazy"></p><p>2、设置文件名，名字为 activity_list_view，点击 OK</p><p><img src="/images/Android/listview/QQ%E6%88%AA%E5%9B%BE20210128175432.jpg" loading="lazy"></p><p>至此 activity_list_view.xml 文件创建完成。</p><h4 id="创建-java-文件"><a href="#创建-java-文件" class="headerlink" title="创建 java 文件"></a>创建 java 文件</h4><p>1、创建一个 java 文件，文件名为 ListViewActivity。</p><p><img src="/images/Android/listview/QQ%E6%88%AA%E5%9B%BE20210128183019.jpg" loading="lazy"></p><p>2、重写 onCreate 方法，并将 activity_list_view 布局加载进去。</p><p>写法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setContentView(R.layout.activity_list_view);</span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bestguo.androidlayout.listview;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.bestguo.androidlayout.R;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by BestGuo on 2021/1/28.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListViewActivity</span> <span class="keyword">extends</span> <span class="title class_">Activity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_list_view);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、在 AndroidManifest.xml 文件中，添加一个 activity。</p><p><img src="/images/Android/listview/QQ%E6%88%AA%E5%9B%BE20210128184304.jpg" loading="lazy"></p><p>至此，Activity 的创建已经完成了</p><h3 id="新建一个-ListView-组件"><a href="#新建一个-ListView-组件" class="headerlink" title="新建一个 ListView 组件"></a>新建一个 ListView 组件</h3><p>创建 ListView 非常简单，直接创建即可。给它赋予一个 id，后面需要使用到它。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span> <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ListView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/list_view&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建完成之后，右边的预览界面会有一个效果图出来。</p><p><img src="/images/Android/listview/QQ%E6%88%AA%E5%9B%BE20210128175858.jpg" loading="lazy"></p><p>这是它展示的一个样例，直接运行我没有去尝试。不知道直接运行能不能看到这样的效果。</p><h3 id="自定义-item"><a href="#自定义-item" class="headerlink" title="自定义 item"></a>自定义 item</h3><p>自定义 item 是非常重要的，也就是微信截图中“雨课堂”的那部分。本实例中，我们要设置的 item 效果如下</p><p><img src="/images/Android/listview/QQ%E6%88%AA%E5%9B%BE20210128185241.jpg" loading="lazy"></p><p>所以，我们还需要另外的一个 xml 文件用来设计 item。</p><h4 id="新建布局文件"><a href="#新建布局文件" class="headerlink" title="新建布局文件"></a>新建布局文件</h4><p>新建一个布局文件，名字为 layout_list_item.xml 文件</p><p><img src="/images/Android/listview/QQ%E6%88%AA%E5%9B%BE20210128185638.jpg" loading="lazy"></p><h4 id="编写布局代码"><a href="#编写布局代码" class="headerlink" title="编写布局代码"></a>编写布局代码</h4><p>编写布局代码（代码中的注释需要去看）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 创建的布局是线性布局，默认是的组件摆放方向是水平方向 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">&quot;15dp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 创建了一个图片组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/iv&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:scaleType</span>=<span class="string">&quot;centerCrop&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@color/colorBlack&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      创建了另外一个布局，用于放置图片右边的文字描述。</span></span><br><span class="line"><span class="comment">      宽度和父类相同，高度由里面的内容来决定。</span></span><br><span class="line"><span class="comment">      设置了 marginTop=&quot;4dp&quot;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;4dp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">          第一个 TextView 组件，用来展示标题。设置了文字大小和 paddingLeft=&quot;15dp&quot;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_title&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;Hello&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:paddingLeft</span>=<span class="string">&quot;15dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;20sp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">&quot;@color/colorBlack&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 第二个 TextView 组件，用来展示时间 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_time&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:paddingLeft</span>=<span class="string">&quot;15dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;5dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;15sp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">&quot;@color/colorGray&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;2020-1-28&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 第三个 TextView 组件，用来展示简要介绍 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;5dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:paddingLeft</span>=<span class="string">&quot;15dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;这是内容&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">&quot;@color/colorAccent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;15dp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>得到的 item 的效果就是如图所示的效果</p><p><img src="/images/Android/listview/QQ%E6%88%AA%E5%9B%BE20210128185241.jpg" loading="lazy"></p><blockquote><p><font color="red">注意：之前在设置字体颜色和背景颜色，是用16进制来设置的。但是在这里是用 <code>@color/colorAccent</code> 设置的。</font><br>其实这个不难设置，只需在 res 文件夹下的 values 文件夹下的 colors.xml 来进行设置的。通过每一个英文所对应的十六进制颜色代码来设置就可以了。后期使用颜色，直接使用 <code>@color/xxxxxx</code> 这种写法即可。<br><img src="/images/Android/listview/QQ%E6%88%AA%E5%9B%BE20210128191609.jpg" loading="lazy"></p></blockquote><h4 id="新建-Adapter"><a href="#新建-Adapter" class="headerlink" title="新建 Adapter"></a>新建 Adapter</h4><p>非常重点的部分来咯！什么是 Adapter，Adapter 是用来在展示这些 item 的。以下的微信截图用红色圈出的部分就是由 Adapter 将这些 item 给创建出来的。</p><p><del>什么？适配器，不要和我讲适配器，我可不懂是什么鬼东西。</del></p><p><img src="/images/Android/listview/20210128193509.jpg" loading="lazy"></p><p>咦，我说明的文字这么这么小，太不给力了。😱😱😱</p><p>Adapter 有很多种，在学习时说是使用 BaseAdapter 最多，那我们就用 BaseAdapter 来举例。</p><p>首先新建一个 MyListAdapter 类，需要继承自 BaseAdapter 类，重写其相关的方法才是真正的运用到。</p><p>继承之后，需要重写的方法共有 4 个，分别如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by BestGuo on 2021/1/28.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyListAdapter</span> <span class="keyword">extends</span> <span class="title class_">BaseAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ListView 组件中需要放置的多少项，这个是要从服务端来进行获取的值。</span></span><br><span class="line"><span class="comment">     * 后面的示例，由于没有涉及到服务端，展示一下效果，会直接在此设置数值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 整型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过索引获取内容，但是我们目前没有内容，因此先放一下</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getItem</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取id，具体是什么样的id还需要看什么场景，因此先放一下</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getItemId</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 列表中的样式每一项的设置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i ListView 中的索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> view 自定义的 item 布局，也就是对应我们之前创建的 layout_list_item.xml 文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> viewGroup 不知道，到时候用到在介绍</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">getView</span><span class="params">(<span class="type">int</span> i, View view, ViewGroup viewGroup)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中间的两个方法，可以先不管它。暂时用不到</p><h4 id="重写方法"><a href="#重写方法" class="headerlink" title="重写方法"></a>重写方法</h4><p>我们主要重写的方法有两个，一个 <code>getCount()</code>，另一个是 <code>getView()</code></p><h5 id="getCount-方法"><a href="#getCount-方法" class="headerlink" title="getCount 方法"></a>getCount 方法</h5><p>这个方法的用途很简单，就是要让 ListView 知道要放多少个 item。一般是服务器动态获取的，也可以是人为设置的。</p><p>假设我们只要 15 项，且永远不变。那我们的 getCount 方法中的返回值，那就是 15。所以是这样写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">15</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设我们从服务器获取到的数据，用的是 ArrayList 保存的，如果要知道获取多少条数据。那么就调用它的 <code>size</code> 方法即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">ArrayList</span> <span class="variable">arr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="getView-方法"><a href="#getView-方法" class="headerlink" title="getView 方法"></a>getView 方法</h5><p>这个方法的用途是将我们自定义的 item 布局进行处理。对每一个 item 中的组件的值进行一些设置，比如“雨课堂”的图标、雨课堂文字、发布日期。这些就是 item 中的组件，需要对其进行设置。</p><p>下图是雨课堂部分（红色圈出的部分就是微信中 item 用到的组件）</p><p><img src="/images/Android/listview/20210129000805.jpg" loading="lazy"></p><p>以下红色圈圈的部分就是我们需要设置的部分</p><p><img src="/images/Android/listview/185241.jpg" loading="lazy"></p><blockquote><p>其中这里面有一个非常重要的方法，就是 inflate，inflate 方法是用于将我们自定义的 layout_list_item.xml 文件自动填充到 View 中，只有填充进去了，才能正确的调用到这个 layout 文件中设置的 id 值。</p><p>LayoutInflater 可以看成是一个布局扩充的一个类，将 layout_list_item 自定义的组件扩到 activity_list_view 这个组件中。它有两个方法，一个 <code>from</code> 方法，用于指定 layout_list_item 是 activity_list_view 组件管理的；一个 <code>inflate</code> 方法，将 layout_list_item 填充到 activity_list_view 中。<br>但是，执行完 inflate 方法，并没有将这些组件真正的填充进去，只是给这些组件“创建了一个座位”。要将这些组件保存起来，需要用到 view 中的 <code>setTag</code> 方法来将找到的组件真正的保存起来。setTag 传入的参数类型为 Object，因此，需要创建一个类，用于保存这些 item 中的组件。</p></blockquote><p>以下伪代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个布局扩充类</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">LayoutInflater</span> <span class="variable">layoutInflater</span> <span class="operator">=</span> LayoutInflater.from(ListViewActivity.<span class="built_in">this</span>);</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 自定义的内部类，用它来将 layout_list_item 中的组件将其保存起来</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ViewHolder</span> &#123;</span><br><span class="line">    ImageView imageView;</span><br><span class="line">    TextView tvClock, tvContent, tvTitle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> View <span class="title function_">getView</span><span class="params">(<span class="type">int</span> i, View view, ViewGroup viewGroup)</span> &#123;</span><br><span class="line">    ViewHolder viewHolder;</span><br><span class="line">    <span class="comment">// 第一次调用 getView 方法时。首先这个自定义的组件肯定是没有进行填充进去。</span></span><br><span class="line">    <span class="keyword">if</span>(view == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">// 开始扩充“座位”，并将 layout_list_item 保存到变量中。</span></span><br><span class="line">        view = layoutInflater.inflate(R.layout.layout_list_item, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个自定义的对象，将找到的组件放到对象中</span></span><br><span class="line">        viewHolder = <span class="keyword">new</span> <span class="title class_">ViewHolder</span>();</span><br><span class="line"></span><br><span class="line">        viewHolder.imageView = view.findViewById(R.id.iv); <span class="comment">// 找到 ImageView 组件</span></span><br><span class="line">        viewHolder.tvClock = view.findViewById(R.id.tv_time); <span class="comment">// 找到 TextView 组件</span></span><br><span class="line">        viewHolder.tvTitle = view.findViewById(R.id.tv_title); <span class="comment">// 找到 TextView 组件</span></span><br><span class="line">        viewHolder.tvContent = view.findViewById(R.id.tv_content); <span class="comment">// 找到 TextView 组件</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 全部找齐，保存这些 item 中的组件。</span></span><br><span class="line">        view.setTag(viewHolder);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 第二次进行调用，此时这个自定义的组件已经是填充进去的，将其获取到。方便设置值</span></span><br><span class="line">        viewHolder = (ViewHolder) view.getTag();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 给控件赋值</span></span><br><span class="line">    viewHolder.tvClock.setText(<span class="string">&quot;2021-1-28&quot;</span>);</span><br><span class="line">    viewHolder.tvTitle.setText(<span class="string">&quot;Hello！&quot;</span>);</span><br><span class="line">    viewHolder.tvContent.setText(<span class="string">&quot;我是可爱的祢豆子 n(*≧▽≦*)n&quot;</span>);</span><br><span class="line">    <span class="comment">// 添加网络图片</span></span><br><span class="line">    <span class="keyword">if</span>(i%<span class="number">2</span> != <span class="number">0</span>)</span><br><span class="line">        Glide.with(context).load(<span class="string">&quot;http://www.topacg.com/wp-content/uploads&quot;</span> +</span><br><span class="line">            <span class="string">&quot;/2020/03/frc-11c619718c036bf579c246cdd07e6d77.jpeg&quot;</span>).into(viewHolder.imageView);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        Glide.with(context).load(<span class="string">&quot;https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fc-ssl.&quot;</span> +</span><br><span class="line">                <span class="string">&quot;duitang.com%2Fuploads%2Fitem%2F201912%2F10%2F20191210915&quot;</span> +</span><br><span class="line">                <span class="string">&quot;02_8PjP3.thumb.700_0.jpeg&amp;refer=http%3A%2F%2Fc-ssl.duitang.&quot;</span> +</span><br><span class="line">                <span class="string">&quot;com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg&quot;</span>).into(viewHolder.imageView);</span><br><span class="line"></span><br><span class="line">    Log.d(<span class="string">&quot;id=&quot;</span>, i+<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> view;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="完整代码如下"><a href="#完整代码如下" class="headerlink" title="完整代码如下"></a>完整代码如下</h4><p>以下代码用到了构造方法，用于在创建该 Adapter 对象时，将当前的 ListViewActivity 给传入进去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bestguo.androidlayout.listview;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"><span class="keyword">import</span> android.widget.BaseAdapter;</span><br><span class="line"><span class="keyword">import</span> android.widget.ImageView;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bumptech.glide.Glide;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.bestguo.androidlayout.R;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by BestGuo on 2021/1/28.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyListAdapter</span> <span class="keyword">extends</span> <span class="title class_">BaseAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 传入的 Activity，也就是 ListItemActivity</span></span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line">    <span class="comment">// 获取自己设置的布局</span></span><br><span class="line">    <span class="keyword">private</span> LayoutInflater layoutInflater;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyListAdapter</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.context = context;</span><br><span class="line">        <span class="built_in">this</span>.layoutInflater = LayoutInflater.from(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 列表的长度是多少</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 整型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">15</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过索引获取内容，但是我们目前没有内容，因此先放一下</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getItem</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取id，具体是什么样的id还需要看什么场景</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getItemId</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义的内部类，用它来将 layout_list_item 中的组件将其保存起来</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ViewHolder</span> &#123;</span><br><span class="line">        ImageView imageView;</span><br><span class="line">        TextView tvClock, tvContent, tvTitle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 列表中的样式每一项的设置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i 每一个 item 中的第几项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> view 对应的 item 布局</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> viewGroup 不知道，到时候用到在介绍</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">getView</span><span class="params">(<span class="type">int</span> i, View view, ViewGroup viewGroup)</span> &#123;</span><br><span class="line">        ViewHolder viewHolder;</span><br><span class="line">        <span class="comment">// 第一次调用 getView 方法时。首先这个自定义的组件肯定是没有进行填充进去。</span></span><br><span class="line">        <span class="keyword">if</span>(view == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 开始扩充“座位”，并将 layout_list_item 保存到变量中。</span></span><br><span class="line">            view = layoutInflater.inflate(R.layout.layout_list_item, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建一个自定义的对象，将找到的组件放到对象中</span></span><br><span class="line">            viewHolder = <span class="keyword">new</span> <span class="title class_">ViewHolder</span>();</span><br><span class="line"></span><br><span class="line">            viewHolder.imageView = view.findViewById(R.id.iv); <span class="comment">// 找到 ImageView 组件</span></span><br><span class="line">            viewHolder.tvClock = view.findViewById(R.id.tv_time); <span class="comment">// 找到 TextView 组件</span></span><br><span class="line">            viewHolder.tvTitle = view.findViewById(R.id.tv_title); <span class="comment">// 找到 TextView 组件</span></span><br><span class="line">            viewHolder.tvContent = view.findViewById(R.id.tv_content); <span class="comment">// 找到 TextView 组件</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 全部找齐，保存这些 item 中的组件。</span></span><br><span class="line">            view.setTag(viewHolder);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 第二次进行调用，此时这个自定义的组件已经是填充进去的，将其获取到。方便设置值</span></span><br><span class="line">            viewHolder = (ViewHolder) view.getTag();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 给控件赋值</span></span><br><span class="line">        viewHolder.tvClock.setText(<span class="string">&quot;2021-1-28&quot;</span>);</span><br><span class="line">        viewHolder.tvTitle.setText(<span class="string">&quot;Hello！&quot;</span>);</span><br><span class="line">        viewHolder.tvContent.setText(<span class="string">&quot;我是可爱的祢豆子 n(*≧▽≦*)n&quot;</span>);</span><br><span class="line">        <span class="comment">// 添加网络图片</span></span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">2</span> != <span class="number">0</span>)</span><br><span class="line">            Glide.with(context).load(<span class="string">&quot;http://www.topacg.com/wp-content/uploads&quot;</span> +</span><br><span class="line">                <span class="string">&quot;/2020/03/frc-11c619718c036bf579c246cdd07e6d77.jpeg&quot;</span>).into(viewHolder.imageView);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            Glide.with(context).load(<span class="string">&quot;https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fc-ssl.&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;duitang.com%2Fuploads%2Fitem%2F201912%2F10%2F20191210915&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;02_8PjP3.thumb.700_0.jpeg&amp;refer=http%3A%2F%2Fc-ssl.duitang.&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg&quot;</span>).into(viewHolder.imageView);</span><br><span class="line"></span><br><span class="line">        Log.d(<span class="string">&quot;id=&quot;</span>, i+<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ListViewActivity.java 文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bestguo.androidlayout.listview;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.AdapterView;</span><br><span class="line"><span class="keyword">import</span> android.widget.ListView;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.bestguo.androidlayout.R;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by BestGuo on 2021/1/28.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListViewActivity</span> <span class="keyword">extends</span> <span class="title class_">Activity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ListView listView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_list_view);</span><br><span class="line"></span><br><span class="line">        listView = findViewById(R.id.list_view);</span><br><span class="line">        <span class="comment">// 设置一个适配器</span></span><br><span class="line">        listView.setAdapter(<span class="keyword">new</span> <span class="title class_">MyListAdapter</span>(<span class="built_in">this</span>));</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h3><p>运行效果如下</p><p><img src="/images/Android/listview/c7fud-lxf03.gif" loading="lazy"></p><p><del>别写了，再写到我脑阔都晕咯🙄🙄🙄</del></p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>事件这一部分还是较为简单，ListView 共有两种常用的事件，分别是 <code>setOnItemClickListener</code> 和 <code>setOnItemLongClickListener</code> 两个方法。一个是手指短按的事件，另外一个是长按的事件。</p><p>案例如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bestguo.androidlayout.listview;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.AdapterView;</span><br><span class="line"><span class="keyword">import</span> android.widget.ListView;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.bestguo.androidlayout.R;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by BestGuo on 2021/1/28.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListViewActivity</span> <span class="keyword">extends</span> <span class="title class_">Activity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ListView listView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_list_view);</span><br><span class="line"></span><br><span class="line">        listView = findViewById(R.id.list_view);</span><br><span class="line">        <span class="comment">// 设置一个适配器</span></span><br><span class="line">        listView.setAdapter(<span class="keyword">new</span> <span class="title class_">MyListAdapter</span>(<span class="built_in">this</span>));</span><br><span class="line">        <span class="comment">// 设置点击某一项的监听事件</span></span><br><span class="line">        listView.setOnItemClickListener(<span class="keyword">new</span> <span class="title class_">AdapterView</span>.OnItemClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onItemClick</span><span class="params">(AdapterView&lt;?&gt; adapterView, View view, <span class="type">int</span> i, <span class="type">long</span> l)</span> &#123;</span><br><span class="line">                Toast.makeText(ListViewActivity.<span class="built_in">this</span>, <span class="string">&quot;点击的是第&quot;</span> + i + <span class="string">&quot;项！&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 设置点击某一项长按的监听事件</span></span><br><span class="line">        listView.setOnItemLongClickListener(<span class="keyword">new</span> <span class="title class_">AdapterView</span>.OnItemLongClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onItemLongClick</span><span class="params">(AdapterView&lt;?&gt; adapterView, View view, <span class="type">int</span> i, <span class="type">long</span> l)</span> &#123;</span><br><span class="line">                Toast.makeText(ListViewActivity.<span class="built_in">this</span>, <span class="string">&quot;长按的是第&quot;</span> + i + <span class="string">&quot;项！&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="/images/Android/listview/npxzw-zrkgv.gif" loading="lazy"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总算是吧这根骨头给啃了，可以好好的休息一下了，现在已经凌晨1点多了。</p><p>之后的网格布局，我感觉其实都差不多，后面的就好一些吧。</p>]]></content>
      
      
      <categories>
          
          <category> Android 开发的学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 入门篇之 RadioButton 组件的使用</title>
      <link href="/journal/radiobutton-component/"/>
      <url>/journal/radiobutton-component/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="我想要说"><a href="#我想要说" class="headerlink" title="我想要说"></a>我想要说</h2><p>今天，学习了 RadioButton 组件。以及 RadioGroup 组件的实现单选功能</p><p>以及自定义的单选样式。</p><p>还有使用 setOnCheckedChangeListener 用来监听哪个单选按钮是被选中的。</p><span id="more"></span><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="简单的单选按钮"><a href="#简单的单选按钮" class="headerlink" title="简单的单选按钮"></a>简单的单选按钮</h3><p>单选按钮的创建非常简单，使用 RadioButton 组件即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;top.bestguo.androidlayout.RadioButtonActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">RadioButton</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/rb1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;30dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;男&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;#ff6600&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;18sp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下<br><img src="/images/Android/radio/frt72-kgt05.gif" loading="lazy"></p><h3 id="使用按钮组"><a href="#使用按钮组" class="headerlink" title="使用按钮组"></a>使用按钮组</h3><p>由于单选按钮是有多个，需要将这些单选按钮放到一个单选按钮组 RadioGroup ，来实现单选的效果。</p><p>单选按钮组中，有设置按钮的摆放顺序的属性。即 <code>orientation</code> 属性，有两个值 <code>horizontal</code> 和 <code>vertical</code></p><p>以下实例中设置的是水平摆放，单选按钮组默认设置的是竖直的摆放方式。</p><p>当然，在按钮组中，可以设置其中的一个按钮是否已经选中，选中的属性为 <code>checked</code> ，<code>true</code>为选中，<code>false</code> 为未选中。</p><p>也可以决定禁用该按钮，通过设置 <code>enable</code> 属性来设置该按钮是否能选，<code>true</code> 为可选，<code>false</code> 为不可选。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;top.bestguo.androidlayout.RadioButtonActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">RadioGroup</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/rg1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 设置选中 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RadioButton</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/rb1&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;30dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;男&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">&quot;#ff6600&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;18sp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:checked</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">RadioButton</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/rb2&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;30dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;女&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">&quot;#ff6600&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;18sp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">RadioGroup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下</p><p><img src="/images/Android/radio/v9z67-tcaba.gif" loading="lazy"></p><h3 id="自定义单选样式"><a href="#自定义单选样式" class="headerlink" title="自定义单选样式"></a>自定义单选样式</h3><p>和前面设置按钮一样，也可以自定义属于自己的单选按钮效果。</p><p>在自定义单选按钮效果时，可以考虑将默认的单选按钮的圆圈给去除。去除的属性为 <code>button="@null"</code> 这样样式就不会展示出来。</p><p>radio_button.xml 文件样式代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:state_checked</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shape</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">&quot;#a60&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">&quot;5dp&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:state_checked</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shape</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">stroke</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:color</span>=<span class="string">&quot;#a60&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:width</span>=<span class="string">&quot;1dp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">corners</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:radius</span>=<span class="string">&quot;5dp&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上的样式代码，由于是否选中。所以 item 中的判断规则为 <code>state_checked</code></p><p>自定义单选框的代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;top.bestguo.androidlayout.RadioButtonActivity&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">&quot;10dp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">RadioGroup</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;40dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">RadioButton</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/rb3&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;40dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;30dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;@drawable/radio_button&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;男&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:checked</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:button</span>=<span class="string">&quot;@null&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textAlignment</span>=<span class="string">&quot;center&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">RadioButton</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/rb4&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;40dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;30dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;@drawable/radio_button&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;女&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:button</span>=<span class="string">&quot;@null&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textAlignment</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;5dp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">RadioGroup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下</p><p><img src="/images/Android/radio/5tckx-gex7o.gif" loading="lazy"></p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>按钮和按钮组都有单独的事件。为了监听哪个按钮被选中，那么需要监听按钮组，来监听是哪个按钮被选中的状态。</p><p>通过 setOnCheckedChangeListener 这个方法来监听哪个被选中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bestguo.androidlayout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.support.annotation.IdRes;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.widget.RadioButton;</span><br><span class="line"><span class="keyword">import</span> android.widget.RadioGroup;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RadioButtonActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RadioGroup rg1;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_radio_button);</span><br><span class="line"></span><br><span class="line">        rg1 = (RadioGroup) findViewById(R.id.rg1);</span><br><span class="line">        <span class="comment">// 设置 setOnCheckedChangeListener 监听事件</span></span><br><span class="line">        rg1.setOnCheckedChangeListener(<span class="keyword">new</span> <span class="title class_">RadioGroup</span>.OnCheckedChangeListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCheckedChanged</span><span class="params">(RadioGroup radioGroup, <span class="meta">@IdRes</span> <span class="type">int</span> i)</span> &#123;</span><br><span class="line">                <span class="comment">// 获取某个单选按钮的 id ，就像是之前通过 id 来获取按钮、文本框等组件时一样的</span></span><br><span class="line">                <span class="comment">// 只不过这里单选按钮的 id 是通过发生的事件来传递过来的。</span></span><br><span class="line">                <span class="type">RadioButton</span> <span class="variable">radioButton</span> <span class="operator">=</span> radioGroup.findViewById(i);</span><br><span class="line">                Toast.makeText(RadioButtonActivity.<span class="built_in">this</span>, <span class="string">&quot;点击了“&quot;</span> + radioButton.getText() + <span class="string">&quot;”&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果如下<br><img src="/images/Android/radio/5wv6w-fh1x9.gif" loading="lazy"></p><p>效果图的第一个按钮组是竖直的原因，是因为我将 <code>orientation</code> 的属性删除了，所以就变成里竖直的状态。😊😊</p>]]></content>
      
      
      <categories>
          
          <category> Android 开发的学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 入门篇之 CheckBox 组件的使用</title>
      <link href="/journal/checkbox-component/"/>
      <url>/journal/checkbox-component/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="我想要说"><a href="#我想要说" class="headerlink" title="我想要说"></a>我想要说</h2><p>今天，学习了 CheckBox 组件。以及 CheckBox 组件的实现复选功能</p><p>以及自定义的复选样式。</p><p>和单选框不同的是，复选框是不需要按钮组的。其实复选框本来就是多选的。😊😊</p><p>还有使用 setOnCheckedChangeListener 用来监听哪个复选按钮是被选中的。</p><span id="more"></span><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="简单的复选按钮"><a href="#简单的复选按钮" class="headerlink" title="简单的复选按钮"></a>简单的复选按钮</h3><p>简单的复选框示例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;top.bestguo.androidlayout.CheckBoxActivity&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">&quot;10dp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;你喜欢哪些编程语言：&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;20sp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;#000&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginBottom</span>=<span class="string">&quot;15dp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">CheckBox</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/cb_java&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Java&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;18sp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">CheckBox</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/cb_python&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Python&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;18sp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">CheckBox</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/cb_js&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;JavaScript&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;18sp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">CheckBox</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/c_plus&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;C++&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;18sp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">CheckBox</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/c&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;C&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;18sp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下</p><p><img src="/images/Android/checkbox/l5tpb-jh6lh.gif" loading="lazy"></p><h3 id="自定义复选按钮样式"><a href="#自定义复选按钮样式" class="headerlink" title="自定义复选按钮样式"></a>自定义复选按钮样式</h3><p>除了 <code>background</code> 可以设置其对应的样式之外，还有 <code>button</code> 属性也是可以直接设置其按钮的样式。</p><p>前面在自定义单选框的样式是使用 background ，当然单选框的属性 <code>button</code> 也是可以直接设置的。具体看是要有什么需求。</p><p>自定义复选框样式代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:state_checked</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/checkbox_outline_bl&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:state_checked</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/checkbox_outline&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></span><br></pre></td></tr></table></figure><p>自定义复选框</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;top.bestguo.androidlayout.CheckBoxActivity&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">&quot;10dp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">CheckBox</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/c&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;C&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;18sp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">RelativeLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;20dp&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/text&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;你喜欢看的弹幕网有哪些：&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;18sp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">&quot;#000&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">CheckBox</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/acfun&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;AcFun&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:button</span>=<span class="string">&quot;@drawable/bg_checkbox&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;18sp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_below</span>=<span class="string">&quot;@id/text&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;15dp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">CheckBox</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/bilibili&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;Bilibili&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;18sp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:button</span>=<span class="string">&quot;@drawable/bg_checkbox&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_below</span>=<span class="string">&quot;@id/text&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_toEndOf</span>=<span class="string">&quot;@id/acfun&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;15dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginStart</span>=<span class="string">&quot;10dp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">CheckBox</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/niconico&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;NicoNico&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;18sp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:button</span>=<span class="string">&quot;@drawable/bg_checkbox&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_toEndOf</span>=<span class="string">&quot;@id/bilibili&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_below</span>=<span class="string">&quot;@id/text&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;15dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginStart</span>=<span class="string">&quot;10dp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下</p><p><img src="/images/Android/checkbox/esrx6-r0l5w.gif" loading="lazy"></p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>和之前的单选框一样的，也是通过 setOnCheckedChangeListener 这个方法来监听哪个复选框是被选中的状态。</p><p>以下示例以自定义的按钮样式来监听这些事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bestguo.androidlayout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.widget.CheckBox;</span><br><span class="line"><span class="keyword">import</span> android.widget.CompoundButton;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheckBoxActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CheckBox acfun, bilibili, niconico;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_check_box);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分别获取 AcFun、bilibili 和 niconico 的复选框</span></span><br><span class="line">        acfun = (CheckBox) findViewById(R.id.acfun);</span><br><span class="line">        bilibili = (CheckBox) findViewById(R.id.bilibili);</span><br><span class="line">        niconico = (CheckBox) findViewById(R.id.niconico);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 为 AcFun 设置选中事件</span></span><br><span class="line">        acfun.setOnCheckedChangeListener(<span class="keyword">new</span> <span class="title class_">CompoundButton</span>.OnCheckedChangeListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCheckedChanged</span><span class="params">(CompoundButton compoundButton, <span class="type">boolean</span> b)</span> &#123;</span><br><span class="line">                <span class="comment">// 选中了就提示&quot;你选了AcFun&quot; ，反选就提示&quot;你反选了AcFun&quot;</span></span><br><span class="line">                Toast.makeText(CheckBoxActivity.<span class="built_in">this</span>, b ? <span class="string">&quot;你选了AcFun&quot;</span> : <span class="string">&quot;你反选了AcFun&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 为 bilibili 设置点击事件</span></span><br><span class="line">        bilibili.setOnCheckedChangeListener(<span class="keyword">new</span> <span class="title class_">CompoundButton</span>.OnCheckedChangeListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCheckedChanged</span><span class="params">(CompoundButton compoundButton, <span class="type">boolean</span> b)</span> &#123;</span><br><span class="line">                Toast.makeText(CheckBoxActivity.<span class="built_in">this</span>, b ? <span class="string">&quot;你选了bilibili&quot;</span> : <span class="string">&quot;你反选了bilibili&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 为 niconico 设置点击事件</span></span><br><span class="line">        niconico.setOnCheckedChangeListener(<span class="keyword">new</span> <span class="title class_">CompoundButton</span>.OnCheckedChangeListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCheckedChanged</span><span class="params">(CompoundButton compoundButton, <span class="type">boolean</span> b)</span> &#123;</span><br><span class="line">                Toast.makeText(CheckBoxActivity.<span class="built_in">this</span>, b ? <span class="string">&quot;你选了niconico&quot;</span> : <span class="string">&quot;你反选了niconico&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下</p><p><img src="/images/Android/checkbox/kvcxf-cfrq4.gif" loading="lazy"></p><p>什么？<del>AcFun、bilibili、niconico 打钱！！😂😂😂</del></p>]]></content>
      
      
      <categories>
          
          <category> Android 开发的学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 入门篇之 EditText 组件的使用</title>
      <link href="/journal/edittext-component/"/>
      <url>/journal/edittext-component/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="我想要说"><a href="#我想要说" class="headerlink" title="我想要说"></a>我想要说</h2><p>今天学习了 EditTable 组件，也就是文本框。</p><p>这次，通过文本框和前面的按钮进行组合。就可以做一个简单的登录界面了。</p><p>所以本次写的就是登录界面以及获取用户名和密码</p><span id="more"></span><h2 id="登录注册实例"><a href="#登录注册实例" class="headerlink" title="登录注册实例"></a>登录注册实例</h2><h3 id="界面代码部分"><a href="#界面代码部分" class="headerlink" title="界面代码部分"></a>界面代码部分</h3><p>界面使用的是 RelativeLayout 布局，但是这里使用 LinearLayout 布局其实会更加的方便。因为这样可以避免设置“谁的下方是谁”这种浪费时间的属性，在实际运用中，能用简单的布局就用简单的布局为好。</p><p>相对布局中共有 4 个控件，一个是账号文本框，一个是密码的文本框。还有两个按钮，一个登录按钮和一个注册的按钮。</p><p>其中账号和密码分别设置和 Hint 属性，Hint 与 HTML 中的 placeholder 是一样的，分别都是给用户的一些提示。除了这些，还使用到了 drawableLeft 属性，设置了用户图标的锁的图标，分别在用户输入框和密码输入框中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">&quot;15dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;top.bestguo.androidlayout.EditTextActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 设置第一个文本框，类型为用户名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/user&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">&quot;账号&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;20sp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@drawable/input_text&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawableStart</span>=<span class="string">&quot;@drawable/user&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawablePadding</span>=<span class="string">&quot;5dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:padding</span>=<span class="string">&quot;7dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:maxLines</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 设置一个文本框，类型为密码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/password&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;20sp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_below</span>=<span class="string">&quot;@id/user&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;15dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:inputType</span>=<span class="string">&quot;textPassword&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@drawable/input_text&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">&quot;密码&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawablePadding</span>=<span class="string">&quot;5dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:padding</span>=<span class="string">&quot;7dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawableStart</span>=<span class="string">&quot;@drawable/lock&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:maxLines</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 设置一个登录按钮 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/login&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_below</span>=<span class="string">&quot;@id/password&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;25dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;登录&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;20dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;#fff&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;#6cf&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 设置一个注册按钮 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_below</span>=<span class="string">&quot;@id/login&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;15dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;注册&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;20dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;#fff&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;#6cf&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果如下</p><p><img src="/images/Android/edittext/1q7gs-26mdo.gif" loading="lazy"></p><h3 id="java-代码部分"><a href="#java-代码部分" class="headerlink" title="java 代码部分"></a>java 代码部分</h3><p>java 代码部分主要是通过 addTextChangeListener 这个监听器来监听这两个文本域中发生的变化，将获取到的用户名和密码保存到定义的成员变量中，然后通过登录按钮的点击事件来获取用户名和密码，最后使用 Toast 来展示用户输入的用户名和密码。</p><blockquote><p><font color="red">注意：在实际的开发是，不能够这样直接将用户名和密码直接展示出来，这很做非常危险。因为这只是一个简单的示例，目的是如何获取用户名和密码的</font></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bestguo.androidlayout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.text.Editable;</span><br><span class="line"><span class="keyword">import</span> android.text.TextWatcher;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EditTextActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义了一个按钮</span></span><br><span class="line">    <span class="keyword">private</span> Button loginBtn;</span><br><span class="line">    <span class="comment">// 定义了两个文本框，一个用户输入框，一个密码输入框</span></span><br><span class="line">    <span class="keyword">private</span> EditText userEdit, passwordEdit;</span><br><span class="line">    <span class="comment">// 设置用户名和密码，将获取到的用户名和密码保存到成员变量中</span></span><br><span class="line">    <span class="keyword">private</span> String user, password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_edit_text);</span><br><span class="line">        <span class="comment">// 得到用户名和密码的文本框</span></span><br><span class="line">        userEdit = (EditText) findViewById(R.id.user);</span><br><span class="line">        passwordEdit = (EditText) findViewById(R.id.password);</span><br><span class="line">        <span class="comment">// 创建一个监听器，用来监听文本框的内容改变。</span></span><br><span class="line">        <span class="comment">// 同时，将改变的内容，保存到定义好的成员变量中。</span></span><br><span class="line">        <span class="comment">// 在这里面可以编写用户名的判断，是否符合规则等等。</span></span><br><span class="line">        userEdit.addTextChangedListener(<span class="keyword">new</span> <span class="title class_">TextWatcher</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeTextChanged</span><span class="params">(CharSequence charSequence, <span class="type">int</span> i, <span class="type">int</span> i1, <span class="type">int</span> i2)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onTextChanged</span><span class="params">(CharSequence charSequence, <span class="type">int</span> i, <span class="type">int</span> i1, <span class="type">int</span> i2)</span> &#123;</span><br><span class="line">                user = charSequence.toString();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterTextChanged</span><span class="params">(Editable editable)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 效果和上面一样的</span></span><br><span class="line">        passwordEdit.addTextChangedListener(<span class="keyword">new</span> <span class="title class_">TextWatcher</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeTextChanged</span><span class="params">(CharSequence charSequence, <span class="type">int</span> i, <span class="type">int</span> i1, <span class="type">int</span> i2)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onTextChanged</span><span class="params">(CharSequence charSequence, <span class="type">int</span> i, <span class="type">int</span> i1, <span class="type">int</span> i2)</span> &#123;</span><br><span class="line">                password = charSequence.toString();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterTextChanged</span><span class="params">(Editable editable)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 得到登录按钮</span></span><br><span class="line">        loginBtn = (Button) findViewById(R.id.login);</span><br><span class="line">        <span class="comment">// 通过点击事件获取用户名和密码</span></span><br><span class="line">        loginBtn.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                <span class="comment">// 将用户名和密码通过提示框来展示</span></span><br><span class="line">                Toast.makeText(EditTextActivity.<span class="built_in">this</span>, <span class="string">&quot;用户名为：&quot;</span> + user + <span class="string">&quot;，密码为：&quot;</span> + password, Toast.LENGTH_LONG).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下</p><p><img src="/images/Android/edittext/aplku-fuxmt.gif" loading="lazy"></p><p>至于为什么在输入密码的时候会黑屏，这肯定是华为的安全机制。录屏过程中，不能让别人知道密码是多少。这一点，华为很赞！</p>]]></content>
      
      
      <categories>
          
          <category> Android 开发的学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 入门篇之 Button 组件的使用</title>
      <link href="/journal/Button-component/"/>
      <url>/journal/Button-component/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="我想要说"><a href="#我想要说" class="headerlink" title="我想要说"></a>我想要说</h2><p>今天学习了 Button 组件的使用，还有如何自定义按钮样式。<br>还学习了点击事件。<br>还学习了 Toast 提示框。</p><p>同时也结合了前面的相对布局系统。综合性稍微强一些，但是也不会太难。</p><p>FIFA 不多说，上示例。</p><span id="more"></span><h2 id="Button-示例"><a href="#Button-示例" class="headerlink" title="Button 示例"></a>Button 示例</h2><h3 id="简单的-Button"><a href="#简单的-Button" class="headerlink" title="简单的 Button"></a>简单的 Button</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;top.bestguo.androidlayout.ButtonActivity&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">&quot;15dp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/btn1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;40dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;按钮1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;20sp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;#fff&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;#f00&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/images/Android/button/QQ%E6%88%AA%E5%9B%BE20210125171412.jpg" loading="lazy"></p><p>该示例设置了一个 Button，按钮的名字为“按钮1”，宽度和父宽度一样，高度为 40dp，字体大小为 20sp，背景颜色为#f00，文字颜色为 #fff</p><h3 id="带圆角和透明的-Button"><a href="#带圆角和透明的-Button" class="headerlink" title="带圆角和透明的 Button"></a>带圆角和透明的 Button</h3><p>设置带圆角的 Button，无法在 Button 属性中直接设置圆角。需要新建一个 Drawable 的 xml 文件来实现圆角按钮。</p><p>设置的圆角需要在 res 文件夹的 drawable 文件夹中创建一个 xml 用来标识圆角的。</p><p>设置圆角的 drawable 代码，对应的文件为 bg_btn2.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:shape</span>=<span class="string">&quot;rectangle&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置实心颜色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">solid</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:color</span>=<span class="string">&quot;#f90&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 设置圆角 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">corners</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:radius</span>=<span class="string">&quot;5dp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br></pre></td></tr></table></figure><p>设置透明的 drawable，对应文件为 bg_btn3.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:shape</span>=<span class="string">&quot;rectangle&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置边为实线的边 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">stroke</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:width</span>=<span class="string">&quot;1dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:color</span>=<span class="string">&quot;#f90&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 设置圆角 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">corners</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:radius</span>=<span class="string">&quot;5dp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在这个 shape 标签对中，可以设置 6 个子标签。分别是 size、corners、gradient、padding、solid、stroke。</p><p>目前在这里使用了两个，一个是 solid，另外一个是 corners。未来要是用到了，就再说吧。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置圆角按钮 --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;top.bestguo.androidlayout.ButtonActivity&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">&quot;15dp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/btn2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;40dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;按钮2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;20sp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;#fff&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@drawable/bg_btn2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_below</span>=<span class="string">&quot;@id/btn1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;10dp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/btn3&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;40dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;按钮3&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;20sp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;#f90&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@drawable/bg_btn3&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_below</span>=<span class="string">&quot;@id/btn2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;10dp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下</p><p><img src="/images/Android/button/QQ%E6%88%AA%E5%9B%BE20210125173611.jpg" loading="lazy"></p><h3 id="改变的按钮样式"><a href="#改变的按钮样式" class="headerlink" title="改变的按钮样式"></a>改变的按钮样式</h3><p>本实例是通过手指点击按钮，然后按钮的颜色发生了变化。按钮的颜色的变化也是需要新建一个 Drawable 的 xml 文件来实现。</p><p>设置圆角的 drawable 代码，对应的文件为 bg_btn4.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用selector来改变其元素的状态 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 按下去的状态 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:state_pressed</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shape</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">&quot;#a60&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">&quot;5dp&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 未按下的状态 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:state_pressed</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shape</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">&quot;#f90&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">&quot;5dp&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></span><br></pre></td></tr></table></figure><p>按钮 4 的 xml 代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;top.bestguo.androidlayout.ButtonActivity&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">&quot;15dp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/btn4&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;40dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;按钮4&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;20sp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;#fff&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@drawable/bg_btn4&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_below</span>=<span class="string">&quot;@id/btn3&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;10dp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下</p><p><img src="/images/Android/button/y1vao-k2m0e.gif" loading="lazy"></p><h2 id="按钮点击事件"><a href="#按钮点击事件" class="headerlink" title="按钮点击事件"></a>按钮点击事件</h2><p>该实例展示了，点击按钮时出现提示框。</p><p>设置点击事件共有两种方法，一个是在 xml 文件中，直接使用 onClick 方法来调用 java 代码中所对应的代码。<br>另外一种方法就是在 java 代码中设置 setOnClickListener。</p><h3 id="使用-xml-的方式"><a href="#使用-xml-的方式" class="headerlink" title="使用 xml 的方式"></a>使用 xml 的方式</h3><p>使用 xml 的实例是在“按钮4”中进行设置的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;top.bestguo.androidlayout.ButtonActivity&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">&quot;15dp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/btn4&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;40dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;按钮4&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;20sp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;#fff&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@drawable/bg_btn4&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_below</span>=<span class="string">&quot;@id/btn3&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:onClick</span>=<span class="string">&quot;showToast&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>java 代码中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bestguo.androidlayout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ButtonActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_button);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置的事件方法，必须要带一个参数 View，否则程序报错</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showToast</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="comment">// 消息提示框</span></span><br><span class="line">        Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;BestGuo, 吓了你一跳哦，并提示btn4被点击了&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>设置的事件方法，必须要带一个参数 View，否则程序将闪退、报错。</p><h3 id="使用-java-代码的方式"><a href="#使用-java-代码的方式" class="headerlink" title="使用 java 代码的方式"></a>使用 java 代码的方式</h3><p>使用 java 代码的实例是在“按钮3”中进行设置的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;top.bestguo.androidlayout.ButtonActivity&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">&quot;15dp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/btn3&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;40dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;按钮3&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;20sp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;#f90&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@drawable/bg_btn3&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_below</span>=<span class="string">&quot;@id/btn2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;10dp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>java 代码中相关设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bestguo.androidlayout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ButtonActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Button btn3;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_button);</span><br><span class="line"></span><br><span class="line">        btn3 = (Button) findViewById(R.id.btn3);</span><br><span class="line">        btn3.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                Toast.makeText(ButtonActivity.<span class="built_in">this</span>, <span class="string">&quot;btn3被点击了&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TextView 的点击事件</span></span><br><span class="line">        tv = (TextView) findViewById(R.id.tv1);</span><br><span class="line">        tv.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                Toast.makeText(ButtonActivity.<span class="built_in">this</span>, <span class="string">&quot;TextView被点击了&quot;</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="点击事件拓展"><a href="#点击事件拓展" class="headerlink" title="点击事件拓展"></a>点击事件拓展</h3><p>除了点击事件可以在按钮上有，在其它组件上，甚至是各种布局系统都有自己的点击事件。</p><p>以下展示在 TextView 的点击事件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;top.bestguo.androidlayout.ButtonActivity&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">&quot;15dp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;40dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_below</span>=<span class="string">&quot;@id/btn4&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;TextView&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;20sp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textAlignment</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:paddingTop</span>=<span class="string">&quot;8dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;#c87de3&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;#fff&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>java 代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bestguo.androidlayout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ButtonActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView tv;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_button);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TextView 的点击事件</span></span><br><span class="line">        tv = (TextView) findViewById(R.id.tv1);</span><br><span class="line">        tv.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                Toast.makeText(ButtonActivity.<span class="built_in">this</span>, <span class="string">&quot;TextView被点击了&quot;</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="按钮点击事件效果图"><a href="#按钮点击事件效果图" class="headerlink" title="按钮点击事件效果图"></a>按钮点击事件效果图</h3><p>以上代码的运行效果图如下</p><p><img src="/images/Android/button/16nww-zbdkg.gif" loading="lazy"></p><h2 id="补充与扩展"><a href="#补充与扩展" class="headerlink" title="补充与扩展"></a>补充与扩展</h2><blockquote><p>以下内容是对上述从突然提到的知识以及 java 中的一些非常奇怪的新写法进行一个解释</p></blockquote><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><h4 id="Toast-提示框"><a href="#Toast-提示框" class="headerlink" title="Toast 提示框"></a>Toast 提示框</h4><p>前面已经有简单运用 Toast 提示框，相信对 Toast 有一个简单的认识了吧。</p><p>Toast 最常用的方法也就是 makeText 了，后面需要传递的参数将会一一解释</p><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Toast.makeText(ButtonActivity.<span class="built_in">this</span>, <span class="string">&quot;TextView被点击了&quot;</span>, Toast.LENGTH_LONG).show();</span><br></pre></td></tr></table></figure><p>其中，第一个参数是指定哪个 Activity ，默认也指定的是当前的；第二个参数是设置要提示的内容；最后一个参数是设置提示框显示的时间，如果是 <code>Toast.LENGTH_LONG</code> 则提示框显示的时间较长，如果是 <code>Toast.LENGTH_SHORT</code> 则提示框显示的事件较短。</p><p>最后要调用 show 方法，将其显示出来。</p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><h4 id="xxx-this"><a href="#xxx-this" class="headerlink" title="xxx.this"></a>xxx.this</h4><p>在学习 Toast 的时候，会出现这种奇怪的写法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ButtonActivity.<span class="built_in">this</span></span><br><span class="line">xxxxActivity.<span class="built_in">this</span></span><br></pre></td></tr></table></figure><p>而且这种奇怪的写法偏偏还是在匿名类中发生的。先展示一波伪代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ButtonActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView tv;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        tv.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                Toast.makeText(ButtonActivity.<span class="built_in">this</span>, <span class="string">&quot;TextView被点击了&quot;</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是因为匿名类也是一个类，大家都知道 this 指的是当前的对象。可是如果在匿名类中，匿名类也是一个类，它也有属于它自己的 this 。</p><p>以上伪代码 Toast 中的第一个参数，需要传递的是 Activity ，如果直接写 this ，那么这个 this 并不是 ButtonActivity 的。如果要用到 ButtonActivity 的 this ，就只好用 <code>ButtonActivity.this</code> 这样的写法。</p>]]></content>
      
      
      <categories>
          
          <category> Android 开发的学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 入门篇之 TextView 组件的使用</title>
      <link href="/journal/TextView-component/"/>
      <url>/journal/TextView-component/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="我想要说"><a href="#我想要说" class="headerlink" title="我想要说"></a>我想要说</h2><p>终于学习到了安卓的组件部分了，今天学习了 TextView 组件。而且，TextView 是所有的后面学习到的组件的父类，比如 Button、EditText 等等的父类就是 TextView。因此我们可以定制属于自己的组件。而 TextView 的父类是 View 类。</p><p>本次学习了给 TextView 中添加图片，并设置其图片的大小。还有中划线，下划线，跑马灯以及通过使用 html 代码的方式对其设置中划线和下划线。</p><p>后面学习到 Button 等这些组件的时候再说。</p><span id="more"></span><h2 id="属性介绍"><a href="#属性介绍" class="headerlink" title="属性介绍"></a>属性介绍</h2><p>这里介绍了一些学习中使用到的属性，到时候还会继续添加并完善。</p><h3 id="共有属性"><a href="#共有属性" class="headerlink" title="共有属性"></a>共有属性</h3><table><thead><tr><th>属性名</th><th>属性描述</th></tr></thead><tbody><tr><td>focusable</td><td>设置允许为焦点</td></tr><tr><td>focusableInTouchMode</td><td>设置在触摸的时候允许焦点</td></tr></tbody></table><h3 id="TextView-的属性"><a href="#TextView-的属性" class="headerlink" title="TextView 的属性"></a>TextView 的属性</h3><table><thead><tr><th>属性名</th><th>属性描述</th></tr></thead><tbody><tr><td>text</td><td>设置文字的内容</td></tr><tr><td>textSize</td><td>设置文字大小，单位为 sp</td></tr><tr><td>textColor</td><td>设置文字颜色</td></tr><tr><td>drawableXXX</td><td>设置嵌入图片的位置，XXX 为 Start、End、Left、Right、Bottom、Top</td></tr><tr><td>drawablePadding</td><td>设置嵌入图片与文字之间的边距，单位为 dp</td></tr><tr><td>maxLines</td><td>设置显示的最大行数，无单位</td></tr><tr><td>singleLine</td><td>只显示单行，已弃用，值为 true 或 false。推荐设置为 maxLines=1。</td></tr><tr><td>ellipsize</td><td>添加省略号，添加的位置为 start（在前面显示）、middle（在中间显示）、end（在末尾显示）、marquee（跑马灯）</td></tr><tr><td>marqueeRepeatLimit</td><td>设置跑马灯重复限制，这个属性只有在设置跑马灯时才会有效果，若要无限，则使用 marquee_forever</td></tr></tbody></table><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><blockquote><p>以下实例展示了这些属性的使用</p></blockquote><h3 id="实例1，显示普通文本"><a href="#实例1，显示普通文本" class="headerlink" title="实例1，显示普通文本"></a>实例1，显示普通文本</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;top.bestguo.androidlayout.TextviewActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 常规设置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;30dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;20sp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;#000000&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Hello，我是BestGuo&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下<br><img src="/images/Android/textview/QQ%E6%88%AA%E5%9B%BE20210124232414.jpg" loading="lazy"></p><h3 id="实例2，省略号"><a href="#实例2，省略号" class="headerlink" title="实例2，省略号"></a>实例2，省略号</h3><p>当 TextView 的文字内容不够展示的时候，这个时候需要用省略号来展示。</p><p>设置省略号的属性为 android:ellipsize，本实例中设置的省略号是在末尾。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;top.bestguo.androidlayout.TextviewActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 设置超出部分不显示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/textView2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;110dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;40dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:maxLines</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:ellipsize</span>=<span class="string">&quot;end&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;20sp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;#000&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Hello，我是BestGuo&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下<br><img src="/images/Android/textview/QQ%E6%88%AA%E5%9B%BE20210124232853.jpg" loading="lazy"></p><h3 id="实例3，带图标的文字"><a href="#实例3，带图标的文字" class="headerlink" title="实例3，带图标的文字"></a>实例3，带图标的文字</h3><p>当 TextView 需要添加图片的时候，此时需要添加一个图片进去。</p><p>本实例中，设置的图片位置是在文字的右边。用到的属性是 drawableRight。</p><p>但是，需要放置的图片位置是放在 res 目录下的 drawable 目录下。这里不考虑各种机型适配的问题，先暂时这么放吧。</p><p><img src="/images/Android/textview/QQ%E6%88%AA%E5%9B%BE20210124233613.jpg" loading="lazy"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;top.bestguo.androidlayout.TextviewActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        设置带图标的文字。</span></span><br><span class="line"><span class="comment">        如果需要设置带图标，则需要设置一下 drawable。</span></span><br><span class="line"><span class="comment">        但是，由于某些图片太大，需要使用到 java 代码。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/textView3&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;65dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;40dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;20dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;#000&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;筛选&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawableRight</span>=<span class="string">&quot;@drawable/down_arrow&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawablePadding</span>=<span class="string">&quot;10dp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>设置的效果如下（画红色圈圈部分）</p><p><img src="/images/Android/textview/QQ%E6%88%AA%E5%9B%BE20210124233832.jpg" loading="lazy"></p><p>但是发现，图片实在是太大了。这张图片的源大小为 200 × 200 ，所以一整个都是图片。如果说要将图片的大小调整的话，那么就有两种方法。</p><ol><li>通过使用图形编辑工具，将图片缩小。</li><li>通过 java 代码的方式来调整。</li></ol><p>这里使用 Java 代码来调整。</p><p>使用的 Java 代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bestguo.androidlayout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.graphics.Paint;</span><br><span class="line"><span class="keyword">import</span> android.graphics.drawable.Drawable;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextviewActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    TextView tv3;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_textview);</span><br><span class="line">        tv3 = (TextView) findViewById(R.id.textView3);</span><br><span class="line">        <span class="comment">// 获取 TextView 中的图片</span></span><br><span class="line">        <span class="type">Drawable</span> <span class="variable">dw</span> <span class="operator">=</span> tv3.getResources().getDrawable(R.drawable.down_arrow);</span><br><span class="line">        dw.setBounds(<span class="number">0</span>, -<span class="number">15</span>, <span class="number">45</span>, <span class="number">45</span>); <span class="comment">// 前两个属性是设置图片的位置，后两个属性是设置图片的宽和高</span></span><br><span class="line">        <span class="comment">// 设置图片是在文字的哪个位置：左、上、右、下。这里是设置在右边</span></span><br><span class="line">        <span class="comment">// 如果还需要在 TextView 中设置几个图片，可以一起设置</span></span><br><span class="line">        tv3.setCompoundDrawables(<span class="literal">null</span>, <span class="literal">null</span>, dw, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下</p><p><img src="/images/Android/textview/QQ%E6%88%AA%E5%9B%BE20210124235725.jpg" loading="lazy"></p><p>通过使用 Java 代码进行改进，可以达到我们想要的效果了。</p><h3 id="实例4，带中划线和带下划线的文字"><a href="#实例4，带中划线和带下划线的文字" class="headerlink" title="实例4，带中划线和带下划线的文字"></a>实例4，带中划线和带下划线的文字</h3><p>带中划线和带下划线的文字，不能直接在 xml 文件中来直接编辑。只能通过 Java 代码来实现除这种效果。</p><p>同时，以下示例展示了使用两种方式来给文本添加下划线。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;top.bestguo.androidlayout.TextviewActivity&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        设置中划线，中划线和下划线需要通过 Java 代码来实现。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/textView4&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Hello，我是BestGuo&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        设置下划线，中划线和下划线需要通过 Java 代码来实现。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/textView5&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Hello，我是BestGuo&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        设置下划线，通过 html 代码</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/textView6&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Hello，我是BestGuo&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>java 代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bestguo.androidlayout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.graphics.Paint;</span><br><span class="line"><span class="keyword">import</span> android.graphics.drawable.Drawable;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.text.Html;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextviewActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    TextView tv4, tv5, tv6;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_textview);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 设置中划线的代码</span></span><br><span class="line">        tv4 = (TextView) findViewById(R.id.textView4);</span><br><span class="line">        tv4.getPaint().setFlags(Paint.STRIKE_THRU_TEXT_FLAG); <span class="comment">// 设置中划线</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置下划线的代码</span></span><br><span class="line">        tv5 = (TextView) findViewById(R.id.textView5);</span><br><span class="line">        tv5.getPaint().setFlags(Paint.UNDERLINE_TEXT_FLAG); <span class="comment">// 设置下划线</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置下划线的代码，使用 Html 的方式</span></span><br><span class="line">        tv6 = (TextView) findViewById(R.id.textView6);</span><br><span class="line">        tv6.setText(Html.fromHtml(<span class="string">&quot;&lt;u&gt;Hello，我是BestGuo&lt;/u&gt;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下</p><p><img src="/images/Android/textview/QQ%E6%88%AA%E5%9B%BE20210124235746.jpg" loading="lazy"></p><p>不懂为什么，我的华为 p10 在显示下划线效果时会出现双下划线。不懂为什么😨😨😨</p><h3 id="实例5，跑马灯"><a href="#实例5，跑马灯" class="headerlink" title="实例5，跑马灯"></a>实例5，跑马灯</h3><p>在做跑马灯的时候，太坑了。</p><p>因为设置跑马灯的效果时，它的属性必须设置成 singleLine，而不是 maxLine</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;top.bestguo.androidlayout.TextviewActivity&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        设置跑马灯。</span></span><br><span class="line"><span class="comment">        注意：设置跑马灯的效果时必须设置成 singleLine，而不是 maxLine</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:singleLine</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Hello，我是BestGuo！Hello，我是BestGuo！Hello，我是BestGuo！&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;20sp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:marqueeRepeatLimit</span>=<span class="string">&quot;marquee_forever&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:focusable</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:ellipsize</span>=<span class="string">&quot;marquee&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:focusableInTouchMode</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下（红色圈出部分）</p><p><img src="/images/Android/textview/QQ%E6%88%AA%E5%9B%BE20210124235808.jpg" loading="lazy"></p><h2 id="内容补充"><a href="#内容补充" class="headerlink" title="内容补充"></a>内容补充</h2><p>在设置 layout_width 和 layout_height 的时候值为 wrap_content。这个值的意思就是随着元素内部的变化而自动适应。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.cnblogs.com/kim-liu/p/7460252.html">https://www.cnblogs.com/kim-liu/p/7460252.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Android 开发的学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 入门篇之 RelativeLayout 布局的使用</title>
      <link href="/journal/How-to-use-relativelayout/"/>
      <url>/journal/How-to-use-relativelayout/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="我想要说"><a href="#我想要说" class="headerlink" title="我想要说"></a>我想要说</h2><p>Android 中有两个常用的布局 “LinearLayout” 和 “RelativeLayout” 两种。今天学习了 RelativeLayout 布局，所以记录一下学习此布局的一些体会吧。</p><p>RelativeLayout 布局也叫相对布局，它根据参考父容器或者相对于其它的容器所在的位置所决定的。</p><span id="more"></span><p>等我学会了用 git，未来将会代码上传到 github 上 😭😭😭</p><h2 id="布局属性的介绍与使用"><a href="#布局属性的介绍与使用" class="headerlink" title="布局属性的介绍与使用"></a>布局属性的介绍与使用</h2><h3 id="RelativeLayout-的相关属性"><a href="#RelativeLayout-的相关属性" class="headerlink" title="RelativeLayout 的相关属性"></a>RelativeLayout 的相关属性</h3><blockquote><p>当然，前面提到的 LinearLayout 中的公共属性也能够应用到该布局中</p></blockquote><table><thead><tr><th>属性名</th><th>属性描述</th></tr></thead><tbody><tr><td>layout_toStartOf</td><td>在哪个元素的左边，需要指定“哪个元素”的id</td></tr><tr><td>layout_toEndOf</td><td>在哪个元素的右边，需要指定“哪个元素”的id</td></tr><tr><td>layout_toLeftOf</td><td>同 toStartOf，不推荐使用，需要指定“哪个元素”的id</td></tr><tr><td>layout_toRightOf</td><td>同 toEndOf，不推荐使用，需要指定“哪个元素”的id</td></tr><tr><td>layout_alignParentBottom</td><td>在父空间的底部，值为 true 或者 false</td></tr><tr><td>layout_alignParentEnd</td><td>在父空间的右边，值为 true 或者 false</td></tr><tr><td>layout_alignParentRight</td><td>同 alignParentEnd，不推荐使用，值为 true 或者 false</td></tr><tr><td>layout_alignParentStart</td><td>在父空间的左边，值为 true 或者 false</td></tr><tr><td>layout_alignParentLeft</td><td>同 alignParentStart，不推荐使用，值为 true 或者 false</td></tr><tr><td>layout_below</td><td>在哪个元素的底部，需要指定“哪个元素”的id</td></tr></tbody></table><h3 id="谁的哪边"><a href="#谁的哪边" class="headerlink" title="谁的哪边"></a>谁的哪边</h3><p>以下图示展示了这些属性所带来的效果。</p><p>假设整个界面就是父容器。</p><blockquote><p>为了能够更好的展示出这些属性的效果，id 为 a 元素的位置是随意画的。😄😄</p></blockquote><p><img src="/images/Android/relativelayout/relativelayout.png" alt="元素" loading="lazy"></p><h3 id="RelativeLayout-代码示例"><a href="#RelativeLayout-代码示例" class="headerlink" title="RelativeLayout 代码示例"></a>RelativeLayout 代码示例</h3><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;top.bestguo.androidlayout.RelativeActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 设置父空间的底部对齐和右部对齐 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/view_1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;#000000&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentBottom</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentEnd</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 设置父空间的底部对齐和右部对齐 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/view_2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;#000000&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 设置位置view_2的右边 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/view_3&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;#ff0033&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_toEndOf</span>=<span class="string">&quot;@id/view_2&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 设置在 view_2 的底部 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/view_4&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;#cc4273&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_below</span>=<span class="string">&quot;@id/view_2&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/images/Android/relativelayout/QQ%E6%88%AA%E5%9B%BE20210124164803.jpg" loading="lazy"></p><p>其中，在 view_3 中属性 layout_toEndOf，意思是在谁的末尾。这里设置的是 view_2 的末尾。</p><p>还有，在 view_4 中属性 layout_below，意思是在谁的底部。这里设置的是 view_2 的底部。</p><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h4><p>以下示例展示了布局的嵌套</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;top.bestguo.androidlayout.RelativeActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 设置父空间的底部对齐和右部对齐 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/view_1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;#000000&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentBottom</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentEnd</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 设置父空间的底部对齐和右部对齐 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/view_2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;#000000&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 设置位置view_2的右边 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/view_3&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;#ff0033&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_toEndOf</span>=<span class="string">&quot;@id/view_2&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 设置在 view_2 的底部 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/view_4&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;#cc4273&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_below</span>=<span class="string">&quot;@id/view_2&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        除此之外，还能设置线性布局的位置。</span></span><br><span class="line"><span class="comment">        此线性布局是设置在view_4的下面。</span></span><br><span class="line"><span class="comment">        因为布局之间本来就是可以套用的。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;185dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_below</span>=<span class="string">&quot;@id/view_4&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;#0066ff&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:padding</span>=<span class="string">&quot;10dp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;#ff0033&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            设置了一个相对布局的组件。里面放了两个元素</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RelativeLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:padding</span>=<span class="string">&quot;10dp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 设置id为view_5 和颜色 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/view_5&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:background</span>=<span class="string">&quot;#ee9c4e&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 设置了属性，在view_5的右边并且设置左外边距为10dp --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:background</span>=<span class="string">&quot;#ee9c4e&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_toRightOf</span>=<span class="string">&quot;@id/view_5&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;10dp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/images/Android/relativelayout/QQ%E6%88%AA%E5%9B%BE20210124165530.jpg" loading="lazy"></p><blockquote><p>示例 2 使用到了前面学习的线性布局。即 LinearLayout 布局，然后线性布局当中又用运用到了相对布局。可见，布局之间是可以进行嵌套的。我也是刚刚学，我想未来在做界面的时候肯定是要用到各种布局的嵌套吧。</p></blockquote><blockquote><p>示例 2 在示例 1 的基础上进行扩充。这些布局系统也可以设置 layout_below 等这些相对的属性，包括未来使用的那些组件也是一样的，他们也能使用这些属性。但前提是这些属性要对应在哪个布局下面，否则，这些属性也将会是无效的属性。</p></blockquote><p>其中 LinearLayout（背景颜色为蓝色部分） 设置了 layout_below 属性，设置的 id 为 view_4，也就意味着这个 LinearLayout 布局是在 id 为 view_4 的组件的下面。然后 LinearLayout 布局系统内默认是水平排列的。设置了一个 View 组件和一个 RelativeLayout 组件。</p><p>其中 RelativeLayout（用白色框框起来的）有两个 View 组件，第一个 View 的组件的 id 为 view_5。第二个 View 组件中设置了一个属性为 toRightOf ，值为 view_5，也就是在 view_5 的右边。有间隙是因为第二个 View 组件中设置了一个外边距 marginLeft（建议使用 marginStart） 值为 10dp。</p><p>什么？布局居然在套娃，禁止套娃，禁止套娃！✋✋✋</p>]]></content>
      
      
      <categories>
          
          <category> Android 开发的学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 入门篇之 LinearLayout 的使用</title>
      <link href="/journal/How-to-use-linearlayout/"/>
      <url>/journal/How-to-use-linearlayout/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="我想要说"><a href="#我想要说" class="headerlink" title="我想要说"></a>我想要说</h2><p>Android 中有两个常用的布局 “LinearLayout” 和 “RelativeLayout” 两种。今天学习了 LinearLayout 布局，所以记录一下学习此布局的一些体会吧。</p><p>LinearLayout 布局也叫线性布局，它根据设置水平和垂直来设置其内部容器对应的布局方式</p><p>其实我发现，在学习 Android 布局开发时类似于 html 页面的布局开发，它的一部分属性其实是共用的。比如 background，layout_width，layout_height，layout_paddingLeft，layout_paddingRight，layout_paddingTop，layout_margin 等等。</p><p>所以，布局难度应该不大。加油吧！💪💪💪</p><p>在学习完布局之后，我还想通过一些案例来熟悉这些布局。</p><p>害，还不会用 git 的我真的是屑中之屑</p><span id="more"></span><h2 id="布局属性的介绍与使用"><a href="#布局属性的介绍与使用" class="headerlink" title="布局属性的介绍与使用"></a>布局属性的介绍与使用</h2><blockquote><p>在使用属性的时候，都会有一个“android:”<br>比如 “android:layout_width=”200dp””</p><p>建议的单位为“dp”</p></blockquote><h3 id="水平排列和垂直排列"><a href="#水平排列和垂直排列" class="headerlink" title="水平排列和垂直排列"></a>水平排列和垂直排列</h3><p>1、水平排列的结构如下<br><img src="/images/Android/linearlayout/QQ%E6%88%AA%E5%9B%BE20210123231012.jpg" loading="lazy"><br>2、垂直排列的结构如下<br><img src="/images/Android/linearlayout/QQ%E6%88%AA%E5%9B%BE20210123231126.jpg" loading="lazy"></p><h3 id="LinearLayout-的相关属性"><a href="#LinearLayout-的相关属性" class="headerlink" title="LinearLayout 的相关属性"></a>LinearLayout 的相关属性</h3><h4 id="基础属性"><a href="#基础属性" class="headerlink" title="基础属性"></a>基础属性</h4><table><thead><tr><th>属性名</th><th>属性描述</th></tr></thead><tbody><tr><td>layout_width</td><td>设置布局的宽</td></tr><tr><td>layout_height</td><td>设置布局的高</td></tr><tr><td>background</td><td>设置背景颜色（值为十六进制表示或者自定义的 drawable）</td></tr><tr><td>layout_marginLeft</td><td>设置左边的外边距</td></tr><tr><td>layout_marginRight</td><td>设置右边的外边距</td></tr><tr><td>layout_marginTop</td><td>设置顶部的外边距</td></tr><tr><td>layout_marginBottom</td><td>设置底部的外边距</td></tr><tr><td>layout_paddingLeft</td><td>设置左边的内边距</td></tr><tr><td>layout_paddingRight</td><td>设置右边的内边距</td></tr><tr><td>layout_paddingTop</td><td>设置顶部的内边距</td></tr><tr><td>layout_paddingBottom</td><td>设置底部的内边距</td></tr><tr><td>layout_weight</td><td>设置布局的权重划分（前提是他们的宽和高是一致的）</td></tr></tbody></table><h4 id="特有属性"><a href="#特有属性" class="headerlink" title="特有属性"></a>特有属性</h4><table><thead><tr><th>属性名</th><th>属性描述</th></tr></thead><tbody><tr><td>orientation</td><td>设置水平对齐还是垂直对齐</td></tr></tbody></table><blockquote><p>后续要是用到了其它的属性，再添加上去，并添加到示例上去</p></blockquote><h3 id="LinearLayout-示例"><a href="#LinearLayout-示例" class="headerlink" title="LinearLayout 示例"></a>LinearLayout 示例</h3><p>以下示例展示 LinearLayout 布局以及对应的属性。同时各种布局之间是可以进行嵌套的，可以在嵌套的布局中设置水平和垂直的布局方式。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">  创建一个LinearLayout布局，设置的布局方式为垂直布局。</span></span><br><span class="line"><span class="comment">  也就是说，orientation 设置成 vertical 时，被线性布局所包围的组件或容器，都是从上而下的排下来。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;top.bestguo.androidlayout.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      给当前布局设置属性</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;200dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;200dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;#000&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:paddingLeft</span>=<span class="string">&quot;20dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:paddingRight</span>=<span class="string">&quot;20dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:paddingTop</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:paddingBottom</span>=<span class="string">&quot;10dp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;#ff0000&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      给当前的布局设置属性，并且设置该线性布局内的排列方式为水平排列方式</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;200dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;#0066ff&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;15dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginRight</span>=<span class="string">&quot;15dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;20dp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 给每一个 View 组件设置权重，这样就可以按照权重来占用父元素的空间 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;#ff0000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;#00ff00&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;#CC298d&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行的效果如下：<br><img src="/images/Android/linearlayout/Screenshot_20210123_224244.jpg" loading="lazy"></p><p>如果调整对应的属性，那么以上的效果图就会随着属性的变化而变化。</p>]]></content>
      
      
      <categories>
          
          <category> Android 开发的学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 开发环境安装</title>
      <link href="/journal/AndroidStudio%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>/journal/AndroidStudio%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>下学期要教安卓开发了，在寒假里还是要好好的去预习一波。为了记录 Android 的学习历程，特意设置了一个新类别，叫做 “Android 开发学习历程”，未来还会设置一个“Android 开发常见问题”类别。在学习 Android 的相关知识都会记录在内，所以我相信，我能够入门<del>（错啦，是入土）</del>，并且可以开发出一个完整的 Android APP 项目出来。</p><p>奥利给，干咯！</p><p>我学习的视频是 bilibili 的天哥在奔跑的<a href="https://www.bilibili.com/video/BV1Rt411e76H">安卓视频教程</a>，版本确实有些老。不过没关系，为了入门我觉得这个视频也够了。</p><p><img src="/images/Android/tutoral/1.png" alt="Android" loading="lazy"></p><p>不过，在安装 Android 开发环境时，至少需要两个前置条件。但是还是会有一些吃力。</p><span id="more"></span><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><ol><li>需要安装 jdk 1.8 及以上，如果没有安装 jdk 请先安装一个 jdk 并配置环境变量才能继续。</li><li>需要有一些 java 的基础，会一些 java 面向对象编程</li><li>可有可无：~~ 需要有一些 html，css，js 基础。因为这些都差不多。~~</li></ol><h2 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h2><blockquote><p>我的 Android Studio 版本为 2.3.2，<a href="https://redirector.gvt1.com/edgedl/android/studio/install/2.3.2.0/android-studio-bundle-162.3934792-windows.exe">点击这里直接下载</a></p></blockquote><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><ol><li>一直 Next 到如图所示，将他们全部勾上<br><img src="/images/Android/tutoral/QQ%E6%88%AA%E5%9B%BE20210122145609.jpg" loading="lazy"></li><li>一直 Next 到如图所示，建议更改一下位置，如果你的 C 盘空间非常大请随意。我更改的 Android Studio 为“E:\Android\Android Sudio”，sdk 为“E:\Android\sdk”<br><img src="/images/Android/tutoral/QQ%E6%88%AA%E5%9B%BE20210122145830.jpg" loading="lazy"></li><li>点击 install，等待安装完成<br><img src="/images/Android/tutoral/QQ%E6%88%AA%E5%9B%BE20210122150056.jpg" loading="lazy"><br><img src="/images/Android/tutoral/QQ%E6%88%AA%E5%9B%BE20210122150140.jpg" loading="lazy"></li><li>安装完成，点击 Finish 或者关闭即可</li></ol><h3 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h3><ol><li>选择下面的，直接OK。然后等待进入项目创建界面<br><img src="/images/Android/tutoral/QQ%E6%88%AA%E5%9B%BE20210122163750.jpg" loading="lazy"></li><li>紧挨着会弹出一个窗口，点击 Cancel<br><img src="/images/Android/tutoral/QQ%E6%88%AA%E5%9B%BE20210122163919.jpg" loading="lazy"></li><li>这个时候出现了界面，我们点击 Next<br><img src="/images/Android/tutoral/QQ%E6%88%AA%E5%9B%BE20210122164039.jpg" loading="lazy"></li><li>选择 Custom，继续 Next<br><img src="/images/Android/tutoral/QQ%E6%88%AA%E5%9B%BE20210122164400.jpg" loading="lazy"></li><li>主题随意选择，接下来要选择 sdk 的安装路径。因为我是安装在“E:\Android\sdk”下，所以我就是这路径<br><img src="/images/Android/tutoral/QQ%E6%88%AA%E5%9B%BE20210122164715.jpg" loading="lazy"></li><li>然后我们暂时把这个勾去掉，因为目前还用不到最新的 Android 11版本，完成后 Next<br><img src="/images/Android/tutoral/QQ%E6%88%AA%E5%9B%BE20210122164954.jpg" loading="lazy"></li><li>选择分配的内存空间，根据自己电脑的性能来要求。如果电脑内存是4GB以及更低，将内存的分配调小一些。但注意：安卓虚拟机将会卡顿。选择完成后 Next。<br><img src="/images/Android/tutoral/QQ%E6%88%AA%E5%9B%BE20210122165402.jpg" loading="lazy"></li><li>点击 Finish，等待配置完成<br><img src="/images/Android/tutoral/QQ%E6%88%AA%E5%9B%BE20210122165625.jpg" loading="lazy"></li><li>安装成功，点击 Finish<br><img src="/images/Android/tutoral/QQ%E6%88%AA%E5%9B%BE20210122165802.jpg" loading="lazy"></li></ol><h3 id="创建第一个项目"><a href="#创建第一个项目" class="headerlink" title="创建第一个项目"></a>创建第一个项目</h3><ol><li><p>点击 “Start a new Android Studio project”<br><img src="/images/Android/tutoral/QQ%E6%88%AA%E5%9B%BE20210122183745.jpg" loading="lazy"></p></li><li><p>填写项目名，域名（如果没有域名也没关系，随便写比如 hsq .com）和更改项目的路径。然后 Next<br><img src="/images/Android/tutoral/QQ%E6%88%AA%E5%9B%BE20210122171136.jpg" loading="lazy"></p></li><li><p>选择你要求的 Android 系统的最低版本。我这里选择 5.1，然后 Next<br><img src="/images/Android/tutoral/QQ%E6%88%AA%E5%9B%BE20210122171440.jpg" loading="lazy"></p></li><li><p>我们默认选择 “Empty Activity”，然后 Next<br><img src="/images/Android/tutoral/QQ%E6%88%AA%E5%9B%BE20210122171610.jpg" loading="lazy"></p></li><li><p>直接 Finish，等待项目创建完成<br><img src="/images/Android/tutoral/QQ%E6%88%AA%E5%9B%BE20210122171810.jpg" loading="lazy"></p></li><li><p>创建完成之后，关闭窗口，然后下面会报一个错误<br><img src="/images/Android/tutoral/QQ%E6%88%AA%E5%9B%BE20210122172250.jpg" loading="lazy"><br><img src="/images/Android/tutoral/QQ%E6%88%AA%E5%9B%BE20210122172154.jpg" loading="lazy"></p></li><li><p>进入 build.gradle，修改的地方如下</p></li></ol><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">&#x27;com.android.application&#x27;</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">26</span></span><br><span class="line">    buildToolsVersion <span class="string">&quot;26.1.1&quot;</span> <span class="comment">// 修改</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">&quot;top.bestguo.myfirstapplication&quot;</span></span><br><span class="line">        minSdkVersion <span class="number">22</span></span><br><span class="line">        targetSdkVersion <span class="number">26</span> <span class="comment">// 修改</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">&quot;1.0&quot;</span></span><br><span class="line">        testInstrumentationRunner <span class="string">&quot;android.support.test.runner.AndroidJUnitRunner&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="keyword">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">&#x27;proguard-android.txt&#x27;</span>), <span class="string">&#x27;proguard-rules.pro&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(dir: <span class="string">&#x27;libs&#x27;</span>, <span class="keyword">include</span>: [<span class="string">&#x27;*.jar&#x27;</span>])</span><br><span class="line">    androidTestCompile(<span class="string">&#x27;com.android.support.test.espresso:espresso-core:2.2.2&#x27;</span>, &#123;</span><br><span class="line">        <span class="keyword">exclude</span> <span class="keyword">group</span>: <span class="string">&#x27;com.android.support&#x27;</span>, module: <span class="string">&#x27;support-annotations&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&#x27;com.android.support:appcompat-v7:26.+&#x27;</span> <span class="comment">// 修改</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&#x27;com.android.support.constraint:constraint-layout:1.0.2&#x27;</span></span><br><span class="line">    testCompile <span class="string">&#x27;junit:junit:4.12&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li>如果出现了以下问题，点击“install missing platform(s) and sync project”</li></ol><p><img src="/images/Android/tutoral/QQ%E6%88%AA%E5%9B%BE20210122174045.jpg" loading="lazy"></p><ol start="9"><li>等待下载并解压完成</li></ol><p><img src="/images/Android/tutoral/QQ%E6%88%AA%E5%9B%BE20210122174351.jpg" loading="lazy"></p><ol start="10"><li>如果出现了以下问题，点击“install build tools 26.0.0 and sync project”</li></ol><p><img src="/images/Android/tutoral/QQ%E6%88%AA%E5%9B%BE20210122174836.jpg" loading="lazy"></p><ol start="11"><li>等待下载并解压完成</li></ol><p><img src="/images/Android/tutoral/QQ%E6%88%AA%E5%9B%BE20210122174859.jpg" loading="lazy"></p><ol start="12"><li>解压完成之后，进入 build.gradle，修改 buildToolsVersion 为 “26.0.0” </li></ol><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">&#x27;com.android.application&#x27;</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">26</span></span><br><span class="line">    buildToolsVersion <span class="string">&quot;26.0.0&quot;</span> <span class="comment">// 修改为 26.0.0</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">&quot;top.bestguo.myfirstapplication&quot;</span></span><br><span class="line">        minSdkVersion <span class="number">22</span></span><br><span class="line">        targetSdkVersion <span class="number">26</span> <span class="comment">// 修改</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">&quot;1.0&quot;</span></span><br><span class="line">        testInstrumentationRunner <span class="string">&quot;android.support.test.runner.AndroidJUnitRunner&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="13"><li>这样，项目创建并配置完成<br><img src="/images/Android/tutoral/QQ%E6%88%AA%E5%9B%BE20210122175418.jpg" loading="lazy"></li></ol><h3 id="运行第一个项目"><a href="#运行第一个项目" class="headerlink" title="运行第一个项目"></a>运行第一个项目</h3><ol><li>点击运行项目，创建一台 Android 虚拟机</li></ol><p><img src="/images/Android/tutoral/QQ%E5%9B%BE%E7%89%8720210122175835.png" loading="lazy"></p><ol start="2"><li>选择一个屏幕分辨率，点击 Next</li></ol><p><img src="/images/Android/tutoral/QQ%E6%88%AA%E5%9B%BE20210122180036.jpg" loading="lazy"></p><ol start="3"><li>继续 Next</li></ol><p><img src="/images/Android/tutoral/QQ%E6%88%AA%E5%9B%BE20210122180133.jpg" loading="lazy"></p><ol start="4"><li>点击 Finish，最后选中那台虚拟机，点击 OK 即可</li></ol><p><img src="/images/Android/tutoral/QQ%E6%88%AA%E5%9B%BE20210122180218.jpg" loading="lazy"></p><ol start="5"><li>等待虚拟手机启动并看到程序运行成功的界面，这样，我们的第一个 Android 程序就这样完成了</li></ol><p><img src="/images/Android/tutoral/QQ%E6%88%AA%E5%9B%BE20210122180457.jpg" loading="lazy"></p><h2 id="安装后续"><a href="#安装后续" class="headerlink" title="安装后续"></a>安装后续</h2><p>哈哈，终于结束了，我要赶紧下载一波 bilibili，追番去咯。🤪🤪</p><h3 id="下载-bilibili"><a href="#下载-bilibili" class="headerlink" title="下载 bilibili"></a>下载 bilibili</h3><p><img src="/images/Android/tutoral/QQ%E6%88%AA%E5%9B%BE20210122184340.jpg" loading="lazy"></p><h3 id="安装-bilibili"><a href="#安装-bilibili" class="headerlink" title="安装 bilibili"></a>安装 bilibili</h3><p><img src="/images/Android/tutoral/QQ%E6%88%AA%E5%9B%BE20210122184505.jpg" loading="lazy"></p><p>嘿嘿，真有意思😄😄😄</p><h3 id="安装完成，开始追番"><a href="#安装完成，开始追番" class="headerlink" title="安装完成，开始追番"></a>安装完成，开始追番</h3><p><img src="/images/Android/tutoral/QQ%E6%88%AA%E5%9B%BE20210122184808.jpg" loading="lazy"></p><p>我要看猛男番“天使降临到我身边”，以下是 gif 图。</p><p><img src="/images/Android/tutoral/2021-01-22_185300.gif" loading="lazy"></p><p>猛男番就是不一样，自己的电脑的 CPU 都<del>受不了啦</del></p><p><img src="/images/Android/tutoral/QQ%E6%88%AA%E5%9B%BE20210122185651.jpg" loading="lazy"></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>后续我还会单独写这些 gradle 中为什么需要修改这些配置。以及如何使用 ADB 在自己的安卓手机上调试应用程序。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.csdn.net/mhl18820672087/article/details/78385361">https://blog.csdn.net/mhl18820672087/article/details/78385361</a></p>]]></content>
      
      
      <categories>
          
          <category> Android 开发的学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统之神秘的银行家算法</title>
      <link href="/journal/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%8B%E9%93%B6%E8%A1%8C%E5%AE%B6%E7%AE%97%E6%B3%95/"/>
      <url>/journal/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%8B%E9%93%B6%E8%A1%8C%E5%AE%B6%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>写这篇文章的目的，能够更简单的去理解银行家算法，这个算法可把我给想秃了😖。</p><p>银行家算法是由 Dijkstra 在 1965 年提出的，它是一个非常著名的死锁避免算法。其实吧，我觉得应该叫<font color="red"> 花呗 </font>算法更合适😂。以下，我会利用花呗的方式来理解这个算法。</p><p>还有就是期末考试要到了，祝大家逢考必过呀😊😊😊。</p><p><img src="/images/%E9%93%B6%E8%A1%8C%E5%AE%B6%E7%AE%97%E6%B3%95/first.jpg" alt="逢考必过" loading="lazy"></p><span id="more"></span><h2 id="算法介绍"><a href="#算法介绍" class="headerlink" title="算法介绍"></a>算法介绍</h2><p>银行家算法的实质就是<font color="red">要设法保证系统动态分配资源后不进入不安全状态，以避免可能产生的死锁。</font>即没当进程提出资源请求且系统的资源能够满足该请求时，系统将判断满足此次资源请求后系统状态是否安全，如果判断结果为安全，则给该进程分配资源，否则不分配资源，申请资源的进程将阻塞。</p><p><del>前面的都是 FIFA 可以忽略🐶🐶</del>，但还是建议看一下。</p><p>银行家算法的执行有个前提条件，即要求进程预先提出自己的最大资源请求，并假设系统拥有固定的资源总量。下面介绍银行家算法所用的主要的数据结构。</p><p>什么是向量？向量其实就是一个一维数组。什么是矩阵，矩阵就是一个二维数组。</p><ol><li>可用资源向量 available，记录着系统当前可以使用的资源数目。（花呗公司还剩多少钱）</li><li>最大需求矩阵 max，记录着进程对各类资源的最大需求量。（用户使用花呗的最大额度）</li><li>分配矩阵 allocation，记录着每个进程的当前占有量。（用户已经使用了多少的花呗）</li><li>需求矩阵 need，记录着每个进程对各类资源尚需要的数据。等于“最大需求矩阵 - 分配矩阵”之差。（用户剩余的花呗额度）</li><li>请求向量 request，记录着某个进程当前对各类资源的申请量，是银行家算法的入口参数。（用户想要使用多少花呗）</li></ol><h2 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h2><ol><li>检查资源的安全性。安全，申请请求。不安全，退出检查。</li><li>如果 request[i] &gt; need[i]，则进程 P[i] 出错 （如果你想用花呗借 400，可是你的剩余额度才只有 20，你想想，能借吗？）</li><li>如果 request[i] &gt; available[i]，则进程 P[i] 阻塞（如果你想用花呗借 400，可是花呗公司只有 200，你想想，能借吗？）</li><li>如果 request[i] ≤ need[i] 且 request[i] ≤ available[i]。则需要对相应的数据结构进行修改。<ol><li>available[i] = available[i] - request[i]。（比如花呗公司有 2000，用户向花呗借 20，此时花呗公司还剩 1980）</li><li>allocation[i] = allocation[i + request[i]。（比如用户已经向花呗借了 500，用户在向花呗借 20，此时用户已经借了 520）</li><li>need[i] = need[i] - request[i]。（比如用户的花呗剩余的额度为 300，用户向花呗借了 20，此时用户剩余的花呗额度为 280）</li></ol></li><li>继续检查资源的安全性</li></ol><p>算法的执行过程如下</p><p><img src="/images/%E9%93%B6%E8%A1%8C%E5%AE%B6%E7%AE%97%E6%B3%95/condition.png" alt="执行过程" loading="lazy"></p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p><img src="/images/%E9%93%B6%E8%A1%8C%E5%AE%B6%E7%AE%97%E6%B3%95/QQ%E6%88%AA%E5%9B%BE20210105204746.jpg" alt="aaa" loading="lazy"><br><img src="/images/%E9%93%B6%E8%A1%8C%E5%AE%B6%E7%AE%97%E6%B3%95/QQ%E6%88%AA%E5%9B%BE20210105204823.jpg" alt="bbb" loading="lazy"></p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>1、利用安全性算法，分析T(0)时刻的资源分配情况，如果安全，请写出安全序列。<br>2、假设T时刻，进程P1申请资源，其请求向量为Request(0,0,1)，系统能否将资源分配给它。</p><h3 id="第1问解答"><a href="#第1问解答" class="headerlink" title="第1问解答"></a>第1问解答</h3><p>这个安全性算法，其实就是。用户剩余的花呗额度（也就是 need）能否全部借过去。</p><p>然后借完之后，还回去，怎么还？将已使用的额度全部还回去就好了，此时的花呗公司的可用的金额为：<font color="red">已使用的额度 (allocation) + 花呗公司还剩的钱 (available)</font></p><p>T(0)时刻的资源分配情况如下</p><table><thead><tr><th>process</th><th>work</th><th>need</th><th>allocation</th><th>work + allocation</th><th>finish</th></tr></thead><tbody><tr><td>P2</td><td>0 1 1</td><td>0 0 1</td><td>6 1 2</td><td>6 2 3</td><td>true</td></tr><tr><td>p1</td><td>6 2 3</td><td>2 2 2</td><td>1 0 0</td><td>7 2 3</td><td>true</td></tr><tr><td>p3</td><td>7 2 3</td><td>1 0 3</td><td>2 1 1</td><td>9 3 4</td><td>true</td></tr><tr><td>p4</td><td>9 3 4</td><td>4 2 0</td><td>0 0 2</td><td>9 3 6</td><td>true</td></tr></tbody></table><p>其中 work 是当前的 available 数量。<br>由安全序列算法，结合表可知，安全序列为 &lt;p2, p1, p3, p4&gt;</p><p>但是安全序列是不唯一的。这个安全序列出现的原因是因为在检查 P1 的时候，出现了阻塞。当 P2 的资源释放了，p1再去尝试，可用资源是否能够满足 P1 的需求。</p><p>所以才有 &lt;p2, p1, p3, p4&gt;</p><h3 id="第2问解答"><a href="#第2问解答" class="headerlink" title="第2问解答"></a>第2问解答</h3><p>1、判断 request(0,0,1) ≤ available(0,1,1) 通过（如果花呗公司的金额够借）<br>2、判断 request(0,0,1) ≤ need(1,0,3) 通过（如果用户借的额度比用户剩余额度小）</p><p>available = available - request = 0,1,1 - 0,0,1 = 0,1,0（向花呗公司借了0,0,1，花呗公司还剩0,1,0）<br>allocation = allocation + request = 1,0,0 + 0,0,1 = 1,0,1（用户向花呗借了0,0,1。加起来就是已使用的花呗额度）<br>need = need - request = 2,2,2 - 0,0,1 = 2,2,1（用户向花呗借了0,0,1，用户可用的花呗额度就是减去已经借的额度）</p><p>所以，此时的资源分配情况如下</p><table><thead><tr><th>process</th><th>max</th><th>allocation</th><th>need</th><th>available</th></tr></thead><tbody><tr><td>P1</td><td>3,2,2</td><td>1,0,1</td><td>2,2,1</td><td>0,1,0</td></tr><tr><td>P2</td><td>6,1,3</td><td>6,1,2</td><td>0,0,1</td><td></td></tr><tr><td>P3</td><td>3 1 4</td><td>2 1 1</td><td>1 0 3</td><td></td></tr><tr><td>P4</td><td>4 2 2</td><td>0 0 2</td><td>4 2 0</td><td></td></tr></tbody></table><p>经过分析发现，可用的资源数已经不能满足所有进程，该系统不安全。进程P1阻塞。</p><p>原来 Hexo 主题之间的表格需要前后空两行才能正常显示，我麻了，搞了我很久。😂😂😂</p><h2 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h2><p><a href="https://blog.csdn.net/qq_33414271/article/details/80245715">https://blog.csdn.net/qq_33414271/article/details/80245715</a><br><a href="https://www.cnblogs.com/wkfvawl/p/11929508.html">https://www.cnblogs.com/wkfvawl/p/11929508.html</a><br><a href="https://www.jianshu.com/p/e19eff4311f4">https://www.jianshu.com/p/e19eff4311f4</a></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给你的网站加一把锁</title>
      <link href="/journal/%E7%BB%99%E4%BD%A0%E7%9A%84%E7%BD%91%E7%AB%99%E5%8A%A0%E4%B8%80%E6%8A%8A%E9%94%81/"/>
      <url>/journal/%E7%BB%99%E4%BD%A0%E7%9A%84%E7%BD%91%E7%AB%99%E5%8A%A0%E4%B8%80%E6%8A%8A%E9%94%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们在访问网站的时候，发现绝大多数站点的网址都是 https，少部分还是使用 http 协议。其实 http 其实是不安全的。</p><p>使用的场景：各种各样的用户中心、各种账号管理、QQ 空间 web 端、百度网盘 web 端、个人相册 web 端等等。</p><p>这些场景有大量的用户隐私，这些隐私要是直接在 http 上传播，就很容易被坏蛋所截获并读取。这个时候，毫无安全性可言。</p><p>而且，http 很容易就被植入广告，造成体验不佳。</p><p>所以，越来越多的网站使用 https，来保护网站的安全，保护用户隐私。</p><span id="more"></span><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><blockquote><p>由于本人在搭建个人网站的时候，使用的云服务器是阿里云的，如果你是放到 gitee、github 等上的，可以直接忽略。因为这些代码仓库使用的协议全是 https。</p><p>本来是想使用阿里云的 SSL 证书，发现阿里云并没有免费的 SSL 证书。所以，我们使用 FreeSSL 来获取免费的证书。</p><p>好吧，其实我才发现阿里云有免费的，心肺停止 😅</p><p>FIFA 不多说，直接开始！<br><img src="/images/%E7%BB%99%E4%BD%A0%E7%9A%84%E7%BD%91%E7%AB%99%E5%8A%A0%E4%B8%80%E6%8A%8A%E9%94%81/QQ%E6%88%AA%E5%9B%BE20210103101245.jpg" alt="我哭了" loading="lazy"></p></blockquote><h3 id="获取证书"><a href="#获取证书" class="headerlink" title="获取证书"></a>获取证书</h3><p>1、进入 <a href="https://freessl.cn/">freeSSL</a> 先进行注册和登录 ，<del>需要绑定手机号真麻烦</del></p><p><img src="/images/%E7%BB%99%E4%BD%A0%E7%9A%84%E7%BD%91%E7%AB%99%E5%8A%A0%E4%B8%80%E6%8A%8A%E9%94%81/QQ%E6%88%AA%E5%9B%BE20210103101956.jpg" loading="lazy"></p><p>2、回到这个界面，输入你的网站域名，选择你喜欢的品牌，不过只有两个免费的，我这里选择有效期为 1 年的亚洲诚信。亚洲诚信有两个域名可用，一个根域名，一个 www 的二级域名</p><p>最后，点击创建免费的 ssl 证书</p><p><img src="/images/%E7%BB%99%E4%BD%A0%E7%9A%84%E7%BD%91%E7%AB%99%E5%8A%A0%E4%B8%80%E6%8A%8A%E9%94%81/QQ%E6%88%AA%E5%9B%BE20210103101956.jpg" loading="lazy"></p><p>3、点击创建完成之后，填写你的邮箱，<a href="https://baike.baidu.com/item/CSR/22403894">CSR（证书请求文件）</a> 生成选择浏览器生成就好了（其实就是不想下载客户端了）。</p><p><img src="/images/%E7%BB%99%E4%BD%A0%E7%9A%84%E7%BD%91%E7%AB%99%E5%8A%A0%E4%B8%80%E6%8A%8A%E9%94%81/QQ%E6%88%AA%E5%9B%BE20210103103549.jpg" loading="lazy"></p><p>确认创建订单</p><p><img src="/images/%E7%BB%99%E4%BD%A0%E7%9A%84%E7%BD%91%E7%AB%99%E5%8A%A0%E4%B8%80%E6%8A%8A%E9%94%81/QQ%E6%88%AA%E5%9B%BE20210103103708.jpg" loading="lazy"></p><p>创建完成，浏览器会弹出下载框，请务必把私钥给保存好。</p><h3 id="DNS-验证"><a href="#DNS-验证" class="headerlink" title="DNS 验证"></a>DNS 验证</h3><blockquote><p>密钥生成成功，需要进行 DNS 验证。</p><p><img src="/images/%E7%BB%99%E4%BD%A0%E7%9A%84%E7%BD%91%E7%AB%99%E5%8A%A0%E4%B8%80%E6%8A%8A%E9%94%81/QQ%E6%88%AA%E5%9B%BE20210103104631.jpg" loading="lazy"></p><p><font color="red">注意：生成成功这个页面请勿关闭，否则需要重新来生成</font></p></blockquote><p>1、进入阿里云的云解析 DNS</p><p><img src="/images/%E7%BB%99%E4%BD%A0%E7%9A%84%E7%BD%91%E7%AB%99%E5%8A%A0%E4%B8%80%E6%8A%8A%E9%94%81/QQ%E6%88%AA%E5%9B%BE20210103104346.jpg" loading="lazy"></p><p>2、点击添加记录，选择记录类型为TXT，主机记录为_dnsauth，记录值就是生成的记录值，复制进去即可，最后点击确认。新的主机记录就添加上去了。</p><p><img src="/images/%E7%BB%99%E4%BD%A0%E7%9A%84%E7%BD%91%E7%AB%99%E5%8A%A0%E4%B8%80%E6%8A%8A%E9%94%81/QQ%E6%88%AA%E5%9B%BE20210103104934.jpg" loading="lazy"></p><p>3、进入到 FreeSSL 的控制台，点击验证，验证成功后会自动打包，需要你下载证书文件和私钥文件。</p><p><img src="/images/%E7%BB%99%E4%BD%A0%E7%9A%84%E7%BD%91%E7%AB%99%E5%8A%A0%E4%B8%80%E6%8A%8A%E9%94%81/QQ%E6%88%AA%E5%9B%BE20210103105604.jpg" loading="lazy"></p><h3 id="上传证书文件和私钥文件到云服务器"><a href="#上传证书文件和私钥文件到云服务器" class="headerlink" title="上传证书文件和私钥文件到云服务器"></a>上传证书文件和私钥文件到云服务器</h3><blockquote><p>这里使用的是 nginx 服务器</p></blockquote><p>1、在 nginx 配置目录下创建名 ssh 的文件夹（我的nginx的配置路径在 /etc/nginx 目录下）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@izgtymdwetse3wz ~]<span class="comment"># cd /etc/nginx/</span></span><br><span class="line">[root@izgtymdwetse3wz nginx]<span class="comment"># mkdir ssh</span></span><br></pre></td></tr></table></figure><p>2、将证书文件和私钥文件复制到这个目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@izgtymdwetse3wz nginx]<span class="comment"># ll -a ssl</span></span><br><span class="line">total 16</span><br><span class="line">drwxr-xr-x 2 root root 4096 Jan  2 11:16 .</span><br><span class="line">drwxr-xr-x 3 root root 4096 Jan  2 15:33 </span><br><span class="line">-rw-r--r-- 1 root root 3771 Jan  2 11:16 full_chain.pem</span><br><span class="line">-rw-r--r-- 1 root root 1728 Jan  2 11:16 private.key</span><br></pre></td></tr></table></figure><p>3、编辑 nginx.conf 文件，更改监听端口为 443 ssl，添加证书路径 ssl_certificate 和私钥 ssl_certificate_key </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen       443 ssl;</span><br><span class="line">  server_name  www.bestguo.top;</span><br><span class="line"></span><br><span class="line">  ssl_certificate     ssl/full_chain.pem;</span><br><span class="line">  ssl_certificate_key ssl/private.key;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重启-nginx"><a href="#重启-nginx" class="headerlink" title="重启 nginx"></a>重启 nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@izgtymdwetse3wz nginx]<span class="comment"># nginx -s reload</span></span><br></pre></td></tr></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>直接访问 <a href="https://www.bestguo.top/">https://www.bestguo.top</a> ，证书已经生效，并且有一把锁的图标</p><p><img src="/images/%E7%BB%99%E4%BD%A0%E7%9A%84%E7%BD%91%E7%AB%99%E5%8A%A0%E4%B8%80%E6%8A%8A%E9%94%81/QQ%E6%88%AA%E5%9B%BE20210103114331.jpg" loading="lazy"></p><p>这样，我们访问的页面的时候，服务器和用户之间的数据传输就不会直接暴露，不会被恶意篡改。</p><h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h2><h3 id="如何将-http-重定向-https"><a href="#如何将-http-重定向-https" class="headerlink" title="如何将 http 重定向 https"></a>如何将 http 重定向 https</h3><p>在 nginx.conf 下，添加以下的配置。</p><p>首先监听80端口，指定 server_name，通过 rewrite 重定向到 https 页面。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name www.bestguo.top;</span><br><span class="line">    rewrite ^(.*)$ https://<span class="variable">$&#123;server_name&#125;</span><span class="variable">$1</span> permanent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网站的部署与维护 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站搭建 </tag>
            
            <tag> Linux </tag>
            
            <tag> SSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>元旦祝福</title>
      <link href="/journal/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
      <url>/journal/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/images/%E5%85%83%E6%97%A6%E7%A5%9D%E7%A6%8F/happy.gif" alt="元旦祝福" loading="lazy"></p><center>元旦到，烦恼消，坎坷不顺全忘掉；<br>元旦到，好运报，万事顺利开颜笑；<br>元旦到，祝福到，朋友情谊忘不了。<br>祝你元旦人快乐，健健康康幸福罩！</center><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 小赫赫的日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
